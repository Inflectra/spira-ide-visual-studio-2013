//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
    [System.SerializableAttribute()]
    public partial struct ServiceFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationEngine", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationEngine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange DateRangeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.MultiValueFilter MultiValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange DateRangeValue {
            get {
                return this.DateRangeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DateRangeValueField, value) != true)) {
                    this.DateRangeValueField = value;
                    this.RaisePropertyChanged("DateRangeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntValue {
            get {
                return this.IntValueField;
            }
            set {
                if ((this.IntValueField.Equals(value) != true)) {
                    this.IntValueField = value;
                    this.RaisePropertyChanged("IntValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.MultiValueFilter MultiValue {
            get {
                return this.MultiValueField;
            }
            set {
                if ((object.ReferenceEquals(this.MultiValueField, value) != true)) {
                    this.MultiValueField = value;
                    this.RaisePropertyChanged("MultiValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateRange", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class DateRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConsiderTimesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ConsiderTimes {
            get {
                return this.ConsiderTimesField;
            }
            set {
                if ((this.ConsiderTimesField.Equals(value) != true)) {
                    this.ConsiderTimesField = value;
                    this.RaisePropertyChanged("ConsiderTimes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MultiValueFilter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class MultiValueFilter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNone {
            get {
                return this.IsNoneField;
            }
            set {
                if ((this.IsNoneField.Equals(value) != true)) {
                    this.IsNoneField = value;
                    this.RaisePropertyChanged("IsNone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSort", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSort : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PropertyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortAscendingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PropertyName {
            get {
                return this.PropertyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertyNameField, value) != true)) {
                    this.PropertyNameField = value;
                    this.RaisePropertyChanged("PropertyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortAscending {
            get {
                return this.SortAscendingField;
            }
            set {
                if ((this.SortAscendingField.Equals(value) != true)) {
                    this.SortAscendingField = value;
                    this.RaisePropertyChanged("SortAscending");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuild", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuild : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BuildStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuildSourceCode> RevisionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildStatusId {
            get {
                return this.BuildStatusIdField;
            }
            set {
                if ((this.BuildStatusIdField.Equals(value) != true)) {
                    this.BuildStatusIdField = value;
                    this.RaisePropertyChanged("BuildStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BuildStatusName {
            get {
                return this.BuildStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BuildStatusNameField, value) != true)) {
                    this.BuildStatusNameField = value;
                    this.RaisePropertyChanged("BuildStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuildSourceCode> Revisions {
            get {
                return this.RevisionsField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionsField, value) != true)) {
                    this.RevisionsField = value;
                    this.RaisePropertyChanged("Revisions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteBuildSourceCode", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteBuildSourceCode : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionKey {
            get {
                return this.RevisionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionKeyField, value) != true)) {
                    this.RevisionKeyField = value;
                    this.RaisePropertyChanged("RevisionKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifact", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement))]
    public partial class RemoteArtifact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ConcurrencyDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifactCustomProperty> CustomPropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ConcurrencyDate {
            get {
                return this.ConcurrencyDateField;
            }
            set {
                if ((this.ConcurrencyDateField.Equals(value) != true)) {
                    this.ConcurrencyDateField = value;
                    this.RaisePropertyChanged("ConcurrencyDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifactCustomProperty> CustomProperties {
            get {
                return this.CustomPropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertiesField, value) != true)) {
                    this.CustomPropertiesField = value;
                    this.RaisePropertyChanged("CustomProperties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTask", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTask : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequirementNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskPriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskPriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskStatusNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequirementName {
            get {
                return this.RequirementNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RequirementNameField, value) != true)) {
                    this.RequirementNameField = value;
                    this.RaisePropertyChanged("RequirementName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskPriorityId {
            get {
                return this.TaskPriorityIdField;
            }
            set {
                if ((this.TaskPriorityIdField.Equals(value) != true)) {
                    this.TaskPriorityIdField = value;
                    this.RaisePropertyChanged("TaskPriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskPriorityName {
            get {
                return this.TaskPriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskPriorityNameField, value) != true)) {
                    this.TaskPriorityNameField = value;
                    this.RaisePropertyChanged("TaskPriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskStatusId {
            get {
                return this.TaskStatusIdField;
            }
            set {
                if ((this.TaskStatusIdField.Equals(value) != true)) {
                    this.TaskStatusIdField = value;
                    this.RaisePropertyChanged("TaskStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskStatusName {
            get {
                return this.TaskStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskStatusNameField, value) != true)) {
                    this.TaskStatusNameField = value;
                    this.RaisePropertyChanged("TaskStatusName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCase", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCase : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCasePriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCasePriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep> TestStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Folder {
            get {
                return this.FolderField;
            }
            set {
                if ((this.FolderField.Equals(value) != true)) {
                    this.FolderField = value;
                    this.RaisePropertyChanged("Folder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCasePriorityId {
            get {
                return this.TestCasePriorityIdField;
            }
            set {
                if ((this.TestCasePriorityIdField.Equals(value) != true)) {
                    this.TestCasePriorityIdField = value;
                    this.RaisePropertyChanged("TestCasePriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCasePriorityName {
            get {
                return this.TestCasePriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCasePriorityNameField, value) != true)) {
                    this.TestCasePriorityNameField = value;
                    this.RaisePropertyChanged("TestCasePriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep> TestSteps {
            get {
                return this.TestStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestStepsField, value) != true)) {
                    this.TestStepsField = value;
                    this.RaisePropertyChanged("TestSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStep : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> LinkedTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> LinkedTestCaseId {
            get {
                return this.LinkedTestCaseIdField;
            }
            set {
                if ((this.LinkedTestCaseIdField.Equals(value) != true)) {
                    this.LinkedTestCaseIdField = value;
                    this.RaisePropertyChanged("LinkedTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun))]
    public partial class RemoteTestRun : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> BuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetTestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TesterIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualDuration {
            get {
                return this.ActualDurationField;
            }
            set {
                if ((this.ActualDurationField.Equals(value) != true)) {
                    this.ActualDurationField = value;
                    this.RaisePropertyChanged("ActualDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BuildId {
            get {
                return this.BuildIdField;
            }
            set {
                if ((this.BuildIdField.Equals(value) != true)) {
                    this.BuildIdField = value;
                    this.RaisePropertyChanged("BuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedDuration {
            get {
                return this.EstimatedDurationField;
            }
            set {
                if ((this.EstimatedDurationField.Equals(value) != true)) {
                    this.EstimatedDurationField = value;
                    this.RaisePropertyChanged("EstimatedDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TesterId {
            get {
                return this.TesterIdField;
            }
            set {
                if ((this.TesterIdField.Equals(value) != true)) {
                    this.TesterIdField = value;
                    this.RaisePropertyChanged("TesterId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteManualTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteManualTestRun : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRunStep> TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRunStep> TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomatedTestRun", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomatedTestRun : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationAttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationEngineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AutomationEngineTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RunnerAssertCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerStackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RunnerTestNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ScheduledDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunFormatIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRunStep> TestRunStepsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationAttachmentId {
            get {
                return this.AutomationAttachmentIdField;
            }
            set {
                if ((this.AutomationAttachmentIdField.Equals(value) != true)) {
                    this.AutomationAttachmentIdField = value;
                    this.RaisePropertyChanged("AutomationAttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationEngineId {
            get {
                return this.AutomationEngineIdField;
            }
            set {
                if ((this.AutomationEngineIdField.Equals(value) != true)) {
                    this.AutomationEngineIdField = value;
                    this.RaisePropertyChanged("AutomationEngineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AutomationEngineToken {
            get {
                return this.AutomationEngineTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.AutomationEngineTokenField, value) != true)) {
                    this.AutomationEngineTokenField = value;
                    this.RaisePropertyChanged("AutomationEngineToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RunnerAssertCount {
            get {
                return this.RunnerAssertCountField;
            }
            set {
                if ((this.RunnerAssertCountField.Equals(value) != true)) {
                    this.RunnerAssertCountField = value;
                    this.RaisePropertyChanged("RunnerAssertCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerMessage {
            get {
                return this.RunnerMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerMessageField, value) != true)) {
                    this.RunnerMessageField = value;
                    this.RaisePropertyChanged("RunnerMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName {
            get {
                return this.RunnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerNameField, value) != true)) {
                    this.RunnerNameField = value;
                    this.RaisePropertyChanged("RunnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerStackTrace {
            get {
                return this.RunnerStackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerStackTraceField, value) != true)) {
                    this.RunnerStackTraceField = value;
                    this.RaisePropertyChanged("RunnerStackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerTestName {
            get {
                return this.RunnerTestNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RunnerTestNameField, value) != true)) {
                    this.RunnerTestNameField = value;
                    this.RaisePropertyChanged("RunnerTestName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ScheduledDate {
            get {
                return this.ScheduledDateField;
            }
            set {
                if ((this.ScheduledDateField.Equals(value) != true)) {
                    this.ScheduledDateField = value;
                    this.RaisePropertyChanged("ScheduledDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunFormatId {
            get {
                return this.TestRunFormatIdField;
            }
            set {
                if ((this.TestRunFormatIdField.Equals(value) != true)) {
                    this.TestRunFormatIdField = value;
                    this.RaisePropertyChanged("TestRunFormatId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRunStep> TestRunSteps {
            get {
                return this.TestRunStepsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestRunStepsField, value) != true)) {
                    this.TestRunStepsField = value;
                    this.RaisePropertyChanged("TestRunSteps");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSet", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSet : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotApplicableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountNotRunField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ExecutionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PlannedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RecurrenceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecurrenceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestSetStatusNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountBlocked {
            get {
                return this.CountBlockedField;
            }
            set {
                if ((this.CountBlockedField.Equals(value) != true)) {
                    this.CountBlockedField = value;
                    this.RaisePropertyChanged("CountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountCaution {
            get {
                return this.CountCautionField;
            }
            set {
                if ((this.CountCautionField.Equals(value) != true)) {
                    this.CountCautionField = value;
                    this.RaisePropertyChanged("CountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountFailed {
            get {
                return this.CountFailedField;
            }
            set {
                if ((this.CountFailedField.Equals(value) != true)) {
                    this.CountFailedField = value;
                    this.RaisePropertyChanged("CountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotApplicable {
            get {
                return this.CountNotApplicableField;
            }
            set {
                if ((this.CountNotApplicableField.Equals(value) != true)) {
                    this.CountNotApplicableField = value;
                    this.RaisePropertyChanged("CountNotApplicable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountNotRun {
            get {
                return this.CountNotRunField;
            }
            set {
                if ((this.CountNotRunField.Equals(value) != true)) {
                    this.CountNotRunField = value;
                    this.RaisePropertyChanged("CountNotRun");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CountPassed {
            get {
                return this.CountPassedField;
            }
            set {
                if ((this.CountPassedField.Equals(value) != true)) {
                    this.CountPassedField = value;
                    this.RaisePropertyChanged("CountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ExecutionDate {
            get {
                return this.ExecutionDateField;
            }
            set {
                if ((this.ExecutionDateField.Equals(value) != true)) {
                    this.ExecutionDateField = value;
                    this.RaisePropertyChanged("ExecutionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Folder {
            get {
                return this.FolderField;
            }
            set {
                if ((this.FolderField.Equals(value) != true)) {
                    this.FolderField = value;
                    this.RaisePropertyChanged("Folder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlannedDate {
            get {
                return this.PlannedDateField;
            }
            set {
                if ((this.PlannedDateField.Equals(value) != true)) {
                    this.PlannedDateField = value;
                    this.RaisePropertyChanged("PlannedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RecurrenceId {
            get {
                return this.RecurrenceIdField;
            }
            set {
                if ((this.RecurrenceIdField.Equals(value) != true)) {
                    this.RecurrenceIdField = value;
                    this.RaisePropertyChanged("RecurrenceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecurrenceName {
            get {
                return this.RecurrenceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RecurrenceNameField, value) != true)) {
                    this.RecurrenceNameField = value;
                    this.RaisePropertyChanged("RecurrenceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunTypeId {
            get {
                return this.TestRunTypeIdField;
            }
            set {
                if ((this.TestRunTypeIdField.Equals(value) != true)) {
                    this.TestRunTypeIdField = value;
                    this.RaisePropertyChanged("TestRunTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetStatusId {
            get {
                return this.TestSetStatusIdField;
            }
            set {
                if ((this.TestSetStatusIdField.Equals(value) != true)) {
                    this.TestSetStatusIdField = value;
                    this.RaisePropertyChanged("TestSetStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestSetStatusName {
            get {
                return this.TestSetStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TestSetStatusNameField, value) != true)) {
                    this.TestSetStatusNameField = value;
                    this.RaisePropertyChanged("TestSetStatusName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAutomationHost", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAutomationHost : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AutomationHostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AutomationHostId {
            get {
                return this.AutomationHostIdField;
            }
            set {
                if ((this.AutomationHostIdField.Equals(value) != true)) {
                    this.AutomationHostIdField = value;
                    this.RaisePropertyChanged("AutomationHostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncident", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncident : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ClosedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CompletionPercentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DetectedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DetectedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FixedBuildIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FixedBuildNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IncidentStatusOpenStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OpenerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OpenerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PriorityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RemainingEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ResolvedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResolvedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SeverityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunStepIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> VerifiedReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerifiedReleaseVersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ActualEffort {
            get {
                return this.ActualEffortField;
            }
            set {
                if ((this.ActualEffortField.Equals(value) != true)) {
                    this.ActualEffortField = value;
                    this.RaisePropertyChanged("ActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClosedDate {
            get {
                return this.ClosedDateField;
            }
            set {
                if ((this.ClosedDateField.Equals(value) != true)) {
                    this.ClosedDateField = value;
                    this.RaisePropertyChanged("ClosedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompletionPercent {
            get {
                return this.CompletionPercentField;
            }
            set {
                if ((this.CompletionPercentField.Equals(value) != true)) {
                    this.CompletionPercentField = value;
                    this.RaisePropertyChanged("CompletionPercent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DetectedReleaseId {
            get {
                return this.DetectedReleaseIdField;
            }
            set {
                if ((this.DetectedReleaseIdField.Equals(value) != true)) {
                    this.DetectedReleaseIdField = value;
                    this.RaisePropertyChanged("DetectedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DetectedReleaseVersionNumber {
            get {
                return this.DetectedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.DetectedReleaseVersionNumberField, value) != true)) {
                    this.DetectedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("DetectedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstimatedEffort {
            get {
                return this.EstimatedEffortField;
            }
            set {
                if ((this.EstimatedEffortField.Equals(value) != true)) {
                    this.EstimatedEffortField = value;
                    this.RaisePropertyChanged("EstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FixedBuildId {
            get {
                return this.FixedBuildIdField;
            }
            set {
                if ((this.FixedBuildIdField.Equals(value) != true)) {
                    this.FixedBuildIdField = value;
                    this.RaisePropertyChanged("FixedBuildId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FixedBuildName {
            get {
                return this.FixedBuildNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FixedBuildNameField, value) != true)) {
                    this.FixedBuildNameField = value;
                    this.RaisePropertyChanged("FixedBuildName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentId {
            get {
                return this.IncidentIdField;
            }
            set {
                if ((this.IncidentIdField.Equals(value) != true)) {
                    this.IncidentIdField = value;
                    this.RaisePropertyChanged("IncidentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatusName {
            get {
                return this.IncidentStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusNameField, value) != true)) {
                    this.IncidentStatusNameField = value;
                    this.RaisePropertyChanged("IncidentStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IncidentStatusOpenStatus {
            get {
                return this.IncidentStatusOpenStatusField;
            }
            set {
                if ((this.IncidentStatusOpenStatusField.Equals(value) != true)) {
                    this.IncidentStatusOpenStatusField = value;
                    this.RaisePropertyChanged("IncidentStatusOpenStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentTypeName {
            get {
                return this.IncidentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentTypeNameField, value) != true)) {
                    this.IncidentTypeNameField = value;
                    this.RaisePropertyChanged("IncidentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OpenerId {
            get {
                return this.OpenerIdField;
            }
            set {
                if ((this.OpenerIdField.Equals(value) != true)) {
                    this.OpenerIdField = value;
                    this.RaisePropertyChanged("OpenerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenerName {
            get {
                return this.OpenerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OpenerNameField, value) != true)) {
                    this.OpenerNameField = value;
                    this.RaisePropertyChanged("OpenerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PriorityName {
            get {
                return this.PriorityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PriorityNameField, value) != true)) {
                    this.PriorityNameField = value;
                    this.RaisePropertyChanged("PriorityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectedEffort {
            get {
                return this.ProjectedEffortField;
            }
            set {
                if ((this.ProjectedEffortField.Equals(value) != true)) {
                    this.ProjectedEffortField = value;
                    this.RaisePropertyChanged("ProjectedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RemainingEffort {
            get {
                return this.RemainingEffortField;
            }
            set {
                if ((this.RemainingEffortField.Equals(value) != true)) {
                    this.RemainingEffortField = value;
                    this.RaisePropertyChanged("RemainingEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ResolvedReleaseId {
            get {
                return this.ResolvedReleaseIdField;
            }
            set {
                if ((this.ResolvedReleaseIdField.Equals(value) != true)) {
                    this.ResolvedReleaseIdField = value;
                    this.RaisePropertyChanged("ResolvedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResolvedReleaseVersionNumber {
            get {
                return this.ResolvedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ResolvedReleaseVersionNumberField, value) != true)) {
                    this.ResolvedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ResolvedReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SeverityName {
            get {
                return this.SeverityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SeverityNameField, value) != true)) {
                    this.SeverityNameField = value;
                    this.RaisePropertyChanged("SeverityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunStepId {
            get {
                return this.TestRunStepIdField;
            }
            set {
                if ((this.TestRunStepIdField.Equals(value) != true)) {
                    this.TestRunStepIdField = value;
                    this.RaisePropertyChanged("TestRunStepId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VerifiedReleaseId {
            get {
                return this.VerifiedReleaseIdField;
            }
            set {
                if ((this.VerifiedReleaseIdField.Equals(value) != true)) {
                    this.VerifiedReleaseIdField = value;
                    this.RaisePropertyChanged("VerifiedReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerifiedReleaseVersionNumber {
            get {
                return this.VerifiedReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VerifiedReleaseVersionNumberField, value) != true)) {
                    this.VerifiedReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("VerifiedReleaseVersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRelease", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRelease : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AvailableEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaysNonWorkingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IterationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlannedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResourceCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AvailableEffort {
            get {
                return this.AvailableEffortField;
            }
            set {
                if ((this.AvailableEffortField.Equals(value) != true)) {
                    this.AvailableEffortField = value;
                    this.RaisePropertyChanged("AvailableEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysNonWorking {
            get {
                return this.DaysNonWorkingField;
            }
            set {
                if ((this.DaysNonWorkingField.Equals(value) != true)) {
                    this.DaysNonWorkingField = value;
                    this.RaisePropertyChanged("DaysNonWorking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Iteration {
            get {
                return this.IterationField;
            }
            set {
                if ((this.IterationField.Equals(value) != true)) {
                    this.IterationField = value;
                    this.RaisePropertyChanged("Iteration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlannedEffort {
            get {
                return this.PlannedEffortField;
            }
            set {
                if ((this.PlannedEffortField.Equals(value) != true)) {
                    this.PlannedEffortField = value;
                    this.RaisePropertyChanged("PlannedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResourceCount {
            get {
                return this.ResourceCountField;
            }
            set {
                if ((this.ResourceCountField.Equals(value) != true)) {
                    this.ResourceCountField = value;
                    this.RaisePropertyChanged("ResourceCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirement", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirement : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteArtifact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountCautionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountFailedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountPassedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CoverageCountTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImportanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImportanceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastUpdateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PlannedEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReleaseVersionNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskActualEffortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TaskEstimatedEffortField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountBlocked {
            get {
                return this.CoverageCountBlockedField;
            }
            set {
                if ((this.CoverageCountBlockedField.Equals(value) != true)) {
                    this.CoverageCountBlockedField = value;
                    this.RaisePropertyChanged("CoverageCountBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountCaution {
            get {
                return this.CoverageCountCautionField;
            }
            set {
                if ((this.CoverageCountCautionField.Equals(value) != true)) {
                    this.CoverageCountCautionField = value;
                    this.RaisePropertyChanged("CoverageCountCaution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountFailed {
            get {
                return this.CoverageCountFailedField;
            }
            set {
                if ((this.CoverageCountFailedField.Equals(value) != true)) {
                    this.CoverageCountFailedField = value;
                    this.RaisePropertyChanged("CoverageCountFailed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountPassed {
            get {
                return this.CoverageCountPassedField;
            }
            set {
                if ((this.CoverageCountPassedField.Equals(value) != true)) {
                    this.CoverageCountPassedField = value;
                    this.RaisePropertyChanged("CoverageCountPassed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CoverageCountTotal {
            get {
                return this.CoverageCountTotalField;
            }
            set {
                if ((this.CoverageCountTotalField.Equals(value) != true)) {
                    this.CoverageCountTotalField = value;
                    this.RaisePropertyChanged("CoverageCountTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImportanceId {
            get {
                return this.ImportanceIdField;
            }
            set {
                if ((this.ImportanceIdField.Equals(value) != true)) {
                    this.ImportanceIdField = value;
                    this.RaisePropertyChanged("ImportanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImportanceName {
            get {
                return this.ImportanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportanceNameField, value) != true)) {
                    this.ImportanceNameField = value;
                    this.RaisePropertyChanged("ImportanceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastUpdateDate {
            get {
                return this.LastUpdateDateField;
            }
            set {
                if ((this.LastUpdateDateField.Equals(value) != true)) {
                    this.LastUpdateDateField = value;
                    this.RaisePropertyChanged("LastUpdateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OwnerName {
            get {
                return this.OwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnerNameField, value) != true)) {
                    this.OwnerNameField = value;
                    this.RaisePropertyChanged("OwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PlannedEffort {
            get {
                return this.PlannedEffortField;
            }
            set {
                if ((this.PlannedEffortField.Equals(value) != true)) {
                    this.PlannedEffortField = value;
                    this.RaisePropertyChanged("PlannedEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReleaseVersionNumber {
            get {
                return this.ReleaseVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ReleaseVersionNumberField, value) != true)) {
                    this.ReleaseVersionNumberField = value;
                    this.RaisePropertyChanged("ReleaseVersionNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> StatusId {
            get {
                return this.StatusIdField;
            }
            set {
                if ((this.StatusIdField.Equals(value) != true)) {
                    this.StatusIdField = value;
                    this.RaisePropertyChanged("StatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusName {
            get {
                return this.StatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusNameField, value) != true)) {
                    this.StatusNameField = value;
                    this.RaisePropertyChanged("StatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((this.SummaryField.Equals(value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskActualEffort {
            get {
                return this.TaskActualEffortField;
            }
            set {
                if ((this.TaskActualEffortField.Equals(value) != true)) {
                    this.TaskActualEffortField = value;
                    this.RaisePropertyChanged("TaskActualEffort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskCount {
            get {
                return this.TaskCountField;
            }
            set {
                if ((this.TaskCountField.Equals(value) != true)) {
                    this.TaskCountField = value;
                    this.RaisePropertyChanged("TaskCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TaskEstimatedEffort {
            get {
                return this.TaskEstimatedEffortField;
            }
            set {
                if ((this.TaskEstimatedEffortField.Equals(value) != true)) {
                    this.TaskEstimatedEffortField = value;
                    this.RaisePropertyChanged("TaskEstimatedEffort");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteArtifactCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteArtifactCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> BooleanValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateTimeValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> DecimalValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty DefinitionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<int> IntegerListValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IntegerValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> BooleanValue {
            get {
                return this.BooleanValueField;
            }
            set {
                if ((this.BooleanValueField.Equals(value) != true)) {
                    this.BooleanValueField = value;
                    this.RaisePropertyChanged("BooleanValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateTimeValue {
            get {
                return this.DateTimeValueField;
            }
            set {
                if ((this.DateTimeValueField.Equals(value) != true)) {
                    this.DateTimeValueField = value;
                    this.RaisePropertyChanged("DateTimeValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> DecimalValue {
            get {
                return this.DecimalValueField;
            }
            set {
                if ((this.DecimalValueField.Equals(value) != true)) {
                    this.DecimalValueField = value;
                    this.RaisePropertyChanged("DecimalValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty Definition {
            get {
                return this.DefinitionField;
            }
            set {
                if ((object.ReferenceEquals(this.DefinitionField, value) != true)) {
                    this.DefinitionField = value;
                    this.RaisePropertyChanged("Definition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<int> IntegerListValue {
            get {
                return this.IntegerListValueField;
            }
            set {
                if ((object.ReferenceEquals(this.IntegerListValueField, value) != true)) {
                    this.IntegerListValueField = value;
                    this.RaisePropertyChanged("IntegerListValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IntegerValue {
            get {
                return this.IntegerValueField;
            }
            set {
                if ((this.IntegerValueField.Equals(value) != true)) {
                    this.IntegerValueField = value;
                    this.RaisePropertyChanged("IntegerValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomProperty", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomProperty : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyFieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CustomPropertyTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomPropertyOption> OptionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PropertyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SystemDataTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomList {
            get {
                return this.CustomListField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomListField, value) != true)) {
                    this.CustomListField = value;
                    this.RaisePropertyChanged("CustomList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyFieldName {
            get {
                return this.CustomPropertyFieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyFieldNameField, value) != true)) {
                    this.CustomPropertyFieldNameField = value;
                    this.RaisePropertyChanged("CustomPropertyFieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyTypeId {
            get {
                return this.CustomPropertyTypeIdField;
            }
            set {
                if ((this.CustomPropertyTypeIdField.Equals(value) != true)) {
                    this.CustomPropertyTypeIdField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomPropertyTypeName {
            get {
                return this.CustomPropertyTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomPropertyTypeNameField, value) != true)) {
                    this.CustomPropertyTypeNameField = value;
                    this.RaisePropertyChanged("CustomPropertyTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomPropertyOption> Options {
            get {
                return this.OptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.OptionsField, value) != true)) {
                    this.OptionsField = value;
                    this.RaisePropertyChanged("Options");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PropertyNumber {
            get {
                return this.PropertyNumberField;
            }
            set {
                if ((this.PropertyNumberField.Equals(value) != true)) {
                    this.PropertyNumberField = value;
                    this.RaisePropertyChanged("PropertyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SystemDataType {
            get {
                return this.SystemDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.SystemDataTypeField, value) != true)) {
                    this.SystemDataTypeField = value;
                    this.RaisePropertyChanged("SystemDataType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomList", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortedOnValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue> ValuesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortedOnValue {
            get {
                return this.SortedOnValueField;
            }
            set {
                if ((this.SortedOnValueField.Equals(value) != true)) {
                    this.SortedOnValueField = value;
                    this.RaisePropertyChanged("SortedOnValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue> Values {
            get {
                return this.ValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.ValuesField, value) != true)) {
                    this.ValuesField = value;
                    this.RaisePropertyChanged("Values");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomPropertyOption", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomPropertyOption : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyOptionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyOptionId {
            get {
                return this.CustomPropertyOptionIdField;
            }
            set {
                if ((this.CustomPropertyOptionIdField.Equals(value) != true)) {
                    this.CustomPropertyOptionIdField = value;
                    this.RaisePropertyChanged("CustomPropertyOptionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteCustomListValue", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteCustomListValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CustomPropertyValueIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyListId {
            get {
                return this.CustomPropertyListIdField;
            }
            set {
                if ((this.CustomPropertyListIdField.Equals(value) != true)) {
                    this.CustomPropertyListIdField = value;
                    this.RaisePropertyChanged("CustomPropertyListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CustomPropertyValueId {
            get {
                return this.CustomPropertyValueIdField;
            }
            set {
                if ((this.CustomPropertyValueIdField.Equals(value) != true)) {
                    this.CustomPropertyValueIdField = value;
                    this.RaisePropertyChanged("CustomPropertyValueId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestRunStep", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestRunStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActualResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExecutionStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExpectedResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SampleDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestRunIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestRunStepIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestStepIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ActualResult {
            get {
                return this.ActualResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ActualResultField, value) != true)) {
                    this.ActualResultField = value;
                    this.RaisePropertyChanged("ActualResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExecutionStatusId {
            get {
                return this.ExecutionStatusIdField;
            }
            set {
                if ((this.ExecutionStatusIdField.Equals(value) != true)) {
                    this.ExecutionStatusIdField = value;
                    this.RaisePropertyChanged("ExecutionStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExpectedResult {
            get {
                return this.ExpectedResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpectedResultField, value) != true)) {
                    this.ExpectedResultField = value;
                    this.RaisePropertyChanged("ExpectedResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SampleData {
            get {
                return this.SampleDataField;
            }
            set {
                if ((object.ReferenceEquals(this.SampleDataField, value) != true)) {
                    this.SampleDataField = value;
                    this.RaisePropertyChanged("SampleData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestRunId {
            get {
                return this.TestRunIdField;
            }
            set {
                if ((this.TestRunIdField.Equals(value) != true)) {
                    this.TestRunIdField = value;
                    this.RaisePropertyChanged("TestRunId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestRunStepId {
            get {
                return this.TestRunStepIdField;
            }
            set {
                if ((this.TestRunStepIdField.Equals(value) != true)) {
                    this.TestRunStepIdField = value;
                    this.RaisePropertyChanged("TestRunStepId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestStepId {
            get {
                return this.TestStepIdField;
            }
            set {
                if ((this.TestStepIdField.Equals(value) != true)) {
                    this.TestStepIdField = value;
                    this.RaisePropertyChanged("TestStepId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessage : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessageItem> MessagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessageItem> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationFaultMessageItem", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
    [System.SerializableAttribute()]
    public partial struct ValidationFaultMessageItem : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteRequirementTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteRequirementTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequirementIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequirementId {
            get {
                return this.RequirementIdField;
            }
            set {
                if ((this.RequirementIdField.Equals(value) != true)) {
                    this.RequirementIdField = value;
                    this.RaisePropertyChanged("RequirementId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteComment", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteComment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CommentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommentId {
            get {
                return this.CommentIdField;
            }
            set {
                if ((this.CommentIdField.Equals(value) != true)) {
                    this.CommentIdField = value;
                    this.RaisePropertyChanged("CommentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Patch {
            get {
                return this.PatchField;
            }
            set {
                if ((this.PatchField.Equals(value) != true)) {
                    this.PatchField = value;
                    this.RaisePropertyChanged("Patch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteSetting", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteSetting : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestCaseParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestCaseParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DefaultValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TestCaseParameterIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefaultValue {
            get {
                return this.DefaultValueField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultValueField, value) != true)) {
                    this.DefaultValueField = value;
                    this.RaisePropertyChanged("DefaultValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TestCaseParameterId {
            get {
                return this.TestCaseParameterIdField;
            }
            set {
                if ((this.TestCaseParameterIdField.Equals(value) != true)) {
                    this.TestCaseParameterIdField = value;
                    this.RaisePropertyChanged("TestCaseParameterId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestStepParameter", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestStepParameter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteTestSetTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteTestSetTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestSetTestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetId {
            get {
                return this.TestSetIdField;
            }
            set {
                if ((this.TestSetIdField.Equals(value) != true)) {
                    this.TestSetIdField = value;
                    this.RaisePropertyChanged("TestSetId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestSetTestCaseId {
            get {
                return this.TestSetTestCaseIdField;
            }
            set {
                if ((this.TestSetTestCaseIdField.Equals(value) != true)) {
                    this.TestSetTestCaseIdField = value;
                    this.RaisePropertyChanged("TestSetTestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser))]
    public partial class RemoteUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ApprovedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DepartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LdapDnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleInitialField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RssTokenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Approved {
            get {
                return this.ApprovedField;
            }
            set {
                if ((this.ApprovedField.Equals(value) != true)) {
                    this.ApprovedField = value;
                    this.RaisePropertyChanged("Approved");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Department {
            get {
                return this.DepartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentField, value) != true)) {
                    this.DepartmentField = value;
                    this.RaisePropertyChanged("Department");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LdapDn {
            get {
                return this.LdapDnField;
            }
            set {
                if ((object.ReferenceEquals(this.LdapDnField, value) != true)) {
                    this.LdapDnField = value;
                    this.RaisePropertyChanged("LdapDn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Locked {
            get {
                return this.LockedField;
            }
            set {
                if ((this.LockedField.Equals(value) != true)) {
                    this.LockedField = value;
                    this.RaisePropertyChanged("Locked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleInitial {
            get {
                return this.MiddleInitialField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleInitialField, value) != true)) {
                    this.MiddleInitialField = value;
                    this.RaisePropertyChanged("MiddleInitial");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RssToken {
            get {
                return this.RssTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.RssTokenField, value) != true)) {
                    this.RssTokenField = value;
                    this.RaisePropertyChanged("RssToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectUser", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectUser : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectRoleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectRoleName {
            get {
                return this.ProjectRoleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectRoleNameField, value) != true)) {
                    this.ProjectRoleNameField = value;
                    this.RaisePropertyChanged("ProjectRoleName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDataMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDataMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrimaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalKey {
            get {
                return this.ExternalKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalKeyField, value) != true)) {
                    this.ExternalKeyField = value;
                    this.RaisePropertyChanged("ExternalKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InternalId {
            get {
                return this.InternalIdField;
            }
            set {
                if ((this.InternalIdField.Equals(value) != true)) {
                    this.InternalIdField = value;
                    this.RaisePropertyChanged("InternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Primary {
            get {
                return this.PrimaryField;
            }
            set {
                if ((this.PrimaryField.Equals(value) != true)) {
                    this.PrimaryField = value;
                    this.RaisePropertyChanged("Primary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocument", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EditedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EditorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectAttachmentTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion> VersionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactId {
            get {
                return this.ArtifactIdField;
            }
            set {
                if ((this.ArtifactIdField.Equals(value) != true)) {
                    this.ArtifactIdField = value;
                    this.RaisePropertyChanged("ArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactTypeId {
            get {
                return this.ArtifactTypeIdField;
            }
            set {
                if ((this.ArtifactTypeIdField.Equals(value) != true)) {
                    this.ArtifactTypeIdField = value;
                    this.RaisePropertyChanged("ArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentTypeId {
            get {
                return this.AttachmentTypeIdField;
            }
            set {
                if ((this.AttachmentTypeIdField.Equals(value) != true)) {
                    this.AttachmentTypeIdField = value;
                    this.RaisePropertyChanged("AttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentTypeName {
            get {
                return this.AttachmentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentTypeNameField, value) != true)) {
                    this.AttachmentTypeNameField = value;
                    this.RaisePropertyChanged("AttachmentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EditedDate {
            get {
                return this.EditedDateField;
            }
            set {
                if ((this.EditedDateField.Equals(value) != true)) {
                    this.EditedDateField = value;
                    this.RaisePropertyChanged("EditedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EditorId {
            get {
                return this.EditorIdField;
            }
            set {
                if ((this.EditorIdField.Equals(value) != true)) {
                    this.EditorIdField = value;
                    this.RaisePropertyChanged("EditorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditorName {
            get {
                return this.EditorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EditorNameField, value) != true)) {
                    this.EditorNameField = value;
                    this.RaisePropertyChanged("EditorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentTypeId {
            get {
                return this.ProjectAttachmentTypeIdField;
            }
            set {
                if ((this.ProjectAttachmentTypeIdField.Equals(value) != true)) {
                    this.ProjectAttachmentTypeIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectAttachmentTypeName {
            get {
                return this.ProjectAttachmentTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectAttachmentTypeNameField, value) != true)) {
                    this.ProjectAttachmentTypeNameField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion> Versions {
            get {
                return this.VersionsField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionsField, value) != true)) {
                    this.VersionsField = value;
                    this.RaisePropertyChanged("Versions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentVersion", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttachmentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AttachmentVersionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AuthorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameOrUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UploadDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttachmentId {
            get {
                return this.AttachmentIdField;
            }
            set {
                if ((this.AttachmentIdField.Equals(value) != true)) {
                    this.AttachmentIdField = value;
                    this.RaisePropertyChanged("AttachmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttachmentVersionId {
            get {
                return this.AttachmentVersionIdField;
            }
            set {
                if ((this.AttachmentVersionIdField.Equals(value) != true)) {
                    this.AttachmentVersionIdField = value;
                    this.RaisePropertyChanged("AttachmentVersionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AuthorId {
            get {
                return this.AuthorIdField;
            }
            set {
                if ((this.AuthorIdField.Equals(value) != true)) {
                    this.AuthorIdField = value;
                    this.RaisePropertyChanged("AuthorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthorName {
            get {
                return this.AuthorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorNameField, value) != true)) {
                    this.AuthorNameField = value;
                    this.RaisePropertyChanged("AuthorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilenameOrUrl {
            get {
                return this.FilenameOrUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameOrUrlField, value) != true)) {
                    this.FilenameOrUrlField = value;
                    this.RaisePropertyChanged("FilenameOrUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UploadDate {
            get {
                return this.UploadDateField;
            }
            set {
                if ((this.UploadDateField.Equals(value) != true)) {
                    this.UploadDateField = value;
                    this.RaisePropertyChanged("UploadDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VersionNumber {
            get {
                return this.VersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionNumberField, value) != true)) {
                    this.VersionNumberField = value;
                    this.RaisePropertyChanged("VersionNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Default {
            get {
                return this.DefaultField;
            }
            set {
                if ((this.DefaultField.Equals(value) != true)) {
                    this.DefaultField = value;
                    this.RaisePropertyChanged("Default");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentTypeId {
            get {
                return this.ProjectAttachmentTypeIdField;
            }
            set {
                if ((this.ProjectAttachmentTypeIdField.Equals(value) != true)) {
                    this.ProjectAttachmentTypeIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteDocumentFolder", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteDocumentFolder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IndentLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ParentProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectAttachmentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProjectIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IndentLevel {
            get {
                return this.IndentLevelField;
            }
            set {
                if ((object.ReferenceEquals(this.IndentLevelField, value) != true)) {
                    this.IndentLevelField = value;
                    this.RaisePropertyChanged("IndentLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentProjectAttachmentFolderId {
            get {
                return this.ParentProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ParentProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ParentProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ParentProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectAttachmentFolderId {
            get {
                return this.ProjectAttachmentFolderIdField;
            }
            set {
                if ((this.ProjectAttachmentFolderIdField.Equals(value) != true)) {
                    this.ProjectAttachmentFolderIdField = value;
                    this.RaisePropertyChanged("ProjectAttachmentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteAssociation", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteAssociation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ArtifactLinkIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DestArtifactTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DestArtifactTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceArtifactTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ArtifactLinkId {
            get {
                return this.ArtifactLinkIdField;
            }
            set {
                if ((this.ArtifactLinkIdField.Equals(value) != true)) {
                    this.ArtifactLinkIdField = value;
                    this.RaisePropertyChanged("ArtifactLinkId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactId {
            get {
                return this.DestArtifactIdField;
            }
            set {
                if ((this.DestArtifactIdField.Equals(value) != true)) {
                    this.DestArtifactIdField = value;
                    this.RaisePropertyChanged("DestArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactName {
            get {
                return this.DestArtifactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactNameField, value) != true)) {
                    this.DestArtifactNameField = value;
                    this.RaisePropertyChanged("DestArtifactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DestArtifactTypeId {
            get {
                return this.DestArtifactTypeIdField;
            }
            set {
                if ((this.DestArtifactTypeIdField.Equals(value) != true)) {
                    this.DestArtifactTypeIdField = value;
                    this.RaisePropertyChanged("DestArtifactTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DestArtifactTypeName {
            get {
                return this.DestArtifactTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DestArtifactTypeNameField, value) != true)) {
                    this.DestArtifactTypeNameField = value;
                    this.RaisePropertyChanged("DestArtifactTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactId {
            get {
                return this.SourceArtifactIdField;
            }
            set {
                if ((this.SourceArtifactIdField.Equals(value) != true)) {
                    this.SourceArtifactIdField = value;
                    this.RaisePropertyChanged("SourceArtifactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceArtifactTypeId {
            get {
                return this.SourceArtifactTypeIdField;
            }
            set {
                if ((this.SourceArtifactTypeIdField.Equals(value) != true)) {
                    this.SourceArtifactTypeIdField = value;
                    this.RaisePropertyChanged("SourceArtifactTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentPriority", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentPriority : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PriorityId {
            get {
                return this.PriorityIdField;
            }
            set {
                if ((this.PriorityIdField.Equals(value) != true)) {
                    this.PriorityIdField = value;
                    this.RaisePropertyChanged("PriorityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentSeverity", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentSeverity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> SeverityIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SeverityId {
            get {
                return this.SeverityIdField;
            }
            set {
                if ((this.SeverityIdField.Equals(value) != true)) {
                    this.SeverityIdField = value;
                    this.RaisePropertyChanged("SeverityId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentStatus", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentStatusIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OpenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentStatusId {
            get {
                return this.IncidentStatusIdField;
            }
            set {
                if ((this.IncidentStatusIdField.Equals(value) != true)) {
                    this.IncidentStatusIdField = value;
                    this.RaisePropertyChanged("IncidentStatusId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Open {
            get {
                return this.OpenField;
            }
            set {
                if ((this.OpenField.Equals(value) != true)) {
                    this.OpenField = value;
                    this.RaisePropertyChanged("Open");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteIncidentType", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteIncidentType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> IncidentTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RiskField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> IncidentTypeId {
            get {
                return this.IncidentTypeIdField;
            }
            set {
                if ((this.IncidentTypeIdField.Equals(value) != true)) {
                    this.IncidentTypeIdField = value;
                    this.RaisePropertyChanged("IncidentTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Issue {
            get {
                return this.IssueField;
            }
            set {
                if ((this.IssueField.Equals(value) != true)) {
                    this.IssueField = value;
                    this.RaisePropertyChanged("Issue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Risk {
            get {
                return this.RiskField;
            }
            set {
                if ((this.RiskField.Equals(value) != true)) {
                    this.RiskField = value;
                    this.RaisePropertyChanged("Risk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowIncidentFields", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowIncidentFields : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldId {
            get {
                return this.FieldIdField;
            }
            set {
                if ((this.FieldIdField.Equals(value) != true)) {
                    this.FieldIdField = value;
                    this.RaisePropertyChanged("FieldId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowIncidentTransition", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowIncidentTransition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByDetectorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ExecuteByOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IncidentStatusId_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IncidentStatusId_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusName_InputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IncidentStatusName_OutputField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransitionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkflowIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByDetector {
            get {
                return this.ExecuteByDetectorField;
            }
            set {
                if ((this.ExecuteByDetectorField.Equals(value) != true)) {
                    this.ExecuteByDetectorField = value;
                    this.RaisePropertyChanged("ExecuteByDetector");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ExecuteByOwner {
            get {
                return this.ExecuteByOwnerField;
            }
            set {
                if ((this.ExecuteByOwnerField.Equals(value) != true)) {
                    this.ExecuteByOwnerField = value;
                    this.RaisePropertyChanged("ExecuteByOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IncidentStatusId_Input {
            get {
                return this.IncidentStatusId_InputField;
            }
            set {
                if ((this.IncidentStatusId_InputField.Equals(value) != true)) {
                    this.IncidentStatusId_InputField = value;
                    this.RaisePropertyChanged("IncidentStatusId_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IncidentStatusId_Output {
            get {
                return this.IncidentStatusId_OutputField;
            }
            set {
                if ((this.IncidentStatusId_OutputField.Equals(value) != true)) {
                    this.IncidentStatusId_OutputField = value;
                    this.RaisePropertyChanged("IncidentStatusId_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatusName_Input {
            get {
                return this.IncidentStatusName_InputField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusName_InputField, value) != true)) {
                    this.IncidentStatusName_InputField = value;
                    this.RaisePropertyChanged("IncidentStatusName_Input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IncidentStatusName_Output {
            get {
                return this.IncidentStatusName_OutputField;
            }
            set {
                if ((object.ReferenceEquals(this.IncidentStatusName_OutputField, value) != true)) {
                    this.IncidentStatusName_OutputField = value;
                    this.RaisePropertyChanged("IncidentStatusName_Output");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransitionId {
            get {
                return this.TransitionIdField;
            }
            set {
                if ((this.TransitionIdField.Equals(value) != true)) {
                    this.TransitionIdField = value;
                    this.RaisePropertyChanged("TransitionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkflowId {
            get {
                return this.WorkflowIdField;
            }
            set {
                if ((this.WorkflowIdField.Equals(value) != true)) {
                    this.WorkflowIdField = value;
                    this.RaisePropertyChanged("WorkflowId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteWorkflowIncidentCustomProperties", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteWorkflowIncidentCustomProperties : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomPropertyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldCaptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FieldNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FieldStateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomPropertyId {
            get {
                return this.CustomPropertyIdField;
            }
            set {
                if ((this.CustomPropertyIdField.Equals(value) != true)) {
                    this.CustomPropertyIdField = value;
                    this.RaisePropertyChanged("CustomPropertyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldCaption {
            get {
                return this.FieldCaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldCaptionField, value) != true)) {
                    this.FieldCaptionField = value;
                    this.RaisePropertyChanged("FieldCaption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FieldName {
            get {
                return this.FieldNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FieldNameField, value) != true)) {
                    this.FieldNameField = value;
                    this.RaisePropertyChanged("FieldName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldStateId {
            get {
                return this.FieldStateIdField;
            }
            set {
                if ((this.FieldStateIdField.Equals(value) != true)) {
                    this.FieldStateIdField = value;
                    this.RaisePropertyChanged("FieldStateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProject", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NonWorkingHoursField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WebsiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingDaysField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkingHoursField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NonWorkingHours {
            get {
                return this.NonWorkingHoursField;
            }
            set {
                if ((this.NonWorkingHoursField.Equals(value) != true)) {
                    this.NonWorkingHoursField = value;
                    this.RaisePropertyChanged("NonWorkingHours");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectId {
            get {
                return this.ProjectIdField;
            }
            set {
                if ((this.ProjectIdField.Equals(value) != true)) {
                    this.ProjectIdField = value;
                    this.RaisePropertyChanged("ProjectId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Website {
            get {
                return this.WebsiteField;
            }
            set {
                if ((object.ReferenceEquals(this.WebsiteField, value) != true)) {
                    this.WebsiteField = value;
                    this.RaisePropertyChanged("Website");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingDays {
            get {
                return this.WorkingDaysField;
            }
            set {
                if ((this.WorkingDaysField.Equals(value) != true)) {
                    this.WorkingDaysField = value;
                    this.RaisePropertyChanged("WorkingDays");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkingHours {
            get {
                return this.WorkingHoursField;
            }
            set {
                if ((this.WorkingHoursField.Equals(value) != true)) {
                    this.WorkingHoursField = value;
                    this.RaisePropertyChanged("WorkingHours");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteProjectRole", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteProjectRole : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DiscussionsAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DocumentsAddField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DocumentsDeleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DocumentsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ProjectRoleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SourceCodeViewField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((this.AdminField.Equals(value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DiscussionsAdd {
            get {
                return this.DiscussionsAddField;
            }
            set {
                if ((this.DiscussionsAddField.Equals(value) != true)) {
                    this.DiscussionsAddField = value;
                    this.RaisePropertyChanged("DiscussionsAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DocumentsAdd {
            get {
                return this.DocumentsAddField;
            }
            set {
                if ((this.DocumentsAddField.Equals(value) != true)) {
                    this.DocumentsAddField = value;
                    this.RaisePropertyChanged("DocumentsAdd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DocumentsDelete {
            get {
                return this.DocumentsDeleteField;
            }
            set {
                if ((this.DocumentsDeleteField.Equals(value) != true)) {
                    this.DocumentsDeleteField = value;
                    this.RaisePropertyChanged("DocumentsDelete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DocumentsEdit {
            get {
                return this.DocumentsEditField;
            }
            set {
                if ((this.DocumentsEditField.Equals(value) != true)) {
                    this.DocumentsEditField = value;
                    this.RaisePropertyChanged("DocumentsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProjectRoleId {
            get {
                return this.ProjectRoleIdField;
            }
            set {
                if ((this.ProjectRoleIdField.Equals(value) != true)) {
                    this.ProjectRoleIdField = value;
                    this.RaisePropertyChanged("ProjectRoleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SourceCodeView {
            get {
                return this.SourceCodeViewField;
            }
            set {
                if ((this.SourceCodeViewField.Equals(value) != true)) {
                    this.SourceCodeViewField = value;
                    this.RaisePropertyChanged("SourceCodeView");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoteReleaseTestCaseMapping", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0.Dat" +
        "aObjects")]
    [System.SerializableAttribute()]
    public partial class RemoteReleaseTestCaseMapping : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReleaseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestCaseIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReleaseId {
            get {
                return this.ReleaseIdField;
            }
            set {
                if ((this.ReleaseIdField.Equals(value) != true)) {
                    this.ReleaseIdField = value;
                    this.RaisePropertyChanged("ReleaseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestCaseId {
            get {
                return this.TestCaseIdField;
            }
            set {
                if ((this.TestCaseIdField.Equals(value) != true)) {
                    this.TestCaseIdField = value;
                    this.RaisePropertyChanged("TestCaseId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.inflectra.com/SpiraTest/Services/v4.0/", ConfigurationName="SpiraTeam_Client.IImportExport")]
    public interface IImportExport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        bool Connection_Authenticate(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "Response")]
        System.IAsyncResult BeginConnection_Authenticate(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_Authenticate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        bool Connection_Authenticate2(string userName, string password, string plugInName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Authenticate" +
            "2Response")]
        System.IAsyncResult BeginConnection_Authenticate2(string userName, string password, string plugInName, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_Authenticate2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_ConnectToPro" +
            "ject", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_ConnectToPro" +
            "jectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_ConnectToPro" +
            "jectServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        bool Connection_ConnectToProject(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_ConnectToPro" +
            "ject", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_ConnectToPro" +
            "jectResponse")]
        System.IAsyncResult BeginConnection_ConnectToProject(int projectId, System.AsyncCallback callback, object asyncState);
        
        bool EndConnection_ConnectToProject(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Disconnect", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_DisconnectRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_DisconnectSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Connection_Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_Disconnect", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/Connection_DisconnectRe" +
            "sponse")]
        System.IAsyncResult BeginConnection_Disconnect(System.AsyncCallback callback, object asyncState);
        
        void EndConnection_Disconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetProductName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetProductNameRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetProductNameSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        string System_GetProductName();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetProductName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetProductNameRe" +
            "sponse")]
        System.IAsyncResult BeginSystem_GetProductName(System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetProductName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetServerDateTim" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetServerDateTim" +
            "eResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetServerDateTim" +
            "eServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.DateTime System_GetServerDateTime();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetServerDateTim" +
            "e", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetServerDateTim" +
            "eResponse")]
        System.IAsyncResult BeginSystem_GetServerDateTime(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndSystem_GetServerDateTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetWebServerUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetWebServerUrlR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetWebServerUrlS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        string System_GetWebServerUrl();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetWebServerUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IService/System_GetWebServerUrlR" +
            "esponse")]
        System.IAsyncResult BeginSystem_GetWebServerUrl(System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetWebServerUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Del" +
            "ete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Del" +
            "eteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Del" +
            "eteServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void AutomationHost_Delete(int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Del" +
            "ete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Del" +
            "eteResponse")]
        System.IAsyncResult BeginAutomationHost_Delete(int automationHostId, System.AsyncCallback callback, object asyncState);
        
        void EndAutomationHost_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_RetrieveByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByTokenResponse")]
        System.IAsyncResult BeginAutomationEngine_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_RetrieveByToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> AutomationEngine_Retrieve(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveResponse")]
        System.IAsyncResult BeginAutomationEngine_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> EndAutomationEngine_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_C" +
            "reate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_C" +
            "reateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_C" +
            "reateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_C" +
            "reate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_C" +
            "reateResponse")]
        System.IAsyncResult BeginAutomationEngine_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_RetrieveById(int automationEngineId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationEngine_R" +
            "etrieveByIdResponse")]
        System.IAsyncResult BeginAutomationEngine_RetrieveById(int automationEngineId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveByRe" +
            "leaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveByRe" +
            "leaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveByRe" +
            "leaseIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> Build_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveByRe" +
            "leaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveByRe" +
            "leaseIdResponse")]
        System.IAsyncResult BeginBuild_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> EndBuild_RetrieveByReleaseId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveById" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveById" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveById" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Build_RetrieveById(int releaseId, int buildId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveById" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_RetrieveById" +
            "Response")]
        System.IAsyncResult BeginBuild_RetrieveById(int releaseId, int buildId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild EndBuild_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_CreateRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_CreateServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Build_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Build_CreateRespon" +
            "se")]
        System.IAsyncResult BeginBuild_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild EndBuild_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_Create2(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "2Response")]
        System.IAsyncResult BeginRequirement_Create2(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_Create2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Remove" +
            "TestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Remove" +
            "TestCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Remove" +
            "TestCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Requirement_RemoveTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Remove" +
            "TestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Remove" +
            "TestCoverageResponse")]
        System.IAsyncResult BeginRequirement_RemoveTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_RemoveTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "ve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Requirement_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "ve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veResponse")]
        System.IAsyncResult BeginRequirement_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> EndRequirement_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_RetrieveById(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veByIdResponse")]
        System.IAsyncResult BeginRequirement_RetrieveById(int requirementId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veForOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veForOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Requirement_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veForOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veForOwnerResponse")]
        System.IAsyncResult BeginRequirement_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> EndRequirement_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veTestCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veTestCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> Requirement_RetrieveTestCoverage(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veTestCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veTestCoverageResponse")]
        System.IAsyncResult BeginRequirement_RetrieveTestCoverage(int requirementId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> EndRequirement_RetrieveTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Requirement_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Update" +
            "Response")]
        System.IAsyncResult BeginRequirement_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Delete" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Delete" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Delete" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Requirement_Delete(int requirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Delete" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Delete" +
            "Response")]
        System.IAsyncResult BeginRequirement_Delete(int requirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_MoveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_MoveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Requirement_Move(int requirementId, System.Nullable<int> destinationRequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_MoveRe" +
            "sponse")]
        System.IAsyncResult BeginRequirement_Move(int requirementId, System.Nullable<int> destinationRequirementId, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veCommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veCommentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Requirement_RetrieveComments(int RequirementId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veComments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Retrie" +
            "veCommentsResponse")]
        System.IAsyncResult BeginRequirement_RetrieveComments(int RequirementId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndRequirement_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "Comment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "CommentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "CommentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Requirement_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "Comment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "CommentResponse")]
        System.IAsyncResult BeginRequirement_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndRequirement_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProductV" +
            "ersion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProductV" +
            "ersionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProductV" +
            "ersionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion System_GetProductVersion();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProductV" +
            "ersion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProductV" +
            "ersionResponse")]
        System.IAsyncResult BeginSystem_GetProductVersion(System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion EndSystem_GetProductVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetSettings" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetSettings" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetSettings" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> System_GetSettings();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetSettings" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetSettings" +
            "Response")]
        System.IAsyncResult BeginSystem_GetSettings(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> EndSystem_GetSettings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetArtifact" +
            "Url", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetArtifact" +
            "UrlResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetArtifact" +
            "UrlServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetArtifact" +
            "Url", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetArtifact" +
            "UrlResponse")]
        System.IAsyncResult BeginSystem_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName, System.AsyncCallback callback, object asyncState);
        
        string EndSystem_GetArtifactUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProjectI" +
            "dForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProjectI" +
            "dForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProjectI" +
            "dForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        int System_GetProjectIdForArtifact(int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProjectI" +
            "dForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/System_GetProjectI" +
            "dForArtifactResponse")]
        System.IAsyncResult BeginSystem_GetProjectIdForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        int EndSystem_GetProjectIdForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateValidat" +
            "ionFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Task_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateRespons" +
            "e")]
        System.IAsyncResult BeginTask_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask EndTask_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveRespo" +
            "nse")]
        System.IAsyncResult BeginTask_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveByIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveByIdS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Task_RetrieveById(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveByIdR" +
            "esponse")]
        System.IAsyncResult BeginTask_RetrieveById(int taskId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask EndTask_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveForOw" +
            "ner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveForOw" +
            "nerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveForOw" +
            "nerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveForOw" +
            "ner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveForOw" +
            "nerResponse")]
        System.IAsyncResult BeginTask_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveNewRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveNewSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveNew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveNewRe" +
            "sponse")]
        System.IAsyncResult BeginTask_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_RetrieveNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_UpdateRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_UpdateService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_UpdateValidat" +
            "ionFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Task_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_UpdateRespons" +
            "e")]
        System.IAsyncResult BeginTask_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState);
        
        void EndTask_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CountResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CountServiceF" +
            "aultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long Task_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CountResponse" +
            "")]
        System.IAsyncResult BeginTask_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTask_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_DeleteRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_DeleteService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Task_Delete(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_DeleteRespons" +
            "e")]
        System.IAsyncResult BeginTask_Delete(int taskId, System.AsyncCallback callback, object asyncState);
        
        void EndTask_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveComme" +
            "nts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveComme" +
            "ntsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveComme" +
            "ntsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Task_RetrieveComments(int TaskId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveComme" +
            "nts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_RetrieveComme" +
            "ntsResponse")]
        System.IAsyncResult BeginTask_RetrieveComments(int TaskId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTask_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateComment" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateComment" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateComment" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Task_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateComment" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Task_CreateComment" +
            "Response")]
        System.IAsyncResult BeginTask_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTask_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddParame" +
            "ter", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddParame" +
            "terResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddParame" +
            "terServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter TestCase_AddParameter(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddParame" +
            "ter", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddParame" +
            "terResponse")]
        System.IAsyncResult BeginTestCase_AddParameter(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter EndTestCase_AddParameter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long TestCase_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountResp" +
            "onse")]
        System.IAsyncResult BeginTestCase_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTestCase_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateVal" +
            "idationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateRes" +
            "ponse")]
        System.IAsyncResult BeginTestCase_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "derResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "derValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "derServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateFol" +
            "derResponse")]
        System.IAsyncResult BeginTestCase_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_CreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreatePar" +
            "ameterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreatePar" +
            "ameterTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreatePar" +
            "ameterTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        string TestCase_CreateParameterToken(string parameterName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreatePar" +
            "ameterToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreatePar" +
            "ameterTokenResponse")]
        System.IAsyncResult BeginTestCase_CreateParameterToken(string parameterName, System.AsyncCallback callback, object asyncState);
        
        string EndTestCase_CreateParameterToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveR" +
            "esponse")]
        System.IAsyncResult BeginTestCase_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_RetrieveById(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveById(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yReleaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yReleaseIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yReleaseIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yReleaseId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yReleaseIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByReleaseId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yTestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yTestSetIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yTestSetIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByTestSetId(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yTestSetId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yTestSetIdResponse")]
        System.IAsyncResult BeginTestCase_RetrieveByTestSetId(int testSetId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByTestSetId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveF" +
            "orOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveF" +
            "orOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveF" +
            "orOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveF" +
            "orOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveF" +
            "orOwnerResponse")]
        System.IAsyncResult BeginTestCase_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByFolder(int testCaseFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveB" +
            "yFolderResponse")]
        System.IAsyncResult BeginTestCase_RetrieveByFolder(int testCaseFolderId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_UpdateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_UpdateVal" +
            "idationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_UpdateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_UpdateRes" +
            "ponse")]
        System.IAsyncResult BeginTestCase_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_Delete(int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteRes" +
            "ponse")]
        System.IAsyncResult BeginTestCase_Delete(int testCaseId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_Move(int testCaseId, System.Nullable<int> destinationTestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveRespo" +
            "nse")]
        System.IAsyncResult BeginTestCase_Move(int testCaseId, System.Nullable<int> destinationTestCaseId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveStepR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveStepS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_MoveStepR" +
            "esponse")]
        System.IAsyncResult BeginTestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_MoveStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSte" +
            "pResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSte" +
            "pServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_DeleteStep(int testCaseId, int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSte" +
            "p", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_DeleteSte" +
            "pResponse")]
        System.IAsyncResult BeginTestCase_DeleteStep(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_DeleteStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddStepRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddStepSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep TestCase_AddStep(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddStepRe" +
            "sponse")]
        System.IAsyncResult BeginTestCase_AddStep(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep EndTestCase_AddStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddLinkRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddLinkSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        int TestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddLink", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddLinkRe" +
            "sponse")]
        System.IAsyncResult BeginTestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters, System.AsyncCallback callback, object asyncState);
        
        int EndTestCase_AddLink(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddUpdate" +
            "AutomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddUpdate" +
            "AutomationScriptResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddUpdate" +
            "AutomationScriptServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddUpdate" +
            "AutomationScript", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_AddUpdate" +
            "AutomationScriptResponse")]
        System.IAsyncResult BeginTestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndTestCase_AddUpdateAutomationScript(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveC" +
            "omments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveC" +
            "ommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveC" +
            "ommentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> TestCase_RetrieveComments(int TestCaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveC" +
            "omments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_RetrieveC" +
            "ommentsResponse")]
        System.IAsyncResult BeginTestCase_RetrieveComments(int TestCaseId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTestCase_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountForF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountForF" +
            "olderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountForF" +
            "olderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long TestCase_CountForFolder(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountForF" +
            "older", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CountForF" +
            "olderResponse")]
        System.IAsyncResult BeginTestCase_CountForFolder(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID, System.AsyncCallback callback, object asyncState);
        
        long EndTestCase_CountForFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateCom" +
            "ment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateCom" +
            "mentResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateCom" +
            "mentServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment TestCase_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateCom" +
            "ment", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestCase_CreateCom" +
            "mentResponse")]
        System.IAsyncResult BeginTestCase_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTestCase_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestCasesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestCasesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_CreateFromTestCases(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestCases", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestCasesResponse")]
        System.IAsyncResult BeginTestRun_CreateFromTestCases(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_CreateFromTestCases(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long TestRun_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CountRespo" +
            "nse")]
        System.IAsyncResult BeginTestRun_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTestRun_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_CreateFromTestSet(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateFrom" +
            "TestSetResponse")]
        System.IAsyncResult BeginTestRun_CreateFromTestSet(int testSetId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_CreateFromTestSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomationHostResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomationHostServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomationHost", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomationHostResponse")]
        System.IAsyncResult BeginTestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_CreateForAutomationHost(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomatedTestSetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomatedTestSetServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomatedTestSet", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_CreateForA" +
            "utomatedTestSetResponse")]
        System.IAsyncResult BeginTestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun TestRun_RecordAutomated1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated1Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun EndTestRun_RecordAutomated1(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated2Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        int EndTestRun_RecordAutomated2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_RecordAutomated3(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RecordAuto" +
            "mated3Response")]
        System.IAsyncResult BeginTestRun_RecordAutomated3(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_RecordAutomated3(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> TestRun_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginTestRun_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> EndTestRun_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_RetrieveManual(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nual", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualResponse")]
        System.IAsyncResult BeginTestRun_RetrieveManual(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_RetrieveManual(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_RetrieveAutomated(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomated", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedResponse")]
        System.IAsyncResult BeginTestRun_RetrieveAutomated(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_RetrieveAutomated(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun TestRun_RetrieveById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun EndTestRun_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveAu" +
            "tomatedByIdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveAutomatedById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun EndTestRun_RetrieveAutomatedById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun TestRun_RetrieveManualById(int testRunId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_RetrieveMa" +
            "nualByIdResponse")]
        System.IAsyncResult BeginTestRun_RetrieveManualById(int testRunId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun EndTestRun_RetrieveManualById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_SaveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_SaveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_SaveValida" +
            "tionFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_Save(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_Save", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestRun_SaveRespon" +
            "se")]
        System.IAsyncResult BeginTestRun_Save(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_Save(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_AddTestMap" +
            "ping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_AddTestMap" +
            "pingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_AddTestMap" +
            "pingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> TestSet_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_AddTestMap" +
            "ping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_AddTestMap" +
            "pingResponse")]
        System.IAsyncResult BeginTestSet_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> EndTestSet_AddTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateResp" +
            "onse")]
        System.IAsyncResult BeginTestSet_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long TestSet_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CountRespo" +
            "nse")]
        System.IAsyncResult BeginTestSet_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndTestSet_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "erResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "erValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "erServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "er", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateFold" +
            "erResponse")]
        System.IAsyncResult BeginTestSet_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_CreateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RemoveTest" +
            "Mapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RemoveTest" +
            "MappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RemoveTest" +
            "MappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestSet_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RemoveTest" +
            "Mapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RemoveTest" +
            "MappingResponse")]
        System.IAsyncResult BeginTestSet_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_RemoveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveTe" +
            "stCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveTe" +
            "stCaseMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveTe" +
            "stCaseMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> TestSet_RetrieveTestCaseMapping(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveTe" +
            "stCaseMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveTe" +
            "stCaseMappingResponse")]
        System.IAsyncResult BeginTestSet_RetrieveTestCaseMapping(int testSetId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> EndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> TestSet_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginTestSet_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> EndTestSet_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_RetrieveById(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginTestSet_RetrieveById(int testSetId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveFo" +
            "rOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveFo" +
            "rOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> TestSet_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveFo" +
            "rOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveFo" +
            "rOwnerResponse")]
        System.IAsyncResult BeginTestSet_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> EndTestSet_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestSet_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_UpdateResp" +
            "onse")]
        System.IAsyncResult BeginTestSet_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestSet_Delete(int testSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginTestSet_Delete(int testSetId, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_MoveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_MoveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void TestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_MoveRespon" +
            "se")]
        System.IAsyncResult BeginTestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId, System.AsyncCallback callback, object asyncState);
        
        void EndTestSet_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> TestSet_RetrieveComments(int TestSetId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_RetrieveCo" +
            "mmentsResponse")]
        System.IAsyncResult BeginTestSet_RetrieveComments(int TestSetId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTestSet_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateComm" +
            "entResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateComm" +
            "entServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment TestSet_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/TestSet_CreateComm" +
            "entResponse")]
        System.IAsyncResult BeginTestSet_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTestSet_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_CreateRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_CreateService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_CreateRespons" +
            "e")]
        System.IAsyncResult BeginUser_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByIdR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByIdS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_RetrieveById(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByIdR" +
            "esponse")]
        System.IAsyncResult BeginUser_RetrieveById(int userId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByUse" +
            "rName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByUse" +
            "rNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByUse" +
            "rNameServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_RetrieveByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByUse" +
            "rName", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_RetrieveByUse" +
            "rNameResponse")]
        System.IAsyncResult BeginUser_RetrieveByUserName(string userName, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_RetrieveByUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_DeleteRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_DeleteService" +
            "FaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void User_Delete(int userId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/User_DeleteRespons" +
            "e")]
        System.IAsyncResult BeginUser_Delete(int userId, System.AsyncCallback callback, object asyncState);
        
        void EndUser_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> AutomationHost_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveResponse")]
        System.IAsyncResult BeginAutomationHost_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> EndAutomationHost_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_RetrieveById(int automationHostId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByIdResponse")]
        System.IAsyncResult BeginAutomationHost_RetrieveById(int automationHostId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByTokenServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_RetrieveByToken(string token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByToken", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Ret" +
            "rieveByTokenResponse")]
        System.IAsyncResult BeginAutomationHost_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_RetrieveByToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ateValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Cre" +
            "ateResponse")]
        System.IAsyncResult BeginAutomationHost_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ateValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ateServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void AutomationHost_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ate", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/AutomationHost_Upd" +
            "ateResponse")]
        System.IAsyncResult BeginAutomationHost_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState);
        
        void EndAutomationHost_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveForArtifactTypeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveForArtifactTypeServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> CustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveForArtifactType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveForArtifactTypeResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> EndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomProperty_AddCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListResponse")]
        System.IAsyncResult BeginCustomProperty_AddCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList EndCustomProperty_AddCustomList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListValueResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListValueServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue CustomProperty_AddCustomListValue(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListValue", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "CustomListValueResponse")]
        System.IAsyncResult BeginCustomProperty_AddCustomListValue(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue EndCustomProperty_AddCustomListValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "Definition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "DefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "DefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty CustomProperty_AddDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "Definition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Add" +
            "DefinitionResponse")]
        System.IAsyncResult BeginCustomProperty_AddDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty EndCustomProperty_AddDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void CustomProperty_UpdateDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateDefinitionResponse")]
        System.IAsyncResult BeginCustomProperty_UpdateDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_UpdateDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Del" +
            "eteDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Del" +
            "eteDefinitionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Del" +
            "eteDefinitionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void CustomProperty_DeleteDefinition(int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Del" +
            "eteDefinition", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Del" +
            "eteDefinitionResponse")]
        System.IAsyncResult BeginCustomProperty_DeleteDefinition(int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_DeleteDefinition(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomProperty_RetrieveCustomListById(int customListId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListByIdResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveCustomListById(int customListId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList EndCustomProperty_RetrieveCustomListById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> CustomProperty_RetrieveCustomLists();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomLists", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Ret" +
            "rieveCustomListsResponse")]
        System.IAsyncResult BeginCustomProperty_RetrieveCustomLists(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> EndCustomProperty_RetrieveCustomLists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateCustomListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateCustomListServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void CustomProperty_UpdateCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateCustomList", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/CustomProperty_Upd" +
            "ateCustomListResponse")]
        System.IAsyncResult BeginCustomProperty_UpdateCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState);
        
        void EndCustomProperty_UpdateCustomList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddArt" +
            "ifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddArt" +
            "ifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddArt" +
            "ifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void DataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddArt" +
            "ifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddArt" +
            "ifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_AddArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddUse" +
            "rMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddUse" +
            "rMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddUse" +
            "rMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void DataMapping_AddUserMappings(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddUse" +
            "rMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_AddUse" +
            "rMappingsResponse")]
        System.IAsyncResult BeginDataMapping_AddUserMappings(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_AddUserMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Remove" +
            "ArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Remove" +
            "ArtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Remove" +
            "ArtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void DataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Remove" +
            "ArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Remove" +
            "ArtifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState);
        
        void EndDataMapping_RemoveArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veArtifactMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veArtifactMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veArtifactMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veArtifactMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyMappingResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping EndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veCustomPropertyValueMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veFieldValueMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veFieldValueMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veFieldValueMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veFieldValueMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veProjectMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veProjectMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveProjectMappings(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veProjectMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veProjectMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveProjectMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveProjectMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veUserMappingsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veUserMappingsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveUserMappings(int dataSyncSystemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veUserMappings", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/DataMapping_Retrie" +
            "veUserMappingsResponse")]
        System.IAsyncResult BeginDataMapping_RetrieveUserMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveUserMappings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_OpenFileR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_OpenFileS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        byte[] Document_OpenFile(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_OpenFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_OpenFileR" +
            "esponse")]
        System.IAsyncResult BeginDocument_OpenFile(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        byte[] EndDocument_OpenFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_AddFile(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFile", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileRe" +
            "sponse")]
        System.IAsyncResult BeginDocument_AddFile(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_AddFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_AddUrl(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrl", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlRes" +
            "ponse")]
        System.IAsyncResult BeginDocument_AddUrl(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_AddUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileVe" +
            "rsionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileVe" +
            "rsionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Document_AddFileVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileVe" +
            "rsion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFileVe" +
            "rsionResponse")]
        System.IAsyncResult BeginDocument_AddFileVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion EndDocument_AddFileVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlVer" +
            "sionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlVer" +
            "sionServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Document_AddUrlVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlVer" +
            "sion", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddUrlVer" +
            "sionResponse")]
        System.IAsyncResult BeginDocument_AddUrlVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion EndDocument_AddUrlVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFro" +
            "mArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFro" +
            "mArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFro" +
            "mArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Document_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFro" +
            "mArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFro" +
            "mArtifactResponse")]
        System.IAsyncResult BeginDocument_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_DeleteFromArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Document_Delete(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteRes" +
            "ponse")]
        System.IAsyncResult BeginDocument_Delete(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orFolderServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Document_RetrieveForFolder(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orFolder", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orFolderResponse")]
        System.IAsyncResult BeginDocument_RetrieveForFolder(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> EndDocument_RetrieveForFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Document_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "orArtifactResponse")]
        System.IAsyncResult BeginDocument_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> EndDocument_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddToArti" +
            "factId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddToArti" +
            "factIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddToArti" +
            "factIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Document_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddToArti" +
            "factId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddToArti" +
            "factIdResponse")]
        System.IAsyncResult BeginDocument_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_AddToArtifactId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveB" +
            "yIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveB" +
            "yIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_RetrieveById(int attachmentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveB" +
            "yIdResponse")]
        System.IAsyncResult BeginDocument_RetrieveById(int attachmentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveT" +
            "ypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveT" +
            "ypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveT" +
            "ypesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> Document_RetrieveTypes(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveT" +
            "ypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveT" +
            "ypesResponse")]
        System.IAsyncResult BeginDocument_RetrieveTypes(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> EndDocument_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "oldersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "oldersServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> Document_RetrieveFolders();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olders", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "oldersResponse")]
        System.IAsyncResult BeginDocument_RetrieveFolders(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> EndDocument_RetrieveFolders(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olderByIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olderByIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Document_RetrieveFolderById(int folderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olderById", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_RetrieveF" +
            "olderByIdResponse")]
        System.IAsyncResult BeginDocument_RetrieveFolderById(int folderId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder EndDocument_RetrieveFolderById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFolder" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFolder" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFolder" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Document_AddFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFolder" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_AddFolder" +
            "Response")]
        System.IAsyncResult BeginDocument_AddFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder EndDocument_AddFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFol" +
            "derResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFol" +
            "derServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Document_DeleteFolder(int projectAttachmentFolderId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_DeleteFol" +
            "derResponse")]
        System.IAsyncResult BeginDocument_DeleteFolder(int projectAttachmentFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_DeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_UpdateFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_UpdateFol" +
            "derResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_UpdateFol" +
            "derServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Document_UpdateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_UpdateFol" +
            "der", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Document_UpdateFol" +
            "derResponse")]
        System.IAsyncResult BeginDocument_UpdateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState);
        
        void EndDocument_UpdateFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Create" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Create" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Create" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation Association_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Create" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Create" +
            "Response")]
        System.IAsyncResult BeginAssociation_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation EndAssociation_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Association_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Update" +
            "Response")]
        System.IAsyncResult BeginAssociation_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState);
        
        void EndAssociation_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Retrie" +
            "veForArtifactResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Retrie" +
            "veForArtifactServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> Association_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Retrie" +
            "veForArtifact", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Association_Retrie" +
            "veForArtifactResponse")]
        System.IAsyncResult BeginAssociation_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> EndAssociation_RetrieveForArtifact(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddPriori" +
            "ty", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddPriori" +
            "tyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddPriori" +
            "tyServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority Incident_AddPriority(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddPriori" +
            "ty", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddPriori" +
            "tyResponse")]
        System.IAsyncResult BeginIncident_AddPriority(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority EndIncident_AddPriority(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CountResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CountServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long Incident_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CountResp" +
            "onse")]
        System.IAsyncResult BeginIncident_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndIncident_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddCommen" +
            "tsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddCommen" +
            "tsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Incident_AddComments(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddCommen" +
            "ts", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddCommen" +
            "tsResponse")]
        System.IAsyncResult BeginIncident_AddComments(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndIncident_AddComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddSeveri" +
            "ty", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddSeveri" +
            "tyResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddSeveri" +
            "tyServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity Incident_AddSeverity(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddSeveri" +
            "ty", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddSeveri" +
            "tyResponse")]
        System.IAsyncResult BeginIncident_AddSeverity(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity EndIncident_AddSeverity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddStatus" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddStatus" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddStatus" +
            "ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus Incident_AddStatus(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddStatus" +
            "", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddStatus" +
            "Response")]
        System.IAsyncResult BeginIncident_AddStatus(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus EndIncident_AddStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddTypeRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddTypeSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType Incident_AddType(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddType", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_AddTypeRe" +
            "sponse")]
        System.IAsyncResult BeginIncident_AddType(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType EndIncident_AddType(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CreateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CreateVal" +
            "idationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CreateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Incident_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_CreateRes" +
            "ponse")]
        System.IAsyncResult BeginIncident_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident EndIncident_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveR" +
            "esponse")]
        System.IAsyncResult BeginIncident_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yIdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Incident_RetrieveById(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yId", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yIdResponse")]
        System.IAsyncResult BeginIncident_RetrieveById(int incidentId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident EndIncident_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestCaseResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestCaseServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestCase(int testCaseId, bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestCase", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestCaseResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestCase(int testCaseId, bool openOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestCase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestRunStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestRunStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestRunStep(int testRunStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestRunStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestRunStepResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestRunStep(int testRunStepId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestRunStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestStepResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestStepServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestStep(int testStepId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestStep", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveB" +
            "yTestStepResponse")]
        System.IAsyncResult BeginIncident_RetrieveByTestStep(int testStepId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestStep(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveF" +
            "orOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveF" +
            "orOwnerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveF" +
            "orOwnerServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveForOwner();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveF" +
            "orOwner", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveF" +
            "orOwnerResponse")]
        System.IAsyncResult BeginIncident_RetrieveForOwner(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveForOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveN" +
            "ew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveN" +
            "ewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveN" +
            "ewServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveN" +
            "ew", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveN" +
            "ewResponse")]
        System.IAsyncResult BeginIncident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveNew(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveP" +
            "riorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveP" +
            "rioritiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveP" +
            "rioritiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> Incident_RetrievePriorities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveP" +
            "riorities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveP" +
            "rioritiesResponse")]
        System.IAsyncResult BeginIncident_RetrievePriorities(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> EndIncident_RetrievePriorities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveC" +
            "omments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveC" +
            "ommentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveC" +
            "ommentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Incident_RetrieveComments(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveC" +
            "omments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveC" +
            "ommentsResponse")]
        System.IAsyncResult BeginIncident_RetrieveComments(int incidentId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndIncident_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "everities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "everitiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "everitiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> Incident_RetrieveSeverities();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "everities", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "everitiesResponse")]
        System.IAsyncResult BeginIncident_RetrieveSeverities(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> EndIncident_RetrieveSeverities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "tatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "tatusesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "tatusesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> Incident_RetrieveStatuses();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "tatuses", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveS" +
            "tatusesResponse")]
        System.IAsyncResult BeginIncident_RetrieveStatuses(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> EndIncident_RetrieveStatuses(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveT" +
            "ypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveT" +
            "ypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveT" +
            "ypesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> Incident_RetrieveTypes();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveT" +
            "ypes", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveT" +
            "ypesResponse")]
        System.IAsyncResult BeginIncident_RetrieveTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> EndIncident_RetrieveTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowFieldsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowFieldsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> Incident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowFields", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowFieldsResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> EndIncident_RetrieveWorkflowFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowTransitionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowTransitionsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> Incident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowTransitions", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowTransitionsResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> EndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowCustomPropertiesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowCustomPropertiesServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> Incident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowCustomProperties", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_RetrieveW" +
            "orkflowCustomPropertiesResponse")]
        System.IAsyncResult BeginIncident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> EndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_UpdateRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_UpdateSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_UpdateVal" +
            "idationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Incident_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_UpdateRes" +
            "ponse")]
        System.IAsyncResult BeginIncident_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState);
        
        void EndIncident_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_DeleteRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_DeleteSer" +
            "viceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Incident_Delete(int incidentId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Incident_DeleteRes" +
            "ponse")]
        System.IAsyncResult BeginIncident_Delete(int incidentId, System.AsyncCallback callback, object asyncState);
        
        void EndIncident_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Project_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_CreateResp" +
            "onse")]
        System.IAsyncResult BeginProject_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject EndProject_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Project_Delete(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginProject_Delete(int projectId, System.AsyncCallback callback, object asyncState);
        
        void EndProject_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> Project_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginProject_Retrieve(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> EndProject_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Project_RetrieveById(int projectId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginProject_RetrieveById(int projectId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject EndProject_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveUs" +
            "erMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveUs" +
            "erMembershipResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveUs" +
            "erMembershipServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> Project_RetrieveUserMembership();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveUs" +
            "erMembership", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Project_RetrieveUs" +
            "erMembershipResponse")]
        System.IAsyncResult BeginProject_RetrieveUserMembership(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> EndProject_RetrieveUserMembership(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/ProjectRole_Retrie" +
            "ve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/ProjectRole_Retrie" +
            "veResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/ProjectRole_Retrie" +
            "veServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> ProjectRole_Retrieve();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/ProjectRole_Retrie" +
            "ve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/ProjectRole_Retrie" +
            "veResponse")]
        System.IAsyncResult BeginProjectRole_Retrieve(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> EndProjectRole_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "pingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "pingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "pingResponse")]
        System.IAsyncResult BeginRelease_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_AddTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping2Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping2ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_AddTestMapping2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_AddTestMap" +
            "ping2Response")]
        System.IAsyncResult BeginRelease_AddTestMapping2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_AddTestMapping2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CountRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CountServi" +
            "ceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long Release_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CountRespo" +
            "nse")]
        System.IAsyncResult BeginRelease_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndRelease_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Release_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Create", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateResp" +
            "onse")]
        System.IAsyncResult BeginRelease_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease EndRelease_Create(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RemoveTest" +
            "Mapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RemoveTest" +
            "MappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RemoveTest" +
            "MappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RemoveTest" +
            "Mapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RemoveTest" +
            "MappingResponse")]
        System.IAsyncResult BeginRelease_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_RemoveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveSe" +
            "rviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Release_Retrieve(bool activeOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveRe" +
            "sponse")]
        System.IAsyncResult BeginRelease_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> EndRelease_Retrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve2R" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve2S" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Release_Retrieve2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve2", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Retrieve2R" +
            "esponse")]
        System.IAsyncResult BeginRelease_Retrieve2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> EndRelease_Retrieve2(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveBy" +
            "IdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveBy" +
            "IdServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Release_RetrieveById(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveBy" +
            "Id", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveBy" +
            "IdResponse")]
        System.IAsyncResult BeginRelease_RetrieveById(int releaseId, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease EndRelease_RetrieveById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_UpdateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_UpdateVali" +
            "dationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_UpdateServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Update", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_UpdateResp" +
            "onse")]
        System.IAsyncResult BeginRelease_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Update(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_DeleteResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_DeleteServ" +
            "iceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_Delete(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Delete", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_DeleteResp" +
            "onse")]
        System.IAsyncResult BeginRelease_Delete(int releaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Delete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_MoveRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_MoveServic" +
            "eFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Release_Move(int releaseId, System.Nullable<int> destinationReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_Move", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_MoveRespon" +
            "se")]
        System.IAsyncResult BeginRelease_Move(int releaseId, System.Nullable<int> destinationReleaseId, System.AsyncCallback callback, object asyncState);
        
        void EndRelease_Move(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveCo" +
            "mmentsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveCo" +
            "mmentsServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Release_RetrieveComments(int ReleaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveCo" +
            "mments", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveCo" +
            "mmentsResponse")]
        System.IAsyncResult BeginRelease_RetrieveComments(int ReleaseId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndRelease_RetrieveComments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveTe" +
            "stMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveTe" +
            "stMappingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveTe" +
            "stMappingServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> Release_RetrieveTestMapping(int releaseId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveTe" +
            "stMapping", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_RetrieveTe" +
            "stMappingResponse")]
        System.IAsyncResult BeginRelease_RetrieveTestMapping(int releaseId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> EndRelease_RetrieveTestMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateComm" +
            "entResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateComm" +
            "entServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Release_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateComm" +
            "ent", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Release_CreateComm" +
            "entResponse")]
        System.IAsyncResult BeginRelease_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndRelease_CreateComment(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_AddTes" +
            "tCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_AddTes" +
            "tCoverageResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_AddTes" +
            "tCoverageServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        void Requirement_AddTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_AddTes" +
            "tCoverage", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_AddTes" +
            "tCoverageResponse")]
        System.IAsyncResult BeginRequirement_AddTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState);
        
        void EndRequirement_AddTestCoverage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_CountR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_CountS" +
            "erviceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        long Requirement_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Count", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_CountR" +
            "esponse")]
        System.IAsyncResult BeginRequirement_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState);
        
        long EndRequirement_Count(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ServiceFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1ServiceFaultMessageFault", Name="ServiceFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        [System.ServiceModel.FaultContractAttribute(typeof(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.ValidationFaultMessage), Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1ValidationFaultMessageFault", Name="ValidationFaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Inflectra.SpiraTest.Web.Services.v4_0")]
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_Create1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1", ReplyAction="http://www.inflectra.com/SpiraTest/Services/v4.0/IImportExport/Requirement_Create" +
            "1Response")]
        System.IAsyncResult BeginRequirement_Create1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition, System.AsyncCallback callback, object asyncState);
        
        Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_Create1(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImportExportChannel : Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.IImportExport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_Authenticate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_Authenticate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Connection_ConnectToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Connection_ConnectToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProductNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProductNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetServerDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetServerDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetWebServerUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetWebServerUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationEngine_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationEngine_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_RetrieveByReleaseIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_RetrieveByReleaseIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Build_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Build_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_Create2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_Create2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveTestCoverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveTestCoverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProductVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProductVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetArtifactUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetArtifactUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class System_GetProjectIdForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public System_GetProjectIdForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Task_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Task_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateParameterTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateParameterTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByReleaseIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByReleaseIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByTestSetIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByTestSetIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveByFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveByFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_AddLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_AddLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CountForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CountForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCase_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCase_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateFromTestCasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateFromTestCasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateFromTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateFromTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateForAutomationHostCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateForAutomationHostCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_CreateForAutomatedTestSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_CreateForAutomatedTestSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RecordAutomated3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RecordAutomated3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveManualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveManualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveAutomatedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveAutomatedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveAutomatedByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveAutomatedByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_RetrieveManualByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_RetrieveManualByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestRun_SaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestRun_SaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_AddTestMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_AddTestMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveTestCaseMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveTestCaseMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSet_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSet_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class User_RetrieveByUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public User_RetrieveByUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_RetrieveByTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_RetrieveByTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AutomationHost_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AutomationHost_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveForArtifactTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveForArtifactTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddCustomListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddCustomListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddCustomListValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddCustomListValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_AddDefinitionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_AddDefinitionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveCustomListByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveCustomListByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomProperty_RetrieveCustomListsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomProperty_RetrieveCustomListsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveArtifactMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveArtifactMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveFieldValueMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveFieldValueMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveProjectMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveProjectMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataMapping_RetrieveUserMappingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DataMapping_RetrieveUserMappingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_OpenFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_OpenFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFileVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFileVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddUrlVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddUrlVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveForFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveForFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_RetrieveFolderByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_RetrieveFolderByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Document_AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Document_AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Association_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Association_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Association_RetrieveForArtifactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Association_RetrieveForArtifactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddSeverityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddSeverityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_AddTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_AddTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestRunStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestRunStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveByTestStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveByTestStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveForOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveForOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrievePrioritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrievePrioritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveSeveritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveSeveritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowTransitionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowTransitionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Project_RetrieveUserMembershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Project_RetrieveUserMembershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectRole_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProjectRole_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_Retrieve2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_Retrieve2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_RetrieveTestMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_RetrieveTestMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Release_CreateCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Release_CreateCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_CountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_CountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Requirement_Create1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Requirement_Create1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportExportClient : System.ServiceModel.ClientBase<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.IImportExport>, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.IImportExport {
        
        private BeginOperationDelegate onBeginConnection_AuthenticateDelegate;
        
        private EndOperationDelegate onEndConnection_AuthenticateDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_AuthenticateCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_Authenticate2Delegate;
        
        private EndOperationDelegate onEndConnection_Authenticate2Delegate;
        
        private System.Threading.SendOrPostCallback onConnection_Authenticate2CompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_ConnectToProjectDelegate;
        
        private EndOperationDelegate onEndConnection_ConnectToProjectDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_ConnectToProjectCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnection_DisconnectDelegate;
        
        private EndOperationDelegate onEndConnection_DisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnection_DisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProductNameDelegate;
        
        private EndOperationDelegate onEndSystem_GetProductNameDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProductNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetServerDateTimeDelegate;
        
        private EndOperationDelegate onEndSystem_GetServerDateTimeDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetServerDateTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetWebServerUrlDelegate;
        
        private EndOperationDelegate onEndSystem_GetWebServerUrlDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetWebServerUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_DeleteDelegate;
        
        private EndOperationDelegate onEndAutomationHost_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveByTokenDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveByTokenDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveByTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_CreateDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationEngine_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndAutomationEngine_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationEngine_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_RetrieveByReleaseIdDelegate;
        
        private EndOperationDelegate onEndBuild_RetrieveByReleaseIdDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_RetrieveByReleaseIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndBuild_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuild_CreateDelegate;
        
        private EndOperationDelegate onEndBuild_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onBuild_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_Create2Delegate;
        
        private EndOperationDelegate onEndRequirement_Create2Delegate;
        
        private System.Threading.SendOrPostCallback onRequirement_Create2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RemoveTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_RemoveTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RemoveTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_UpdateDelegate;
        
        private EndOperationDelegate onEndRequirement_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_DeleteDelegate;
        
        private EndOperationDelegate onEndRequirement_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_MoveDelegate;
        
        private EndOperationDelegate onEndRequirement_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndRequirement_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_CreateCommentDelegate;
        
        private EndOperationDelegate onEndRequirement_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProductVersionDelegate;
        
        private EndOperationDelegate onEndSystem_GetProductVersionDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProductVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetSettingsDelegate;
        
        private EndOperationDelegate onEndSystem_GetSettingsDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetSettingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetArtifactUrlDelegate;
        
        private EndOperationDelegate onEndSystem_GetArtifactUrlDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetArtifactUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginSystem_GetProjectIdForArtifactDelegate;
        
        private EndOperationDelegate onEndSystem_GetProjectIdForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onSystem_GetProjectIdForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CreateDelegate;
        
        private EndOperationDelegate onEndTask_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveNewDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveNewDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_UpdateDelegate;
        
        private EndOperationDelegate onEndTask_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTask_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CountDelegate;
        
        private EndOperationDelegate onEndTask_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_DeleteDelegate;
        
        private EndOperationDelegate onEndTask_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTask_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTask_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTask_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTask_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTask_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTask_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddParameterDelegate;
        
        private EndOperationDelegate onEndTestCase_AddParameterDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddParameterCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CountDelegate;
        
        private EndOperationDelegate onEndTestCase_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateParameterTokenDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateParameterTokenDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateParameterTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByReleaseIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByReleaseIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByReleaseIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByTestSetIdDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByTestSetIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByTestSetIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveByFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveByFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveByFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_UpdateDelegate;
        
        private EndOperationDelegate onEndTestCase_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_DeleteDelegate;
        
        private EndOperationDelegate onEndTestCase_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_MoveDelegate;
        
        private EndOperationDelegate onEndTestCase_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_MoveStepDelegate;
        
        private EndOperationDelegate onEndTestCase_MoveStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_MoveStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_DeleteStepDelegate;
        
        private EndOperationDelegate onEndTestCase_DeleteStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_DeleteStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddStepDelegate;
        
        private EndOperationDelegate onEndTestCase_AddStepDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddLinkDelegate;
        
        private EndOperationDelegate onEndTestCase_AddLinkDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddLinkCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_AddUpdateAutomationScriptDelegate;
        
        private EndOperationDelegate onEndTestCase_AddUpdateAutomationScriptDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_AddUpdateAutomationScriptCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTestCase_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CountForFolderDelegate;
        
        private EndOperationDelegate onEndTestCase_CountForFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CountForFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestCase_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTestCase_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTestCase_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateFromTestCasesDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateFromTestCasesDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateFromTestCasesCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CountDelegate;
        
        private EndOperationDelegate onEndTestRun_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateFromTestSetDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateFromTestSetDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateFromTestSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateForAutomationHostDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateForAutomationHostDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateForAutomationHostCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_CreateForAutomatedTestSetDelegate;
        
        private EndOperationDelegate onEndTestRun_CreateForAutomatedTestSetDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_CreateForAutomatedTestSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated1Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated1Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated1CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated2Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated2Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated2CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RecordAutomated3Delegate;
        
        private EndOperationDelegate onEndTestRun_RecordAutomated3Delegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RecordAutomated3CompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveManualDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveManualDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveManualCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveAutomatedDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveAutomatedDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveAutomatedCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveAutomatedByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveAutomatedByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveAutomatedByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_RetrieveManualByIdDelegate;
        
        private EndOperationDelegate onEndTestRun_RetrieveManualByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_RetrieveManualByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestRun_SaveDelegate;
        
        private EndOperationDelegate onEndTestRun_SaveDelegate;
        
        private System.Threading.SendOrPostCallback onTestRun_SaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_AddTestMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_AddTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_AddTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CountDelegate;
        
        private EndOperationDelegate onEndTestSet_CountDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateFolderDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RemoveTestMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_RemoveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RemoveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveTestCaseMappingDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveTestCaseMappingDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveTestCaseMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_UpdateDelegate;
        
        private EndOperationDelegate onEndTestSet_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_DeleteDelegate;
        
        private EndOperationDelegate onEndTestSet_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_MoveDelegate;
        
        private EndOperationDelegate onEndTestSet_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndTestSet_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSet_CreateCommentDelegate;
        
        private EndOperationDelegate onEndTestSet_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onTestSet_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_CreateDelegate;
        
        private EndOperationDelegate onEndUser_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onUser_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_RetrieveByUserNameDelegate;
        
        private EndOperationDelegate onEndUser_RetrieveByUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onUser_RetrieveByUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginUser_DeleteDelegate;
        
        private EndOperationDelegate onEndUser_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onUser_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_RetrieveByTokenDelegate;
        
        private EndOperationDelegate onEndAutomationHost_RetrieveByTokenDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_RetrieveByTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_CreateDelegate;
        
        private EndOperationDelegate onEndAutomationHost_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAutomationHost_UpdateDelegate;
        
        private EndOperationDelegate onEndAutomationHost_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onAutomationHost_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveForArtifactTypeDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveForArtifactTypeDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveForArtifactTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddCustomListDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddCustomListDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddCustomListCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddCustomListValueDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddCustomListValueDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddCustomListValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_AddDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_AddDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_AddDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_UpdateDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_UpdateDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_UpdateDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_DeleteDefinitionDelegate;
        
        private EndOperationDelegate onEndCustomProperty_DeleteDefinitionDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_DeleteDefinitionCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveCustomListByIdDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveCustomListByIdDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveCustomListByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_RetrieveCustomListsDelegate;
        
        private EndOperationDelegate onEndCustomProperty_RetrieveCustomListsDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_RetrieveCustomListsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomProperty_UpdateCustomListDelegate;
        
        private EndOperationDelegate onEndCustomProperty_UpdateCustomListDelegate;
        
        private System.Threading.SendOrPostCallback onCustomProperty_UpdateCustomListCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_AddArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_AddArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_AddArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_AddUserMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_AddUserMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_AddUserMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RemoveArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RemoveArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RemoveArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveArtifactMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveArtifactMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveArtifactMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveCustomPropertyMappingDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveCustomPropertyMappingDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveFieldValueMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveFieldValueMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveFieldValueMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveProjectMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveProjectMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveProjectMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDataMapping_RetrieveUserMappingsDelegate;
        
        private EndOperationDelegate onEndDataMapping_RetrieveUserMappingsDelegate;
        
        private System.Threading.SendOrPostCallback onDataMapping_RetrieveUserMappingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_OpenFileDelegate;
        
        private EndOperationDelegate onEndDocument_OpenFileDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_OpenFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFileDelegate;
        
        private EndOperationDelegate onEndDocument_AddFileDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddUrlDelegate;
        
        private EndOperationDelegate onEndDocument_AddUrlDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFileVersionDelegate;
        
        private EndOperationDelegate onEndDocument_AddFileVersionDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFileVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddUrlVersionDelegate;
        
        private EndOperationDelegate onEndDocument_AddUrlVersionDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddUrlVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteFromArtifactDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteFromArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteFromArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveForFolderDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveForFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveForFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddToArtifactIdDelegate;
        
        private EndOperationDelegate onEndDocument_AddToArtifactIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddToArtifactIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveFoldersDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveFoldersDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveFoldersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_RetrieveFolderByIdDelegate;
        
        private EndOperationDelegate onEndDocument_RetrieveFolderByIdDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_RetrieveFolderByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_AddFolderDelegate;
        
        private EndOperationDelegate onEndDocument_AddFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_AddFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_DeleteFolderDelegate;
        
        private EndOperationDelegate onEndDocument_DeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_DeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDocument_UpdateFolderDelegate;
        
        private EndOperationDelegate onEndDocument_UpdateFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDocument_UpdateFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_CreateDelegate;
        
        private EndOperationDelegate onEndAssociation_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_UpdateDelegate;
        
        private EndOperationDelegate onEndAssociation_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssociation_RetrieveForArtifactDelegate;
        
        private EndOperationDelegate onEndAssociation_RetrieveForArtifactDelegate;
        
        private System.Threading.SendOrPostCallback onAssociation_RetrieveForArtifactCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddPriorityDelegate;
        
        private EndOperationDelegate onEndIncident_AddPriorityDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddPriorityCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_CountDelegate;
        
        private EndOperationDelegate onEndIncident_CountDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddCommentsDelegate;
        
        private EndOperationDelegate onEndIncident_AddCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddSeverityDelegate;
        
        private EndOperationDelegate onEndIncident_AddSeverityDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddSeverityCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddStatusDelegate;
        
        private EndOperationDelegate onEndIncident_AddStatusDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_AddTypeDelegate;
        
        private EndOperationDelegate onEndIncident_AddTypeDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_AddTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_CreateDelegate;
        
        private EndOperationDelegate onEndIncident_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestCaseDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestCaseDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestCaseCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestRunStepDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestRunStepDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestRunStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveByTestStepDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveByTestStepDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveByTestStepCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveForOwnerDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveForOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveForOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveNewDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveNewDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveNewCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrievePrioritiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrievePrioritiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrievePrioritiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveSeveritiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveSeveritiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveSeveritiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveStatusesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveStatusesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveStatusesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveTypesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveTypesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowFieldsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowTransitionsDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowTransitionsDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowTransitionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate;
        
        private EndOperationDelegate onEndIncident_RetrieveWorkflowCustomPropertiesDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_UpdateDelegate;
        
        private EndOperationDelegate onEndIncident_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginIncident_DeleteDelegate;
        
        private EndOperationDelegate onEndIncident_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onIncident_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_CreateDelegate;
        
        private EndOperationDelegate onEndProject_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onProject_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_DeleteDelegate;
        
        private EndOperationDelegate onEndProject_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onProject_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginProject_RetrieveUserMembershipDelegate;
        
        private EndOperationDelegate onEndProject_RetrieveUserMembershipDelegate;
        
        private System.Threading.SendOrPostCallback onProject_RetrieveUserMembershipCompletedDelegate;
        
        private BeginOperationDelegate onBeginProjectRole_RetrieveDelegate;
        
        private EndOperationDelegate onEndProjectRole_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onProjectRole_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_AddTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_AddTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_AddTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_AddTestMapping2Delegate;
        
        private EndOperationDelegate onEndRelease_AddTestMapping2Delegate;
        
        private System.Threading.SendOrPostCallback onRelease_AddTestMapping2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CountDelegate;
        
        private EndOperationDelegate onEndRelease_CountDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CreateDelegate;
        
        private EndOperationDelegate onEndRelease_CreateDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CreateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RemoveTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_RemoveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RemoveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_Retrieve2Delegate;
        
        private EndOperationDelegate onEndRelease_Retrieve2Delegate;
        
        private System.Threading.SendOrPostCallback onRelease_Retrieve2CompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveByIdDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveByIdDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_UpdateDelegate;
        
        private EndOperationDelegate onEndRelease_UpdateDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_UpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_DeleteDelegate;
        
        private EndOperationDelegate onEndRelease_DeleteDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_DeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_MoveDelegate;
        
        private EndOperationDelegate onEndRelease_MoveDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_MoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveCommentsDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveCommentsDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveCommentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_RetrieveTestMappingDelegate;
        
        private EndOperationDelegate onEndRelease_RetrieveTestMappingDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_RetrieveTestMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginRelease_CreateCommentDelegate;
        
        private EndOperationDelegate onEndRelease_CreateCommentDelegate;
        
        private System.Threading.SendOrPostCallback onRelease_CreateCommentCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_AddTestCoverageDelegate;
        
        private EndOperationDelegate onEndRequirement_AddTestCoverageDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_AddTestCoverageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_CountDelegate;
        
        private EndOperationDelegate onEndRequirement_CountDelegate;
        
        private System.Threading.SendOrPostCallback onRequirement_CountCompletedDelegate;
        
        private BeginOperationDelegate onBeginRequirement_Create1Delegate;
        
        private EndOperationDelegate onEndRequirement_Create1Delegate;
        
        private System.Threading.SendOrPostCallback onRequirement_Create1CompletedDelegate;
        
        public ImportExportClient() {
        }
        
        public ImportExportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImportExportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportExportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImportExportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<Connection_AuthenticateCompletedEventArgs> Connection_AuthenticateCompleted;
        
        public event System.EventHandler<Connection_Authenticate2CompletedEventArgs> Connection_Authenticate2Completed;
        
        public event System.EventHandler<Connection_ConnectToProjectCompletedEventArgs> Connection_ConnectToProjectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Connection_DisconnectCompleted;
        
        public event System.EventHandler<System_GetProductNameCompletedEventArgs> System_GetProductNameCompleted;
        
        public event System.EventHandler<System_GetServerDateTimeCompletedEventArgs> System_GetServerDateTimeCompleted;
        
        public event System.EventHandler<System_GetWebServerUrlCompletedEventArgs> System_GetWebServerUrlCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AutomationHost_DeleteCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveByTokenCompletedEventArgs> AutomationEngine_RetrieveByTokenCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveCompletedEventArgs> AutomationEngine_RetrieveCompleted;
        
        public event System.EventHandler<AutomationEngine_CreateCompletedEventArgs> AutomationEngine_CreateCompleted;
        
        public event System.EventHandler<AutomationEngine_RetrieveByIdCompletedEventArgs> AutomationEngine_RetrieveByIdCompleted;
        
        public event System.EventHandler<Build_RetrieveByReleaseIdCompletedEventArgs> Build_RetrieveByReleaseIdCompleted;
        
        public event System.EventHandler<Build_RetrieveByIdCompletedEventArgs> Build_RetrieveByIdCompleted;
        
        public event System.EventHandler<Build_CreateCompletedEventArgs> Build_CreateCompleted;
        
        public event System.EventHandler<Requirement_Create2CompletedEventArgs> Requirement_Create2Completed;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_RemoveTestCoverageCompleted;
        
        public event System.EventHandler<Requirement_RetrieveCompletedEventArgs> Requirement_RetrieveCompleted;
        
        public event System.EventHandler<Requirement_RetrieveByIdCompletedEventArgs> Requirement_RetrieveByIdCompleted;
        
        public event System.EventHandler<Requirement_RetrieveForOwnerCompletedEventArgs> Requirement_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Requirement_RetrieveTestCoverageCompletedEventArgs> Requirement_RetrieveTestCoverageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_MoveCompleted;
        
        public event System.EventHandler<Requirement_RetrieveCommentsCompletedEventArgs> Requirement_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Requirement_CreateCommentCompletedEventArgs> Requirement_CreateCommentCompleted;
        
        public event System.EventHandler<System_GetProductVersionCompletedEventArgs> System_GetProductVersionCompleted;
        
        public event System.EventHandler<System_GetSettingsCompletedEventArgs> System_GetSettingsCompleted;
        
        public event System.EventHandler<System_GetArtifactUrlCompletedEventArgs> System_GetArtifactUrlCompleted;
        
        public event System.EventHandler<System_GetProjectIdForArtifactCompletedEventArgs> System_GetProjectIdForArtifactCompleted;
        
        public event System.EventHandler<Task_CreateCompletedEventArgs> Task_CreateCompleted;
        
        public event System.EventHandler<Task_RetrieveCompletedEventArgs> Task_RetrieveCompleted;
        
        public event System.EventHandler<Task_RetrieveByIdCompletedEventArgs> Task_RetrieveByIdCompleted;
        
        public event System.EventHandler<Task_RetrieveForOwnerCompletedEventArgs> Task_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Task_RetrieveNewCompletedEventArgs> Task_RetrieveNewCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_UpdateCompleted;
        
        public event System.EventHandler<Task_CountCompletedEventArgs> Task_CountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Task_DeleteCompleted;
        
        public event System.EventHandler<Task_RetrieveCommentsCompletedEventArgs> Task_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Task_CreateCommentCompletedEventArgs> Task_CreateCommentCompleted;
        
        public event System.EventHandler<TestCase_AddParameterCompletedEventArgs> TestCase_AddParameterCompleted;
        
        public event System.EventHandler<TestCase_CountCompletedEventArgs> TestCase_CountCompleted;
        
        public event System.EventHandler<TestCase_CreateCompletedEventArgs> TestCase_CreateCompleted;
        
        public event System.EventHandler<TestCase_CreateFolderCompletedEventArgs> TestCase_CreateFolderCompleted;
        
        public event System.EventHandler<TestCase_CreateParameterTokenCompletedEventArgs> TestCase_CreateParameterTokenCompleted;
        
        public event System.EventHandler<TestCase_RetrieveCompletedEventArgs> TestCase_RetrieveCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByIdCompletedEventArgs> TestCase_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByReleaseIdCompletedEventArgs> TestCase_RetrieveByReleaseIdCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByTestSetIdCompletedEventArgs> TestCase_RetrieveByTestSetIdCompleted;
        
        public event System.EventHandler<TestCase_RetrieveForOwnerCompletedEventArgs> TestCase_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<TestCase_RetrieveByFolderCompletedEventArgs> TestCase_RetrieveByFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_MoveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_MoveStepCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_DeleteStepCompleted;
        
        public event System.EventHandler<TestCase_AddStepCompletedEventArgs> TestCase_AddStepCompleted;
        
        public event System.EventHandler<TestCase_AddLinkCompletedEventArgs> TestCase_AddLinkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCase_AddUpdateAutomationScriptCompleted;
        
        public event System.EventHandler<TestCase_RetrieveCommentsCompletedEventArgs> TestCase_RetrieveCommentsCompleted;
        
        public event System.EventHandler<TestCase_CountForFolderCompletedEventArgs> TestCase_CountForFolderCompleted;
        
        public event System.EventHandler<TestCase_CreateCommentCompletedEventArgs> TestCase_CreateCommentCompleted;
        
        public event System.EventHandler<TestRun_CreateFromTestCasesCompletedEventArgs> TestRun_CreateFromTestCasesCompleted;
        
        public event System.EventHandler<TestRun_CountCompletedEventArgs> TestRun_CountCompleted;
        
        public event System.EventHandler<TestRun_CreateFromTestSetCompletedEventArgs> TestRun_CreateFromTestSetCompleted;
        
        public event System.EventHandler<TestRun_CreateForAutomationHostCompletedEventArgs> TestRun_CreateForAutomationHostCompleted;
        
        public event System.EventHandler<TestRun_CreateForAutomatedTestSetCompletedEventArgs> TestRun_CreateForAutomatedTestSetCompleted;
        
        public event System.EventHandler<TestRun_RecordAutomated1CompletedEventArgs> TestRun_RecordAutomated1Completed;
        
        public event System.EventHandler<TestRun_RecordAutomated2CompletedEventArgs> TestRun_RecordAutomated2Completed;
        
        public event System.EventHandler<TestRun_RecordAutomated3CompletedEventArgs> TestRun_RecordAutomated3Completed;
        
        public event System.EventHandler<TestRun_RetrieveCompletedEventArgs> TestRun_RetrieveCompleted;
        
        public event System.EventHandler<TestRun_RetrieveManualCompletedEventArgs> TestRun_RetrieveManualCompleted;
        
        public event System.EventHandler<TestRun_RetrieveAutomatedCompletedEventArgs> TestRun_RetrieveAutomatedCompleted;
        
        public event System.EventHandler<TestRun_RetrieveByIdCompletedEventArgs> TestRun_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestRun_RetrieveAutomatedByIdCompletedEventArgs> TestRun_RetrieveAutomatedByIdCompleted;
        
        public event System.EventHandler<TestRun_RetrieveManualByIdCompletedEventArgs> TestRun_RetrieveManualByIdCompleted;
        
        public event System.EventHandler<TestRun_SaveCompletedEventArgs> TestRun_SaveCompleted;
        
        public event System.EventHandler<TestSet_AddTestMappingCompletedEventArgs> TestSet_AddTestMappingCompleted;
        
        public event System.EventHandler<TestSet_CreateCompletedEventArgs> TestSet_CreateCompleted;
        
        public event System.EventHandler<TestSet_CountCompletedEventArgs> TestSet_CountCompleted;
        
        public event System.EventHandler<TestSet_CreateFolderCompletedEventArgs> TestSet_CreateFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_RemoveTestMappingCompleted;
        
        public event System.EventHandler<TestSet_RetrieveTestCaseMappingCompletedEventArgs> TestSet_RetrieveTestCaseMappingCompleted;
        
        public event System.EventHandler<TestSet_RetrieveCompletedEventArgs> TestSet_RetrieveCompleted;
        
        public event System.EventHandler<TestSet_RetrieveByIdCompletedEventArgs> TestSet_RetrieveByIdCompleted;
        
        public event System.EventHandler<TestSet_RetrieveForOwnerCompletedEventArgs> TestSet_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestSet_MoveCompleted;
        
        public event System.EventHandler<TestSet_RetrieveCommentsCompletedEventArgs> TestSet_RetrieveCommentsCompleted;
        
        public event System.EventHandler<TestSet_CreateCommentCompletedEventArgs> TestSet_CreateCommentCompleted;
        
        public event System.EventHandler<User_CreateCompletedEventArgs> User_CreateCompleted;
        
        public event System.EventHandler<User_RetrieveByIdCompletedEventArgs> User_RetrieveByIdCompleted;
        
        public event System.EventHandler<User_RetrieveByUserNameCompletedEventArgs> User_RetrieveByUserNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> User_DeleteCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveCompletedEventArgs> AutomationHost_RetrieveCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveByIdCompletedEventArgs> AutomationHost_RetrieveByIdCompleted;
        
        public event System.EventHandler<AutomationHost_RetrieveByTokenCompletedEventArgs> AutomationHost_RetrieveByTokenCompleted;
        
        public event System.EventHandler<AutomationHost_CreateCompletedEventArgs> AutomationHost_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AutomationHost_UpdateCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveForArtifactTypeCompletedEventArgs> CustomProperty_RetrieveForArtifactTypeCompleted;
        
        public event System.EventHandler<CustomProperty_AddCustomListCompletedEventArgs> CustomProperty_AddCustomListCompleted;
        
        public event System.EventHandler<CustomProperty_AddCustomListValueCompletedEventArgs> CustomProperty_AddCustomListValueCompleted;
        
        public event System.EventHandler<CustomProperty_AddDefinitionCompletedEventArgs> CustomProperty_AddDefinitionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_UpdateDefinitionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_DeleteDefinitionCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveCustomListByIdCompletedEventArgs> CustomProperty_RetrieveCustomListByIdCompleted;
        
        public event System.EventHandler<CustomProperty_RetrieveCustomListsCompletedEventArgs> CustomProperty_RetrieveCustomListsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CustomProperty_UpdateCustomListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_AddArtifactMappingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_AddUserMappingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DataMapping_RemoveArtifactMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveArtifactMappingsCompletedEventArgs> DataMapping_RetrieveArtifactMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs> DataMapping_RetrieveCustomPropertyMappingCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs> DataMapping_RetrieveCustomPropertyValueMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveFieldValueMappingsCompletedEventArgs> DataMapping_RetrieveFieldValueMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveProjectMappingsCompletedEventArgs> DataMapping_RetrieveProjectMappingsCompleted;
        
        public event System.EventHandler<DataMapping_RetrieveUserMappingsCompletedEventArgs> DataMapping_RetrieveUserMappingsCompleted;
        
        public event System.EventHandler<Document_OpenFileCompletedEventArgs> Document_OpenFileCompleted;
        
        public event System.EventHandler<Document_AddFileCompletedEventArgs> Document_AddFileCompleted;
        
        public event System.EventHandler<Document_AddUrlCompletedEventArgs> Document_AddUrlCompleted;
        
        public event System.EventHandler<Document_AddFileVersionCompletedEventArgs> Document_AddFileVersionCompleted;
        
        public event System.EventHandler<Document_AddUrlVersionCompletedEventArgs> Document_AddUrlVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteFromArtifactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteCompleted;
        
        public event System.EventHandler<Document_RetrieveForFolderCompletedEventArgs> Document_RetrieveForFolderCompleted;
        
        public event System.EventHandler<Document_RetrieveForArtifactCompletedEventArgs> Document_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_AddToArtifactIdCompleted;
        
        public event System.EventHandler<Document_RetrieveByIdCompletedEventArgs> Document_RetrieveByIdCompleted;
        
        public event System.EventHandler<Document_RetrieveTypesCompletedEventArgs> Document_RetrieveTypesCompleted;
        
        public event System.EventHandler<Document_RetrieveFoldersCompletedEventArgs> Document_RetrieveFoldersCompleted;
        
        public event System.EventHandler<Document_RetrieveFolderByIdCompletedEventArgs> Document_RetrieveFolderByIdCompleted;
        
        public event System.EventHandler<Document_AddFolderCompletedEventArgs> Document_AddFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_DeleteFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Document_UpdateFolderCompleted;
        
        public event System.EventHandler<Association_CreateCompletedEventArgs> Association_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Association_UpdateCompleted;
        
        public event System.EventHandler<Association_RetrieveForArtifactCompletedEventArgs> Association_RetrieveForArtifactCompleted;
        
        public event System.EventHandler<Incident_AddPriorityCompletedEventArgs> Incident_AddPriorityCompleted;
        
        public event System.EventHandler<Incident_CountCompletedEventArgs> Incident_CountCompleted;
        
        public event System.EventHandler<Incident_AddCommentsCompletedEventArgs> Incident_AddCommentsCompleted;
        
        public event System.EventHandler<Incident_AddSeverityCompletedEventArgs> Incident_AddSeverityCompleted;
        
        public event System.EventHandler<Incident_AddStatusCompletedEventArgs> Incident_AddStatusCompleted;
        
        public event System.EventHandler<Incident_AddTypeCompletedEventArgs> Incident_AddTypeCompleted;
        
        public event System.EventHandler<Incident_CreateCompletedEventArgs> Incident_CreateCompleted;
        
        public event System.EventHandler<Incident_RetrieveCompletedEventArgs> Incident_RetrieveCompleted;
        
        public event System.EventHandler<Incident_RetrieveByIdCompletedEventArgs> Incident_RetrieveByIdCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestCaseCompletedEventArgs> Incident_RetrieveByTestCaseCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestRunStepCompletedEventArgs> Incident_RetrieveByTestRunStepCompleted;
        
        public event System.EventHandler<Incident_RetrieveByTestStepCompletedEventArgs> Incident_RetrieveByTestStepCompleted;
        
        public event System.EventHandler<Incident_RetrieveForOwnerCompletedEventArgs> Incident_RetrieveForOwnerCompleted;
        
        public event System.EventHandler<Incident_RetrieveNewCompletedEventArgs> Incident_RetrieveNewCompleted;
        
        public event System.EventHandler<Incident_RetrievePrioritiesCompletedEventArgs> Incident_RetrievePrioritiesCompleted;
        
        public event System.EventHandler<Incident_RetrieveCommentsCompletedEventArgs> Incident_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Incident_RetrieveSeveritiesCompletedEventArgs> Incident_RetrieveSeveritiesCompleted;
        
        public event System.EventHandler<Incident_RetrieveStatusesCompletedEventArgs> Incident_RetrieveStatusesCompleted;
        
        public event System.EventHandler<Incident_RetrieveTypesCompletedEventArgs> Incident_RetrieveTypesCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowFieldsCompletedEventArgs> Incident_RetrieveWorkflowFieldsCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowTransitionsCompletedEventArgs> Incident_RetrieveWorkflowTransitionsCompleted;
        
        public event System.EventHandler<Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs> Incident_RetrieveWorkflowCustomPropertiesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Incident_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Incident_DeleteCompleted;
        
        public event System.EventHandler<Project_CreateCompletedEventArgs> Project_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Project_DeleteCompleted;
        
        public event System.EventHandler<Project_RetrieveCompletedEventArgs> Project_RetrieveCompleted;
        
        public event System.EventHandler<Project_RetrieveByIdCompletedEventArgs> Project_RetrieveByIdCompleted;
        
        public event System.EventHandler<Project_RetrieveUserMembershipCompletedEventArgs> Project_RetrieveUserMembershipCompleted;
        
        public event System.EventHandler<ProjectRole_RetrieveCompletedEventArgs> ProjectRole_RetrieveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_AddTestMappingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_AddTestMapping2Completed;
        
        public event System.EventHandler<Release_CountCompletedEventArgs> Release_CountCompleted;
        
        public event System.EventHandler<Release_CreateCompletedEventArgs> Release_CreateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_RemoveTestMappingCompleted;
        
        public event System.EventHandler<Release_RetrieveCompletedEventArgs> Release_RetrieveCompleted;
        
        public event System.EventHandler<Release_Retrieve2CompletedEventArgs> Release_Retrieve2Completed;
        
        public event System.EventHandler<Release_RetrieveByIdCompletedEventArgs> Release_RetrieveByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_DeleteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Release_MoveCompleted;
        
        public event System.EventHandler<Release_RetrieveCommentsCompletedEventArgs> Release_RetrieveCommentsCompleted;
        
        public event System.EventHandler<Release_RetrieveTestMappingCompletedEventArgs> Release_RetrieveTestMappingCompleted;
        
        public event System.EventHandler<Release_CreateCommentCompletedEventArgs> Release_CreateCommentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Requirement_AddTestCoverageCompleted;
        
        public event System.EventHandler<Requirement_CountCompletedEventArgs> Requirement_CountCompleted;
        
        public event System.EventHandler<Requirement_Create1CompletedEventArgs> Requirement_Create1Completed;
        
        public bool Connection_Authenticate(string userName, string password) {
            return base.Channel.Connection_Authenticate(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Authenticate(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Authenticate(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_Authenticate(System.IAsyncResult result) {
            return base.Channel.EndConnection_Authenticate(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Authenticate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginConnection_Authenticate(userName, password, callback, asyncState);
        }
        
        private object[] OnEndConnection_Authenticate(System.IAsyncResult result) {
            bool retVal = this.EndConnection_Authenticate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_AuthenticateCompleted(object state) {
            if ((this.Connection_AuthenticateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_AuthenticateCompleted(this, new Connection_AuthenticateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_AuthenticateAsync(string userName, string password) {
            this.Connection_AuthenticateAsync(userName, password, null);
        }
        
        public void Connection_AuthenticateAsync(string userName, string password, object userState) {
            if ((this.onBeginConnection_AuthenticateDelegate == null)) {
                this.onBeginConnection_AuthenticateDelegate = new BeginOperationDelegate(this.OnBeginConnection_Authenticate);
            }
            if ((this.onEndConnection_AuthenticateDelegate == null)) {
                this.onEndConnection_AuthenticateDelegate = new EndOperationDelegate(this.OnEndConnection_Authenticate);
            }
            if ((this.onConnection_AuthenticateCompletedDelegate == null)) {
                this.onConnection_AuthenticateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_AuthenticateCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_AuthenticateDelegate, new object[] {
                        userName,
                        password}, this.onEndConnection_AuthenticateDelegate, this.onConnection_AuthenticateCompletedDelegate, userState);
        }
        
        public bool Connection_Authenticate2(string userName, string password, string plugInName) {
            return base.Channel.Connection_Authenticate2(userName, password, plugInName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Authenticate2(string userName, string password, string plugInName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Authenticate2(userName, password, plugInName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_Authenticate2(System.IAsyncResult result) {
            return base.Channel.EndConnection_Authenticate2(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Authenticate2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string plugInName = ((string)(inValues[2]));
            return this.BeginConnection_Authenticate2(userName, password, plugInName, callback, asyncState);
        }
        
        private object[] OnEndConnection_Authenticate2(System.IAsyncResult result) {
            bool retVal = this.EndConnection_Authenticate2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_Authenticate2Completed(object state) {
            if ((this.Connection_Authenticate2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_Authenticate2Completed(this, new Connection_Authenticate2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_Authenticate2Async(string userName, string password, string plugInName) {
            this.Connection_Authenticate2Async(userName, password, plugInName, null);
        }
        
        public void Connection_Authenticate2Async(string userName, string password, string plugInName, object userState) {
            if ((this.onBeginConnection_Authenticate2Delegate == null)) {
                this.onBeginConnection_Authenticate2Delegate = new BeginOperationDelegate(this.OnBeginConnection_Authenticate2);
            }
            if ((this.onEndConnection_Authenticate2Delegate == null)) {
                this.onEndConnection_Authenticate2Delegate = new EndOperationDelegate(this.OnEndConnection_Authenticate2);
            }
            if ((this.onConnection_Authenticate2CompletedDelegate == null)) {
                this.onConnection_Authenticate2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_Authenticate2Completed);
            }
            base.InvokeAsync(this.onBeginConnection_Authenticate2Delegate, new object[] {
                        userName,
                        password,
                        plugInName}, this.onEndConnection_Authenticate2Delegate, this.onConnection_Authenticate2CompletedDelegate, userState);
        }
        
        public bool Connection_ConnectToProject(int projectId) {
            return base.Channel.Connection_ConnectToProject(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_ConnectToProject(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_ConnectToProject(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndConnection_ConnectToProject(System.IAsyncResult result) {
            return base.Channel.EndConnection_ConnectToProject(result);
        }
        
        private System.IAsyncResult OnBeginConnection_ConnectToProject(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginConnection_ConnectToProject(projectId, callback, asyncState);
        }
        
        private object[] OnEndConnection_ConnectToProject(System.IAsyncResult result) {
            bool retVal = this.EndConnection_ConnectToProject(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConnection_ConnectToProjectCompleted(object state) {
            if ((this.Connection_ConnectToProjectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_ConnectToProjectCompleted(this, new Connection_ConnectToProjectCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_ConnectToProjectAsync(int projectId) {
            this.Connection_ConnectToProjectAsync(projectId, null);
        }
        
        public void Connection_ConnectToProjectAsync(int projectId, object userState) {
            if ((this.onBeginConnection_ConnectToProjectDelegate == null)) {
                this.onBeginConnection_ConnectToProjectDelegate = new BeginOperationDelegate(this.OnBeginConnection_ConnectToProject);
            }
            if ((this.onEndConnection_ConnectToProjectDelegate == null)) {
                this.onEndConnection_ConnectToProjectDelegate = new EndOperationDelegate(this.OnEndConnection_ConnectToProject);
            }
            if ((this.onConnection_ConnectToProjectCompletedDelegate == null)) {
                this.onConnection_ConnectToProjectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_ConnectToProjectCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_ConnectToProjectDelegate, new object[] {
                        projectId}, this.onEndConnection_ConnectToProjectDelegate, this.onConnection_ConnectToProjectCompletedDelegate, userState);
        }
        
        public void Connection_Disconnect() {
            base.Channel.Connection_Disconnect();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConnection_Disconnect(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnection_Disconnect(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndConnection_Disconnect(System.IAsyncResult result) {
            base.Channel.EndConnection_Disconnect(result);
        }
        
        private System.IAsyncResult OnBeginConnection_Disconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginConnection_Disconnect(callback, asyncState);
        }
        
        private object[] OnEndConnection_Disconnect(System.IAsyncResult result) {
            this.EndConnection_Disconnect(result);
            return null;
        }
        
        private void OnConnection_DisconnectCompleted(object state) {
            if ((this.Connection_DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Connection_DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Connection_DisconnectAsync() {
            this.Connection_DisconnectAsync(null);
        }
        
        public void Connection_DisconnectAsync(object userState) {
            if ((this.onBeginConnection_DisconnectDelegate == null)) {
                this.onBeginConnection_DisconnectDelegate = new BeginOperationDelegate(this.OnBeginConnection_Disconnect);
            }
            if ((this.onEndConnection_DisconnectDelegate == null)) {
                this.onEndConnection_DisconnectDelegate = new EndOperationDelegate(this.OnEndConnection_Disconnect);
            }
            if ((this.onConnection_DisconnectCompletedDelegate == null)) {
                this.onConnection_DisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnection_DisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnection_DisconnectDelegate, null, this.onEndConnection_DisconnectDelegate, this.onConnection_DisconnectCompletedDelegate, userState);
        }
        
        public string System_GetProductName() {
            return base.Channel.System_GetProductName();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProductName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProductName(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetProductName(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProductName(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProductName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetProductName(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProductName(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetProductName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProductNameCompleted(object state) {
            if ((this.System_GetProductNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProductNameCompleted(this, new System_GetProductNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProductNameAsync() {
            this.System_GetProductNameAsync(null);
        }
        
        public void System_GetProductNameAsync(object userState) {
            if ((this.onBeginSystem_GetProductNameDelegate == null)) {
                this.onBeginSystem_GetProductNameDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProductName);
            }
            if ((this.onEndSystem_GetProductNameDelegate == null)) {
                this.onEndSystem_GetProductNameDelegate = new EndOperationDelegate(this.OnEndSystem_GetProductName);
            }
            if ((this.onSystem_GetProductNameCompletedDelegate == null)) {
                this.onSystem_GetProductNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProductNameCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProductNameDelegate, null, this.onEndSystem_GetProductNameDelegate, this.onSystem_GetProductNameCompletedDelegate, userState);
        }
        
        public System.DateTime System_GetServerDateTime() {
            return base.Channel.System_GetServerDateTime();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetServerDateTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetServerDateTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.DateTime EndSystem_GetServerDateTime(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetServerDateTime(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetServerDateTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetServerDateTime(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetServerDateTime(System.IAsyncResult result) {
            System.DateTime retVal = this.EndSystem_GetServerDateTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetServerDateTimeCompleted(object state) {
            if ((this.System_GetServerDateTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetServerDateTimeCompleted(this, new System_GetServerDateTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetServerDateTimeAsync() {
            this.System_GetServerDateTimeAsync(null);
        }
        
        public void System_GetServerDateTimeAsync(object userState) {
            if ((this.onBeginSystem_GetServerDateTimeDelegate == null)) {
                this.onBeginSystem_GetServerDateTimeDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetServerDateTime);
            }
            if ((this.onEndSystem_GetServerDateTimeDelegate == null)) {
                this.onEndSystem_GetServerDateTimeDelegate = new EndOperationDelegate(this.OnEndSystem_GetServerDateTime);
            }
            if ((this.onSystem_GetServerDateTimeCompletedDelegate == null)) {
                this.onSystem_GetServerDateTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetServerDateTimeCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetServerDateTimeDelegate, null, this.onEndSystem_GetServerDateTimeDelegate, this.onSystem_GetServerDateTimeCompletedDelegate, userState);
        }
        
        public string System_GetWebServerUrl() {
            return base.Channel.System_GetWebServerUrl();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetWebServerUrl(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetWebServerUrl(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetWebServerUrl(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetWebServerUrl(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetWebServerUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetWebServerUrl(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetWebServerUrl(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetWebServerUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetWebServerUrlCompleted(object state) {
            if ((this.System_GetWebServerUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetWebServerUrlCompleted(this, new System_GetWebServerUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetWebServerUrlAsync() {
            this.System_GetWebServerUrlAsync(null);
        }
        
        public void System_GetWebServerUrlAsync(object userState) {
            if ((this.onBeginSystem_GetWebServerUrlDelegate == null)) {
                this.onBeginSystem_GetWebServerUrlDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetWebServerUrl);
            }
            if ((this.onEndSystem_GetWebServerUrlDelegate == null)) {
                this.onEndSystem_GetWebServerUrlDelegate = new EndOperationDelegate(this.OnEndSystem_GetWebServerUrl);
            }
            if ((this.onSystem_GetWebServerUrlCompletedDelegate == null)) {
                this.onSystem_GetWebServerUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetWebServerUrlCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetWebServerUrlDelegate, null, this.onEndSystem_GetWebServerUrlDelegate, this.onSystem_GetWebServerUrlCompletedDelegate, userState);
        }
        
        public void AutomationHost_Delete(int automationHostId) {
            base.Channel.AutomationHost_Delete(automationHostId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Delete(int automationHostId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Delete(automationHostId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAutomationHost_Delete(System.IAsyncResult result) {
            base.Channel.EndAutomationHost_Delete(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationHostId = ((int)(inValues[0]));
            return this.BeginAutomationHost_Delete(automationHostId, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Delete(System.IAsyncResult result) {
            this.EndAutomationHost_Delete(result);
            return null;
        }
        
        private void OnAutomationHost_DeleteCompleted(object state) {
            if ((this.AutomationHost_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_DeleteAsync(int automationHostId) {
            this.AutomationHost_DeleteAsync(automationHostId, null);
        }
        
        public void AutomationHost_DeleteAsync(int automationHostId, object userState) {
            if ((this.onBeginAutomationHost_DeleteDelegate == null)) {
                this.onBeginAutomationHost_DeleteDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Delete);
            }
            if ((this.onEndAutomationHost_DeleteDelegate == null)) {
                this.onEndAutomationHost_DeleteDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Delete);
            }
            if ((this.onAutomationHost_DeleteCompletedDelegate == null)) {
                this.onAutomationHost_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_DeleteDelegate, new object[] {
                        automationHostId}, this.onEndAutomationHost_DeleteDelegate, this.onAutomationHost_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_RetrieveByToken(string token) {
            return base.Channel.AutomationEngine_RetrieveByToken(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_RetrieveByToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_RetrieveByToken(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_RetrieveByToken(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_RetrieveByToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginAutomationEngine_RetrieveByToken(token, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_RetrieveByToken(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine retVal = this.EndAutomationEngine_RetrieveByToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveByTokenCompleted(object state) {
            if ((this.AutomationEngine_RetrieveByTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveByTokenCompleted(this, new AutomationEngine_RetrieveByTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveByTokenAsync(string token) {
            this.AutomationEngine_RetrieveByTokenAsync(token, null);
        }
        
        public void AutomationEngine_RetrieveByTokenAsync(string token, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveByTokenDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveByTokenDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_RetrieveByToken);
            }
            if ((this.onEndAutomationEngine_RetrieveByTokenDelegate == null)) {
                this.onEndAutomationEngine_RetrieveByTokenDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_RetrieveByToken);
            }
            if ((this.onAutomationEngine_RetrieveByTokenCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveByTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveByTokenCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveByTokenDelegate, new object[] {
                        token}, this.onEndAutomationEngine_RetrieveByTokenDelegate, this.onAutomationEngine_RetrieveByTokenCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> AutomationEngine_Retrieve(bool activeOnly) {
            return base.Channel.AutomationEngine_Retrieve(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_Retrieve(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> EndAutomationEngine_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginAutomationEngine_Retrieve(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine> retVal = this.EndAutomationEngine_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveCompleted(object state) {
            if ((this.AutomationEngine_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveCompleted(this, new AutomationEngine_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveAsync(bool activeOnly) {
            this.AutomationEngine_RetrieveAsync(activeOnly, null);
        }
        
        public void AutomationEngine_RetrieveAsync(bool activeOnly, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_Retrieve);
            }
            if ((this.onEndAutomationEngine_RetrieveDelegate == null)) {
                this.onEndAutomationEngine_RetrieveDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_Retrieve);
            }
            if ((this.onAutomationEngine_RetrieveCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveDelegate, new object[] {
                        activeOnly}, this.onEndAutomationEngine_RetrieveDelegate, this.onAutomationEngine_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine) {
            return base.Channel.AutomationEngine_Create(remoteEngine);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_Create(remoteEngine, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_Create(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_Create(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine)(inValues[0]));
            return this.BeginAutomationEngine_Create(remoteEngine, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine retVal = this.EndAutomationEngine_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_CreateCompleted(object state) {
            if ((this.AutomationEngine_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_CreateCompleted(this, new AutomationEngine_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine) {
            this.AutomationEngine_CreateAsync(remoteEngine, null);
        }
        
        public void AutomationEngine_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine remoteEngine, object userState) {
            if ((this.onBeginAutomationEngine_CreateDelegate == null)) {
                this.onBeginAutomationEngine_CreateDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_Create);
            }
            if ((this.onEndAutomationEngine_CreateDelegate == null)) {
                this.onEndAutomationEngine_CreateDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_Create);
            }
            if ((this.onAutomationEngine_CreateCompletedDelegate == null)) {
                this.onAutomationEngine_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_CreateDelegate, new object[] {
                        remoteEngine}, this.onEndAutomationEngine_CreateDelegate, this.onAutomationEngine_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine AutomationEngine_RetrieveById(int automationEngineId) {
            return base.Channel.AutomationEngine_RetrieveById(automationEngineId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationEngine_RetrieveById(int automationEngineId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationEngine_RetrieveById(automationEngineId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine EndAutomationEngine_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndAutomationEngine_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginAutomationEngine_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationEngineId = ((int)(inValues[0]));
            return this.BeginAutomationEngine_RetrieveById(automationEngineId, callback, asyncState);
        }
        
        private object[] OnEndAutomationEngine_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationEngine retVal = this.EndAutomationEngine_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationEngine_RetrieveByIdCompleted(object state) {
            if ((this.AutomationEngine_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationEngine_RetrieveByIdCompleted(this, new AutomationEngine_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationEngine_RetrieveByIdAsync(int automationEngineId) {
            this.AutomationEngine_RetrieveByIdAsync(automationEngineId, null);
        }
        
        public void AutomationEngine_RetrieveByIdAsync(int automationEngineId, object userState) {
            if ((this.onBeginAutomationEngine_RetrieveByIdDelegate == null)) {
                this.onBeginAutomationEngine_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginAutomationEngine_RetrieveById);
            }
            if ((this.onEndAutomationEngine_RetrieveByIdDelegate == null)) {
                this.onEndAutomationEngine_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndAutomationEngine_RetrieveById);
            }
            if ((this.onAutomationEngine_RetrieveByIdCompletedDelegate == null)) {
                this.onAutomationEngine_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationEngine_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationEngine_RetrieveByIdDelegate, new object[] {
                        automationEngineId}, this.onEndAutomationEngine_RetrieveByIdDelegate, this.onAutomationEngine_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> Build_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Build_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> EndBuild_RetrieveByReleaseId(System.IAsyncResult result) {
            return base.Channel.EndBuild_RetrieveByReleaseId(result);
        }
        
        private System.IAsyncResult OnBeginBuild_RetrieveByReleaseId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[1]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberOfRows = ((int)(inValues[4]));
            return this.BeginBuild_RetrieveByReleaseId(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndBuild_RetrieveByReleaseId(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild> retVal = this.EndBuild_RetrieveByReleaseId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_RetrieveByReleaseIdCompleted(object state) {
            if ((this.Build_RetrieveByReleaseIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_RetrieveByReleaseIdCompleted(this, new Build_RetrieveByReleaseIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_RetrieveByReleaseIdAsync(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Build_RetrieveByReleaseIdAsync(releaseId, remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Build_RetrieveByReleaseIdAsync(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginBuild_RetrieveByReleaseIdDelegate == null)) {
                this.onBeginBuild_RetrieveByReleaseIdDelegate = new BeginOperationDelegate(this.OnBeginBuild_RetrieveByReleaseId);
            }
            if ((this.onEndBuild_RetrieveByReleaseIdDelegate == null)) {
                this.onEndBuild_RetrieveByReleaseIdDelegate = new EndOperationDelegate(this.OnEndBuild_RetrieveByReleaseId);
            }
            if ((this.onBuild_RetrieveByReleaseIdCompletedDelegate == null)) {
                this.onBuild_RetrieveByReleaseIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_RetrieveByReleaseIdCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_RetrieveByReleaseIdDelegate, new object[] {
                        releaseId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndBuild_RetrieveByReleaseIdDelegate, this.onBuild_RetrieveByReleaseIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Build_RetrieveById(int releaseId, int buildId) {
            return base.Channel.Build_RetrieveById(releaseId, buildId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_RetrieveById(int releaseId, int buildId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_RetrieveById(releaseId, buildId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild EndBuild_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndBuild_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginBuild_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            int buildId = ((int)(inValues[1]));
            return this.BeginBuild_RetrieveById(releaseId, buildId, callback, asyncState);
        }
        
        private object[] OnEndBuild_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild retVal = this.EndBuild_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_RetrieveByIdCompleted(object state) {
            if ((this.Build_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_RetrieveByIdCompleted(this, new Build_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_RetrieveByIdAsync(int releaseId, int buildId) {
            this.Build_RetrieveByIdAsync(releaseId, buildId, null);
        }
        
        public void Build_RetrieveByIdAsync(int releaseId, int buildId, object userState) {
            if ((this.onBeginBuild_RetrieveByIdDelegate == null)) {
                this.onBeginBuild_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginBuild_RetrieveById);
            }
            if ((this.onEndBuild_RetrieveByIdDelegate == null)) {
                this.onEndBuild_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndBuild_RetrieveById);
            }
            if ((this.onBuild_RetrieveByIdCompletedDelegate == null)) {
                this.onBuild_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_RetrieveByIdDelegate, new object[] {
                        releaseId,
                        buildId}, this.onEndBuild_RetrieveByIdDelegate, this.onBuild_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild Build_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild) {
            return base.Channel.Build_Create(remoteBuild);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuild_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuild_Create(remoteBuild, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild EndBuild_Create(System.IAsyncResult result) {
            return base.Channel.EndBuild_Create(result);
        }
        
        private System.IAsyncResult OnBeginBuild_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild)(inValues[0]));
            return this.BeginBuild_Create(remoteBuild, callback, asyncState);
        }
        
        private object[] OnEndBuild_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild retVal = this.EndBuild_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuild_CreateCompleted(object state) {
            if ((this.Build_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Build_CreateCompleted(this, new Build_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Build_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild) {
            this.Build_CreateAsync(remoteBuild, null);
        }
        
        public void Build_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteBuild remoteBuild, object userState) {
            if ((this.onBeginBuild_CreateDelegate == null)) {
                this.onBeginBuild_CreateDelegate = new BeginOperationDelegate(this.OnBeginBuild_Create);
            }
            if ((this.onEndBuild_CreateDelegate == null)) {
                this.onEndBuild_CreateDelegate = new EndOperationDelegate(this.OnEndBuild_Create);
            }
            if ((this.onBuild_CreateCompletedDelegate == null)) {
                this.onBuild_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuild_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginBuild_CreateDelegate, new object[] {
                        remoteBuild}, this.onEndBuild_CreateDelegate, this.onBuild_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_Create2(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            return base.Channel.Requirement_Create2(remoteRequirement, parentRequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Create2(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Create2(remoteRequirement, parentRequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_Create2(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Create2(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Create2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(inValues[0]));
            System.Nullable<int> parentRequirementId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRequirement_Create2(remoteRequirement, parentRequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Create2(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement retVal = this.EndRequirement_Create2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_Create2Completed(object state) {
            if ((this.Requirement_Create2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_Create2Completed(this, new Requirement_Create2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_Create2Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId) {
            this.Requirement_Create2Async(remoteRequirement, parentRequirementId, null);
        }
        
        public void Requirement_Create2Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.Nullable<int> parentRequirementId, object userState) {
            if ((this.onBeginRequirement_Create2Delegate == null)) {
                this.onBeginRequirement_Create2Delegate = new BeginOperationDelegate(this.OnBeginRequirement_Create2);
            }
            if ((this.onEndRequirement_Create2Delegate == null)) {
                this.onEndRequirement_Create2Delegate = new EndOperationDelegate(this.OnEndRequirement_Create2);
            }
            if ((this.onRequirement_Create2CompletedDelegate == null)) {
                this.onRequirement_Create2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_Create2Completed);
            }
            base.InvokeAsync(this.onBeginRequirement_Create2Delegate, new object[] {
                        remoteRequirement,
                        parentRequirementId}, this.onEndRequirement_Create2Delegate, this.onRequirement_Create2CompletedDelegate, userState);
        }
        
        public void Requirement_RemoveTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_RemoveTestCoverage(remoteReqTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RemoveTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RemoveTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_RemoveTestCoverage(System.IAsyncResult result) {
            base.Channel.EndRequirement_RemoveTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RemoveTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping)(inValues[0]));
            return this.BeginRequirement_RemoveTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RemoveTestCoverage(System.IAsyncResult result) {
            this.EndRequirement_RemoveTestCoverage(result);
            return null;
        }
        
        private void OnRequirement_RemoveTestCoverageCompleted(object state) {
            if ((this.Requirement_RemoveTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RemoveTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RemoveTestCoverageAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            this.Requirement_RemoveTestCoverageAsync(remoteReqTestCaseMapping, null);
        }
        
        public void Requirement_RemoveTestCoverageAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, object userState) {
            if ((this.onBeginRequirement_RemoveTestCoverageDelegate == null)) {
                this.onBeginRequirement_RemoveTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RemoveTestCoverage);
            }
            if ((this.onEndRequirement_RemoveTestCoverageDelegate == null)) {
                this.onEndRequirement_RemoveTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_RemoveTestCoverage);
            }
            if ((this.onRequirement_RemoveTestCoverageCompletedDelegate == null)) {
                this.onRequirement_RemoveTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RemoveTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RemoveTestCoverageDelegate, new object[] {
                        remoteReqTestCaseMapping}, this.onEndRequirement_RemoveTestCoverageDelegate, this.onRequirement_RemoveTestCoverageCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Requirement_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Requirement_Retrieve(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> EndRequirement_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginRequirement_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> retVal = this.EndRequirement_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveCompleted(object state) {
            if ((this.Requirement_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveCompleted(this, new Requirement_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            this.Requirement_RetrieveAsync(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void Requirement_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginRequirement_RetrieveDelegate == null)) {
                this.onBeginRequirement_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Retrieve);
            }
            if ((this.onEndRequirement_RetrieveDelegate == null)) {
                this.onEndRequirement_RetrieveDelegate = new EndOperationDelegate(this.OnEndRequirement_Retrieve);
            }
            if ((this.onRequirement_RetrieveCompletedDelegate == null)) {
                this.onRequirement_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveDelegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndRequirement_RetrieveDelegate, this.onRequirement_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_RetrieveById(int requirementId) {
            return base.Channel.Requirement_RetrieveById(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveById(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveById(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveById(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement retVal = this.EndRequirement_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveByIdCompleted(object state) {
            if ((this.Requirement_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveByIdCompleted(this, new Requirement_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveByIdAsync(int requirementId) {
            this.Requirement_RetrieveByIdAsync(requirementId, null);
        }
        
        public void Requirement_RetrieveByIdAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveByIdDelegate == null)) {
                this.onBeginRequirement_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveById);
            }
            if ((this.onEndRequirement_RetrieveByIdDelegate == null)) {
                this.onEndRequirement_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveById);
            }
            if ((this.onRequirement_RetrieveByIdCompletedDelegate == null)) {
                this.onRequirement_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveByIdDelegate, new object[] {
                        requirementId}, this.onEndRequirement_RetrieveByIdDelegate, this.onRequirement_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> Requirement_RetrieveForOwner() {
            return base.Channel.Requirement_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> EndRequirement_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRequirement_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveForOwner(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement> retVal = this.EndRequirement_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveForOwnerCompleted(object state) {
            if ((this.Requirement_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveForOwnerCompleted(this, new Requirement_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveForOwnerAsync() {
            this.Requirement_RetrieveForOwnerAsync(null);
        }
        
        public void Requirement_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginRequirement_RetrieveForOwnerDelegate == null)) {
                this.onBeginRequirement_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveForOwner);
            }
            if ((this.onEndRequirement_RetrieveForOwnerDelegate == null)) {
                this.onEndRequirement_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveForOwner);
            }
            if ((this.onRequirement_RetrieveForOwnerCompletedDelegate == null)) {
                this.onRequirement_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveForOwnerDelegate, null, this.onEndRequirement_RetrieveForOwnerDelegate, this.onRequirement_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> Requirement_RetrieveTestCoverage(int requirementId) {
            return base.Channel.Requirement_RetrieveTestCoverage(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveTestCoverage(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveTestCoverage(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> EndRequirement_RetrieveTestCoverage(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveTestCoverage(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveTestCoverage(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping> retVal = this.EndRequirement_RetrieveTestCoverage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveTestCoverageCompleted(object state) {
            if ((this.Requirement_RetrieveTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveTestCoverageCompleted(this, new Requirement_RetrieveTestCoverageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveTestCoverageAsync(int requirementId) {
            this.Requirement_RetrieveTestCoverageAsync(requirementId, null);
        }
        
        public void Requirement_RetrieveTestCoverageAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveTestCoverageDelegate == null)) {
                this.onBeginRequirement_RetrieveTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveTestCoverage);
            }
            if ((this.onEndRequirement_RetrieveTestCoverageDelegate == null)) {
                this.onEndRequirement_RetrieveTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveTestCoverage);
            }
            if ((this.onRequirement_RetrieveTestCoverageCompletedDelegate == null)) {
                this.onRequirement_RetrieveTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveTestCoverageDelegate, new object[] {
                        requirementId}, this.onEndRequirement_RetrieveTestCoverageDelegate, this.onRequirement_RetrieveTestCoverageCompletedDelegate, userState);
        }
        
        public void Requirement_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement) {
            base.Channel.Requirement_Update(remoteRequirement);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Update(remoteRequirement, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Update(System.IAsyncResult result) {
            base.Channel.EndRequirement_Update(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(inValues[0]));
            return this.BeginRequirement_Update(remoteRequirement, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Update(System.IAsyncResult result) {
            this.EndRequirement_Update(result);
            return null;
        }
        
        private void OnRequirement_UpdateCompleted(object state) {
            if ((this.Requirement_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement) {
            this.Requirement_UpdateAsync(remoteRequirement, null);
        }
        
        public void Requirement_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, object userState) {
            if ((this.onBeginRequirement_UpdateDelegate == null)) {
                this.onBeginRequirement_UpdateDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Update);
            }
            if ((this.onEndRequirement_UpdateDelegate == null)) {
                this.onEndRequirement_UpdateDelegate = new EndOperationDelegate(this.OnEndRequirement_Update);
            }
            if ((this.onRequirement_UpdateCompletedDelegate == null)) {
                this.onRequirement_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_UpdateDelegate, new object[] {
                        remoteRequirement}, this.onEndRequirement_UpdateDelegate, this.onRequirement_UpdateCompletedDelegate, userState);
        }
        
        public void Requirement_Delete(int requirementId) {
            base.Channel.Requirement_Delete(requirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Delete(int requirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Delete(requirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Delete(System.IAsyncResult result) {
            base.Channel.EndRequirement_Delete(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            return this.BeginRequirement_Delete(requirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Delete(System.IAsyncResult result) {
            this.EndRequirement_Delete(result);
            return null;
        }
        
        private void OnRequirement_DeleteCompleted(object state) {
            if ((this.Requirement_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_DeleteAsync(int requirementId) {
            this.Requirement_DeleteAsync(requirementId, null);
        }
        
        public void Requirement_DeleteAsync(int requirementId, object userState) {
            if ((this.onBeginRequirement_DeleteDelegate == null)) {
                this.onBeginRequirement_DeleteDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Delete);
            }
            if ((this.onEndRequirement_DeleteDelegate == null)) {
                this.onEndRequirement_DeleteDelegate = new EndOperationDelegate(this.OnEndRequirement_Delete);
            }
            if ((this.onRequirement_DeleteCompletedDelegate == null)) {
                this.onRequirement_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_DeleteDelegate, new object[] {
                        requirementId}, this.onEndRequirement_DeleteDelegate, this.onRequirement_DeleteCompletedDelegate, userState);
        }
        
        public void Requirement_Move(int requirementId, System.Nullable<int> destinationRequirementId) {
            base.Channel.Requirement_Move(requirementId, destinationRequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Move(int requirementId, System.Nullable<int> destinationRequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Move(requirementId, destinationRequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_Move(System.IAsyncResult result) {
            base.Channel.EndRequirement_Move(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int requirementId = ((int)(inValues[0]));
            System.Nullable<int> destinationRequirementId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRequirement_Move(requirementId, destinationRequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Move(System.IAsyncResult result) {
            this.EndRequirement_Move(result);
            return null;
        }
        
        private void OnRequirement_MoveCompleted(object state) {
            if ((this.Requirement_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_MoveAsync(int requirementId, System.Nullable<int> destinationRequirementId) {
            this.Requirement_MoveAsync(requirementId, destinationRequirementId, null);
        }
        
        public void Requirement_MoveAsync(int requirementId, System.Nullable<int> destinationRequirementId, object userState) {
            if ((this.onBeginRequirement_MoveDelegate == null)) {
                this.onBeginRequirement_MoveDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Move);
            }
            if ((this.onEndRequirement_MoveDelegate == null)) {
                this.onEndRequirement_MoveDelegate = new EndOperationDelegate(this.OnEndRequirement_Move);
            }
            if ((this.onRequirement_MoveCompletedDelegate == null)) {
                this.onRequirement_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_MoveDelegate, new object[] {
                        requirementId,
                        destinationRequirementId}, this.onEndRequirement_MoveDelegate, this.onRequirement_MoveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Requirement_RetrieveComments(int RequirementId) {
            return base.Channel.Requirement_RetrieveComments(RequirementId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_RetrieveComments(int RequirementId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_RetrieveComments(RequirementId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndRequirement_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndRequirement_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int RequirementId = ((int)(inValues[0]));
            return this.BeginRequirement_RetrieveComments(RequirementId, callback, asyncState);
        }
        
        private object[] OnEndRequirement_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndRequirement_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_RetrieveCommentsCompleted(object state) {
            if ((this.Requirement_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_RetrieveCommentsCompleted(this, new Requirement_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_RetrieveCommentsAsync(int RequirementId) {
            this.Requirement_RetrieveCommentsAsync(RequirementId, null);
        }
        
        public void Requirement_RetrieveCommentsAsync(int RequirementId, object userState) {
            if ((this.onBeginRequirement_RetrieveCommentsDelegate == null)) {
                this.onBeginRequirement_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginRequirement_RetrieveComments);
            }
            if ((this.onEndRequirement_RetrieveCommentsDelegate == null)) {
                this.onEndRequirement_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndRequirement_RetrieveComments);
            }
            if ((this.onRequirement_RetrieveCommentsCompletedDelegate == null)) {
                this.onRequirement_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_RetrieveCommentsDelegate, new object[] {
                        RequirementId}, this.onEndRequirement_RetrieveCommentsDelegate, this.onRequirement_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Requirement_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            return base.Channel.Requirement_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndRequirement_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndRequirement_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(inValues[0]));
            return this.BeginRequirement_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndRequirement_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment retVal = this.EndRequirement_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_CreateCommentCompleted(object state) {
            if ((this.Requirement_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_CreateCommentCompleted(this, new Requirement_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            this.Requirement_CreateCommentAsync(remoteComment, null);
        }
        
        public void Requirement_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, object userState) {
            if ((this.onBeginRequirement_CreateCommentDelegate == null)) {
                this.onBeginRequirement_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginRequirement_CreateComment);
            }
            if ((this.onEndRequirement_CreateCommentDelegate == null)) {
                this.onEndRequirement_CreateCommentDelegate = new EndOperationDelegate(this.OnEndRequirement_CreateComment);
            }
            if ((this.onRequirement_CreateCommentCompletedDelegate == null)) {
                this.onRequirement_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndRequirement_CreateCommentDelegate, this.onRequirement_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion System_GetProductVersion() {
            return base.Channel.System_GetProductVersion();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProductVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProductVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion EndSystem_GetProductVersion(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProductVersion(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProductVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetProductVersion(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProductVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteVersion retVal = this.EndSystem_GetProductVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProductVersionCompleted(object state) {
            if ((this.System_GetProductVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProductVersionCompleted(this, new System_GetProductVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProductVersionAsync() {
            this.System_GetProductVersionAsync(null);
        }
        
        public void System_GetProductVersionAsync(object userState) {
            if ((this.onBeginSystem_GetProductVersionDelegate == null)) {
                this.onBeginSystem_GetProductVersionDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProductVersion);
            }
            if ((this.onEndSystem_GetProductVersionDelegate == null)) {
                this.onEndSystem_GetProductVersionDelegate = new EndOperationDelegate(this.OnEndSystem_GetProductVersion);
            }
            if ((this.onSystem_GetProductVersionCompletedDelegate == null)) {
                this.onSystem_GetProductVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProductVersionCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProductVersionDelegate, null, this.onEndSystem_GetProductVersionDelegate, this.onSystem_GetProductVersionCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> System_GetSettings() {
            return base.Channel.System_GetSettings();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetSettings(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetSettings(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> EndSystem_GetSettings(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetSettings(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetSettings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSystem_GetSettings(callback, asyncState);
        }
        
        private object[] OnEndSystem_GetSettings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSetting> retVal = this.EndSystem_GetSettings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetSettingsCompleted(object state) {
            if ((this.System_GetSettingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetSettingsCompleted(this, new System_GetSettingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetSettingsAsync() {
            this.System_GetSettingsAsync(null);
        }
        
        public void System_GetSettingsAsync(object userState) {
            if ((this.onBeginSystem_GetSettingsDelegate == null)) {
                this.onBeginSystem_GetSettingsDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetSettings);
            }
            if ((this.onEndSystem_GetSettingsDelegate == null)) {
                this.onEndSystem_GetSettingsDelegate = new EndOperationDelegate(this.OnEndSystem_GetSettings);
            }
            if ((this.onSystem_GetSettingsCompletedDelegate == null)) {
                this.onSystem_GetSettingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetSettingsCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetSettingsDelegate, null, this.onEndSystem_GetSettingsDelegate, this.onSystem_GetSettingsCompletedDelegate, userState);
        }
        
        public string System_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName) {
            return base.Channel.System_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetArtifactUrl(int navigationLinkId, int projectId, int artifactId, string tabName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndSystem_GetArtifactUrl(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetArtifactUrl(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetArtifactUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int navigationLinkId = ((int)(inValues[0]));
            int projectId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            string tabName = ((string)(inValues[3]));
            return this.BeginSystem_GetArtifactUrl(navigationLinkId, projectId, artifactId, tabName, callback, asyncState);
        }
        
        private object[] OnEndSystem_GetArtifactUrl(System.IAsyncResult result) {
            string retVal = this.EndSystem_GetArtifactUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetArtifactUrlCompleted(object state) {
            if ((this.System_GetArtifactUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetArtifactUrlCompleted(this, new System_GetArtifactUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName) {
            this.System_GetArtifactUrlAsync(navigationLinkId, projectId, artifactId, tabName, null);
        }
        
        public void System_GetArtifactUrlAsync(int navigationLinkId, int projectId, int artifactId, string tabName, object userState) {
            if ((this.onBeginSystem_GetArtifactUrlDelegate == null)) {
                this.onBeginSystem_GetArtifactUrlDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetArtifactUrl);
            }
            if ((this.onEndSystem_GetArtifactUrlDelegate == null)) {
                this.onEndSystem_GetArtifactUrlDelegate = new EndOperationDelegate(this.OnEndSystem_GetArtifactUrl);
            }
            if ((this.onSystem_GetArtifactUrlCompletedDelegate == null)) {
                this.onSystem_GetArtifactUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetArtifactUrlCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetArtifactUrlDelegate, new object[] {
                        navigationLinkId,
                        projectId,
                        artifactId,
                        tabName}, this.onEndSystem_GetArtifactUrlDelegate, this.onSystem_GetArtifactUrlCompletedDelegate, userState);
        }
        
        public int System_GetProjectIdForArtifact(int artifactTypeId, int artifactId) {
            return base.Channel.System_GetProjectIdForArtifact(artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSystem_GetProjectIdForArtifact(int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSystem_GetProjectIdForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndSystem_GetProjectIdForArtifact(System.IAsyncResult result) {
            return base.Channel.EndSystem_GetProjectIdForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginSystem_GetProjectIdForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            return this.BeginSystem_GetProjectIdForArtifact(artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndSystem_GetProjectIdForArtifact(System.IAsyncResult result) {
            int retVal = this.EndSystem_GetProjectIdForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSystem_GetProjectIdForArtifactCompleted(object state) {
            if ((this.System_GetProjectIdForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.System_GetProjectIdForArtifactCompleted(this, new System_GetProjectIdForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void System_GetProjectIdForArtifactAsync(int artifactTypeId, int artifactId) {
            this.System_GetProjectIdForArtifactAsync(artifactTypeId, artifactId, null);
        }
        
        public void System_GetProjectIdForArtifactAsync(int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginSystem_GetProjectIdForArtifactDelegate == null)) {
                this.onBeginSystem_GetProjectIdForArtifactDelegate = new BeginOperationDelegate(this.OnBeginSystem_GetProjectIdForArtifact);
            }
            if ((this.onEndSystem_GetProjectIdForArtifactDelegate == null)) {
                this.onEndSystem_GetProjectIdForArtifactDelegate = new EndOperationDelegate(this.OnEndSystem_GetProjectIdForArtifact);
            }
            if ((this.onSystem_GetProjectIdForArtifactCompletedDelegate == null)) {
                this.onSystem_GetProjectIdForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSystem_GetProjectIdForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginSystem_GetProjectIdForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId}, this.onEndSystem_GetProjectIdForArtifactDelegate, this.onSystem_GetProjectIdForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Task_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask) {
            return base.Channel.Task_Create(remoteTask);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Create(remoteTask, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask EndTask_Create(System.IAsyncResult result) {
            return base.Channel.EndTask_Create(result);
        }
        
        private System.IAsyncResult OnBeginTask_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask)(inValues[0]));
            return this.BeginTask_Create(remoteTask, callback, asyncState);
        }
        
        private object[] OnEndTask_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask retVal = this.EndTask_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CreateCompleted(object state) {
            if ((this.Task_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CreateCompleted(this, new Task_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask) {
            this.Task_CreateAsync(remoteTask, null);
        }
        
        public void Task_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, object userState) {
            if ((this.onBeginTask_CreateDelegate == null)) {
                this.onBeginTask_CreateDelegate = new BeginOperationDelegate(this.OnBeginTask_Create);
            }
            if ((this.onEndTask_CreateDelegate == null)) {
                this.onEndTask_CreateDelegate = new EndOperationDelegate(this.OnEndTask_Create);
            }
            if ((this.onTask_CreateCompletedDelegate == null)) {
                this.onTask_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CreateDelegate, new object[] {
                        remoteTask}, this.onEndTask_CreateDelegate, this.onTask_CreateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Task_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTask_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTask_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTask_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTask_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> retVal = this.EndTask_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveCompleted(object state) {
            if ((this.Task_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveCompleted(this, new Task_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Task_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Task_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTask_RetrieveDelegate == null)) {
                this.onBeginTask_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTask_Retrieve);
            }
            if ((this.onEndTask_RetrieveDelegate == null)) {
                this.onEndTask_RetrieveDelegate = new EndOperationDelegate(this.OnEndTask_Retrieve);
            }
            if ((this.onTask_RetrieveCompletedDelegate == null)) {
                this.onTask_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTask_RetrieveDelegate, this.onTask_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask Task_RetrieveById(int taskId) {
            return base.Channel.Task_RetrieveById(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveById(int taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveById(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask EndTask_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskId = ((int)(inValues[0]));
            return this.BeginTask_RetrieveById(taskId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask retVal = this.EndTask_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveByIdCompleted(object state) {
            if ((this.Task_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveByIdCompleted(this, new Task_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveByIdAsync(int taskId) {
            this.Task_RetrieveByIdAsync(taskId, null);
        }
        
        public void Task_RetrieveByIdAsync(int taskId, object userState) {
            if ((this.onBeginTask_RetrieveByIdDelegate == null)) {
                this.onBeginTask_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveById);
            }
            if ((this.onEndTask_RetrieveByIdDelegate == null)) {
                this.onEndTask_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveById);
            }
            if ((this.onTask_RetrieveByIdCompletedDelegate == null)) {
                this.onTask_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveByIdDelegate, new object[] {
                        taskId}, this.onEndTask_RetrieveByIdDelegate, this.onTask_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_RetrieveForOwner() {
            return base.Channel.Task_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTask_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveForOwner(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> retVal = this.EndTask_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveForOwnerCompleted(object state) {
            if ((this.Task_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveForOwnerCompleted(this, new Task_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveForOwnerAsync() {
            this.Task_RetrieveForOwnerAsync(null);
        }
        
        public void Task_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTask_RetrieveForOwnerDelegate == null)) {
                this.onBeginTask_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveForOwner);
            }
            if ((this.onEndTask_RetrieveForOwnerDelegate == null)) {
                this.onEndTask_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveForOwner);
            }
            if ((this.onTask_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTask_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveForOwnerDelegate, null, this.onEndTask_RetrieveForOwnerDelegate, this.onTask_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> Task_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Task_RetrieveNew(creationDate, startRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> EndTask_RetrieveNew(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveNew(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime creationDate = ((System.DateTime)(inValues[0]));
            int startRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginTask_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveNew(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask> retVal = this.EndTask_RetrieveNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveNewCompleted(object state) {
            if ((this.Task_RetrieveNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveNewCompleted(this, new Task_RetrieveNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows) {
            this.Task_RetrieveNewAsync(creationDate, startRow, numberOfRows, null);
        }
        
        public void Task_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows, object userState) {
            if ((this.onBeginTask_RetrieveNewDelegate == null)) {
                this.onBeginTask_RetrieveNewDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveNew);
            }
            if ((this.onEndTask_RetrieveNewDelegate == null)) {
                this.onEndTask_RetrieveNewDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveNew);
            }
            if ((this.onTask_RetrieveNewCompletedDelegate == null)) {
                this.onTask_RetrieveNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveNewCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveNewDelegate, new object[] {
                        creationDate,
                        startRow,
                        numberOfRows}, this.onEndTask_RetrieveNewDelegate, this.onTask_RetrieveNewCompletedDelegate, userState);
        }
        
        public void Task_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask) {
            base.Channel.Task_Update(remoteTask);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Update(remoteTask, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_Update(System.IAsyncResult result) {
            base.Channel.EndTask_Update(result);
        }
        
        private System.IAsyncResult OnBeginTask_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask)(inValues[0]));
            return this.BeginTask_Update(remoteTask, callback, asyncState);
        }
        
        private object[] OnEndTask_Update(System.IAsyncResult result) {
            this.EndTask_Update(result);
            return null;
        }
        
        private void OnTask_UpdateCompleted(object state) {
            if ((this.Task_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask) {
            this.Task_UpdateAsync(remoteTask, null);
        }
        
        public void Task_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTask remoteTask, object userState) {
            if ((this.onBeginTask_UpdateDelegate == null)) {
                this.onBeginTask_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTask_Update);
            }
            if ((this.onEndTask_UpdateDelegate == null)) {
                this.onEndTask_UpdateDelegate = new EndOperationDelegate(this.OnEndTask_Update);
            }
            if ((this.onTask_UpdateCompletedDelegate == null)) {
                this.onTask_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTask_UpdateDelegate, new object[] {
                        remoteTask}, this.onEndTask_UpdateDelegate, this.onTask_UpdateCompletedDelegate, userState);
        }
        
        public long Task_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.Task_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTask_Count(System.IAsyncResult result) {
            return base.Channel.EndTask_Count(result);
        }
        
        private System.IAsyncResult OnBeginTask_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginTask_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTask_Count(System.IAsyncResult result) {
            long retVal = this.EndTask_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CountCompleted(object state) {
            if ((this.Task_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CountCompleted(this, new Task_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.Task_CountAsync(remoteFilters, null);
        }
        
        public void Task_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginTask_CountDelegate == null)) {
                this.onBeginTask_CountDelegate = new BeginOperationDelegate(this.OnBeginTask_Count);
            }
            if ((this.onEndTask_CountDelegate == null)) {
                this.onEndTask_CountDelegate = new EndOperationDelegate(this.OnEndTask_Count);
            }
            if ((this.onTask_CountCompletedDelegate == null)) {
                this.onTask_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTask_CountDelegate, this.onTask_CountCompletedDelegate, userState);
        }
        
        public void Task_Delete(int taskId) {
            base.Channel.Task_Delete(taskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_Delete(int taskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_Delete(taskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTask_Delete(System.IAsyncResult result) {
            base.Channel.EndTask_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTask_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int taskId = ((int)(inValues[0]));
            return this.BeginTask_Delete(taskId, callback, asyncState);
        }
        
        private object[] OnEndTask_Delete(System.IAsyncResult result) {
            this.EndTask_Delete(result);
            return null;
        }
        
        private void OnTask_DeleteCompleted(object state) {
            if ((this.Task_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_DeleteAsync(int taskId) {
            this.Task_DeleteAsync(taskId, null);
        }
        
        public void Task_DeleteAsync(int taskId, object userState) {
            if ((this.onBeginTask_DeleteDelegate == null)) {
                this.onBeginTask_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTask_Delete);
            }
            if ((this.onEndTask_DeleteDelegate == null)) {
                this.onEndTask_DeleteDelegate = new EndOperationDelegate(this.OnEndTask_Delete);
            }
            if ((this.onTask_DeleteCompletedDelegate == null)) {
                this.onTask_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTask_DeleteDelegate, new object[] {
                        taskId}, this.onEndTask_DeleteDelegate, this.onTask_DeleteCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Task_RetrieveComments(int TaskId) {
            return base.Channel.Task_RetrieveComments(TaskId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_RetrieveComments(int TaskId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_RetrieveComments(TaskId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTask_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTask_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTask_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TaskId = ((int)(inValues[0]));
            return this.BeginTask_RetrieveComments(TaskId, callback, asyncState);
        }
        
        private object[] OnEndTask_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndTask_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_RetrieveCommentsCompleted(object state) {
            if ((this.Task_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_RetrieveCommentsCompleted(this, new Task_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_RetrieveCommentsAsync(int TaskId) {
            this.Task_RetrieveCommentsAsync(TaskId, null);
        }
        
        public void Task_RetrieveCommentsAsync(int TaskId, object userState) {
            if ((this.onBeginTask_RetrieveCommentsDelegate == null)) {
                this.onBeginTask_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTask_RetrieveComments);
            }
            if ((this.onEndTask_RetrieveCommentsDelegate == null)) {
                this.onEndTask_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTask_RetrieveComments);
            }
            if ((this.onTask_RetrieveCommentsCompletedDelegate == null)) {
                this.onTask_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTask_RetrieveCommentsDelegate, new object[] {
                        TaskId}, this.onEndTask_RetrieveCommentsDelegate, this.onTask_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Task_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            return base.Channel.Task_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTask_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTask_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTask_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTask_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTask_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(inValues[0]));
            return this.BeginTask_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTask_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment retVal = this.EndTask_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTask_CreateCommentCompleted(object state) {
            if ((this.Task_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Task_CreateCommentCompleted(this, new Task_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Task_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            this.Task_CreateCommentAsync(remoteComment, null);
        }
        
        public void Task_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTask_CreateCommentDelegate == null)) {
                this.onBeginTask_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTask_CreateComment);
            }
            if ((this.onEndTask_CreateCommentDelegate == null)) {
                this.onEndTask_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTask_CreateComment);
            }
            if ((this.onTask_CreateCommentCompletedDelegate == null)) {
                this.onTask_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTask_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTask_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTask_CreateCommentDelegate, this.onTask_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter TestCase_AddParameter(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter) {
            return base.Channel.TestCase_AddParameter(remoteTestCaseParameter);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddParameter(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddParameter(remoteTestCaseParameter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter EndTestCase_AddParameter(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddParameter(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddParameter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter)(inValues[0]));
            return this.BeginTestCase_AddParameter(remoteTestCaseParameter, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddParameter(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter retVal = this.EndTestCase_AddParameter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddParameterCompleted(object state) {
            if ((this.TestCase_AddParameterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddParameterCompleted(this, new TestCase_AddParameterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddParameterAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter) {
            this.TestCase_AddParameterAsync(remoteTestCaseParameter, null);
        }
        
        public void TestCase_AddParameterAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCaseParameter remoteTestCaseParameter, object userState) {
            if ((this.onBeginTestCase_AddParameterDelegate == null)) {
                this.onBeginTestCase_AddParameterDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddParameter);
            }
            if ((this.onEndTestCase_AddParameterDelegate == null)) {
                this.onEndTestCase_AddParameterDelegate = new EndOperationDelegate(this.OnEndTestCase_AddParameter);
            }
            if ((this.onTestCase_AddParameterCompletedDelegate == null)) {
                this.onTestCase_AddParameterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddParameterCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddParameterDelegate, new object[] {
                        remoteTestCaseParameter}, this.onEndTestCase_AddParameterDelegate, this.onTestCase_AddParameterCompletedDelegate, userState);
        }
        
        public long TestCase_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.TestCase_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestCase_Count(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginTestCase_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Count(System.IAsyncResult result) {
            long retVal = this.EndTestCase_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CountCompleted(object state) {
            if ((this.TestCase_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CountCompleted(this, new TestCase_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.TestCase_CountAsync(remoteFilters, null);
        }
        
        public void TestCase_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginTestCase_CountDelegate == null)) {
                this.onBeginTestCase_CountDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Count);
            }
            if ((this.onEndTestCase_CountDelegate == null)) {
                this.onEndTestCase_CountDelegate = new EndOperationDelegate(this.OnEndTestCase_Count);
            }
            if ((this.onTestCase_CountCompletedDelegate == null)) {
                this.onTestCase_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTestCase_CountDelegate, this.onTestCase_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId) {
            return base.Channel.TestCase_Create(remoteTestCase, parentTestFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Create(remoteTestCase, parentTestFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_Create(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Create(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(inValues[0]));
            System.Nullable<int> parentTestFolderId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_Create(remoteTestCase, parentTestFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase retVal = this.EndTestCase_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateCompleted(object state) {
            if ((this.TestCase_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateCompleted(this, new TestCase_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId) {
            this.TestCase_CreateAsync(remoteTestCase, parentTestFolderId, null);
        }
        
        public void TestCase_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, object userState) {
            if ((this.onBeginTestCase_CreateDelegate == null)) {
                this.onBeginTestCase_CreateDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Create);
            }
            if ((this.onEndTestCase_CreateDelegate == null)) {
                this.onEndTestCase_CreateDelegate = new EndOperationDelegate(this.OnEndTestCase_Create);
            }
            if ((this.onTestCase_CreateCompletedDelegate == null)) {
                this.onTestCase_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateDelegate, new object[] {
                        remoteTestCase,
                        parentTestFolderId}, this.onEndTestCase_CreateDelegate, this.onTestCase_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId) {
            return base.Channel.TestCase_CreateFolder(remoteTestCase, parentTestFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateFolder(remoteTestCase, parentTestFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_CreateFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(inValues[0]));
            System.Nullable<int> parentTestFolderId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_CreateFolder(remoteTestCase, parentTestFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase retVal = this.EndTestCase_CreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateFolderCompleted(object state) {
            if ((this.TestCase_CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateFolderCompleted(this, new TestCase_CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId) {
            this.TestCase_CreateFolderAsync(remoteTestCase, parentTestFolderId, null);
        }
        
        public void TestCase_CreateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.Nullable<int> parentTestFolderId, object userState) {
            if ((this.onBeginTestCase_CreateFolderDelegate == null)) {
                this.onBeginTestCase_CreateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateFolder);
            }
            if ((this.onEndTestCase_CreateFolderDelegate == null)) {
                this.onEndTestCase_CreateFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateFolder);
            }
            if ((this.onTestCase_CreateFolderCompletedDelegate == null)) {
                this.onTestCase_CreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateFolderDelegate, new object[] {
                        remoteTestCase,
                        parentTestFolderId}, this.onEndTestCase_CreateFolderDelegate, this.onTestCase_CreateFolderCompletedDelegate, userState);
        }
        
        public string TestCase_CreateParameterToken(string parameterName) {
            return base.Channel.TestCase_CreateParameterToken(parameterName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateParameterToken(string parameterName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateParameterToken(parameterName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTestCase_CreateParameterToken(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateParameterToken(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateParameterToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string parameterName = ((string)(inValues[0]));
            return this.BeginTestCase_CreateParameterToken(parameterName, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateParameterToken(System.IAsyncResult result) {
            string retVal = this.EndTestCase_CreateParameterToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateParameterTokenCompleted(object state) {
            if ((this.TestCase_CreateParameterTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateParameterTokenCompleted(this, new TestCase_CreateParameterTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateParameterTokenAsync(string parameterName) {
            this.TestCase_CreateParameterTokenAsync(parameterName, null);
        }
        
        public void TestCase_CreateParameterTokenAsync(string parameterName, object userState) {
            if ((this.onBeginTestCase_CreateParameterTokenDelegate == null)) {
                this.onBeginTestCase_CreateParameterTokenDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateParameterToken);
            }
            if ((this.onEndTestCase_CreateParameterTokenDelegate == null)) {
                this.onEndTestCase_CreateParameterTokenDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateParameterToken);
            }
            if ((this.onTestCase_CreateParameterTokenCompletedDelegate == null)) {
                this.onTestCase_CreateParameterTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateParameterTokenCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateParameterTokenDelegate, new object[] {
                        parameterName}, this.onEndTestCase_CreateParameterTokenDelegate, this.onTestCase_CreateParameterTokenCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.TestCase_Retrieve(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestCase_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginTestCase_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> retVal = this.EndTestCase_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveCompleted(object state) {
            if ((this.TestCase_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveCompleted(this, new TestCase_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            this.TestCase_RetrieveAsync(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void TestCase_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestCase_RetrieveDelegate == null)) {
                this.onBeginTestCase_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Retrieve);
            }
            if ((this.onEndTestCase_RetrieveDelegate == null)) {
                this.onEndTestCase_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestCase_Retrieve);
            }
            if ((this.onTestCase_RetrieveCompletedDelegate == null)) {
                this.onTestCase_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveDelegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndTestCase_RetrieveDelegate, this.onTestCase_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase TestCase_RetrieveById(int testCaseId) {
            return base.Channel.TestCase_RetrieveById(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveById(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveById(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase EndTestCase_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveById(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase retVal = this.EndTestCase_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByIdCompleted(object state) {
            if ((this.TestCase_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByIdCompleted(this, new TestCase_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByIdAsync(int testCaseId) {
            this.TestCase_RetrieveByIdAsync(testCaseId, null);
        }
        
        public void TestCase_RetrieveByIdAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveByIdDelegate == null)) {
                this.onBeginTestCase_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveById);
            }
            if ((this.onEndTestCase_RetrieveByIdDelegate == null)) {
                this.onEndTestCase_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveById);
            }
            if ((this.onTestCase_RetrieveByIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByIdDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_RetrieveByIdDelegate, this.onTestCase_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.TestCase_RetrieveByReleaseId(releaseId, remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveByReleaseId(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveByReleaseId(releaseId, remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByReleaseId(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveByReleaseId(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveByReleaseId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestCase_RetrieveByReleaseId(releaseId, remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveByReleaseId(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> retVal = this.EndTestCase_RetrieveByReleaseId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByReleaseIdCompleted(object state) {
            if ((this.TestCase_RetrieveByReleaseIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByReleaseIdCompleted(this, new TestCase_RetrieveByReleaseIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByReleaseIdAsync(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            this.TestCase_RetrieveByReleaseIdAsync(releaseId, remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void TestCase_RetrieveByReleaseIdAsync(int releaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestCase_RetrieveByReleaseIdDelegate == null)) {
                this.onBeginTestCase_RetrieveByReleaseIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveByReleaseId);
            }
            if ((this.onEndTestCase_RetrieveByReleaseIdDelegate == null)) {
                this.onEndTestCase_RetrieveByReleaseIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveByReleaseId);
            }
            if ((this.onTestCase_RetrieveByReleaseIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveByReleaseIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByReleaseIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByReleaseIdDelegate, new object[] {
                        releaseId,
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndTestCase_RetrieveByReleaseIdDelegate, this.onTestCase_RetrieveByReleaseIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByTestSetId(int testSetId) {
            return base.Channel.TestCase_RetrieveByTestSetId(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveByTestSetId(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveByTestSetId(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByTestSetId(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveByTestSetId(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveByTestSetId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveByTestSetId(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveByTestSetId(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> retVal = this.EndTestCase_RetrieveByTestSetId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByTestSetIdCompleted(object state) {
            if ((this.TestCase_RetrieveByTestSetIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByTestSetIdCompleted(this, new TestCase_RetrieveByTestSetIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByTestSetIdAsync(int testSetId) {
            this.TestCase_RetrieveByTestSetIdAsync(testSetId, null);
        }
        
        public void TestCase_RetrieveByTestSetIdAsync(int testSetId, object userState) {
            if ((this.onBeginTestCase_RetrieveByTestSetIdDelegate == null)) {
                this.onBeginTestCase_RetrieveByTestSetIdDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveByTestSetId);
            }
            if ((this.onEndTestCase_RetrieveByTestSetIdDelegate == null)) {
                this.onEndTestCase_RetrieveByTestSetIdDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveByTestSetId);
            }
            if ((this.onTestCase_RetrieveByTestSetIdCompletedDelegate == null)) {
                this.onTestCase_RetrieveByTestSetIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByTestSetIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByTestSetIdDelegate, new object[] {
                        testSetId}, this.onEndTestCase_RetrieveByTestSetIdDelegate, this.onTestCase_RetrieveByTestSetIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveForOwner() {
            return base.Channel.TestCase_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestCase_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveForOwner(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> retVal = this.EndTestCase_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveForOwnerCompleted(object state) {
            if ((this.TestCase_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveForOwnerCompleted(this, new TestCase_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveForOwnerAsync() {
            this.TestCase_RetrieveForOwnerAsync(null);
        }
        
        public void TestCase_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTestCase_RetrieveForOwnerDelegate == null)) {
                this.onBeginTestCase_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveForOwner);
            }
            if ((this.onEndTestCase_RetrieveForOwnerDelegate == null)) {
                this.onEndTestCase_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveForOwner);
            }
            if ((this.onTestCase_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTestCase_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveForOwnerDelegate, null, this.onEndTestCase_RetrieveForOwnerDelegate, this.onTestCase_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> TestCase_RetrieveByFolder(int testCaseFolderId) {
            return base.Channel.TestCase_RetrieveByFolder(testCaseFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveByFolder(int testCaseFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveByFolder(testCaseFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> EndTestCase_RetrieveByFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveByFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveByFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseFolderId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveByFolder(testCaseFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveByFolder(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase> retVal = this.EndTestCase_RetrieveByFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveByFolderCompleted(object state) {
            if ((this.TestCase_RetrieveByFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveByFolderCompleted(this, new TestCase_RetrieveByFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveByFolderAsync(int testCaseFolderId) {
            this.TestCase_RetrieveByFolderAsync(testCaseFolderId, null);
        }
        
        public void TestCase_RetrieveByFolderAsync(int testCaseFolderId, object userState) {
            if ((this.onBeginTestCase_RetrieveByFolderDelegate == null)) {
                this.onBeginTestCase_RetrieveByFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveByFolder);
            }
            if ((this.onEndTestCase_RetrieveByFolderDelegate == null)) {
                this.onEndTestCase_RetrieveByFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveByFolder);
            }
            if ((this.onTestCase_RetrieveByFolderCompletedDelegate == null)) {
                this.onTestCase_RetrieveByFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveByFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveByFolderDelegate, new object[] {
                        testCaseFolderId}, this.onEndTestCase_RetrieveByFolderDelegate, this.onTestCase_RetrieveByFolderCompletedDelegate, userState);
        }
        
        public void TestCase_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase) {
            base.Channel.TestCase_Update(remoteTestCase);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Update(remoteTestCase, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Update(System.IAsyncResult result) {
            base.Channel.EndTestCase_Update(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase)(inValues[0]));
            return this.BeginTestCase_Update(remoteTestCase, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Update(System.IAsyncResult result) {
            this.EndTestCase_Update(result);
            return null;
        }
        
        private void OnTestCase_UpdateCompleted(object state) {
            if ((this.TestCase_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase) {
            this.TestCase_UpdateAsync(remoteTestCase, null);
        }
        
        public void TestCase_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestCase remoteTestCase, object userState) {
            if ((this.onBeginTestCase_UpdateDelegate == null)) {
                this.onBeginTestCase_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Update);
            }
            if ((this.onEndTestCase_UpdateDelegate == null)) {
                this.onEndTestCase_UpdateDelegate = new EndOperationDelegate(this.OnEndTestCase_Update);
            }
            if ((this.onTestCase_UpdateCompletedDelegate == null)) {
                this.onTestCase_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_UpdateDelegate, new object[] {
                        remoteTestCase}, this.onEndTestCase_UpdateDelegate, this.onTestCase_UpdateCompletedDelegate, userState);
        }
        
        public void TestCase_Delete(int testCaseId) {
            base.Channel.TestCase_Delete(testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Delete(int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Delete(testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Delete(System.IAsyncResult result) {
            base.Channel.EndTestCase_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_Delete(testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Delete(System.IAsyncResult result) {
            this.EndTestCase_Delete(result);
            return null;
        }
        
        private void OnTestCase_DeleteCompleted(object state) {
            if ((this.TestCase_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_DeleteAsync(int testCaseId) {
            this.TestCase_DeleteAsync(testCaseId, null);
        }
        
        public void TestCase_DeleteAsync(int testCaseId, object userState) {
            if ((this.onBeginTestCase_DeleteDelegate == null)) {
                this.onBeginTestCase_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Delete);
            }
            if ((this.onEndTestCase_DeleteDelegate == null)) {
                this.onEndTestCase_DeleteDelegate = new EndOperationDelegate(this.OnEndTestCase_Delete);
            }
            if ((this.onTestCase_DeleteCompletedDelegate == null)) {
                this.onTestCase_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_DeleteDelegate, new object[] {
                        testCaseId}, this.onEndTestCase_DeleteDelegate, this.onTestCase_DeleteCompletedDelegate, userState);
        }
        
        public void TestCase_Move(int testCaseId, System.Nullable<int> destinationTestCaseId) {
            base.Channel.TestCase_Move(testCaseId, destinationTestCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_Move(int testCaseId, System.Nullable<int> destinationTestCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_Move(testCaseId, destinationTestCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_Move(System.IAsyncResult result) {
            base.Channel.EndTestCase_Move(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            System.Nullable<int> destinationTestCaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestCase_Move(testCaseId, destinationTestCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_Move(System.IAsyncResult result) {
            this.EndTestCase_Move(result);
            return null;
        }
        
        private void OnTestCase_MoveCompleted(object state) {
            if ((this.TestCase_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_MoveAsync(int testCaseId, System.Nullable<int> destinationTestCaseId) {
            this.TestCase_MoveAsync(testCaseId, destinationTestCaseId, null);
        }
        
        public void TestCase_MoveAsync(int testCaseId, System.Nullable<int> destinationTestCaseId, object userState) {
            if ((this.onBeginTestCase_MoveDelegate == null)) {
                this.onBeginTestCase_MoveDelegate = new BeginOperationDelegate(this.OnBeginTestCase_Move);
            }
            if ((this.onEndTestCase_MoveDelegate == null)) {
                this.onEndTestCase_MoveDelegate = new EndOperationDelegate(this.OnEndTestCase_Move);
            }
            if ((this.onTestCase_MoveCompletedDelegate == null)) {
                this.onTestCase_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_MoveDelegate, new object[] {
                        testCaseId,
                        destinationTestCaseId}, this.onEndTestCase_MoveDelegate, this.onTestCase_MoveCompletedDelegate, userState);
        }
        
        public void TestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            base.Channel.TestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_MoveStep(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_MoveStep(System.IAsyncResult result) {
            base.Channel.EndTestCase_MoveStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_MoveStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int sourceTestStepId = ((int)(inValues[1]));
            System.Nullable<int> destinationTestStepId = ((System.Nullable<int>)(inValues[2]));
            return this.BeginTestCase_MoveStep(testCaseId, sourceTestStepId, destinationTestStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_MoveStep(System.IAsyncResult result) {
            this.EndTestCase_MoveStep(result);
            return null;
        }
        
        private void OnTestCase_MoveStepCompleted(object state) {
            if ((this.TestCase_MoveStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_MoveStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_MoveStepAsync(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId) {
            this.TestCase_MoveStepAsync(testCaseId, sourceTestStepId, destinationTestStepId, null);
        }
        
        public void TestCase_MoveStepAsync(int testCaseId, int sourceTestStepId, System.Nullable<int> destinationTestStepId, object userState) {
            if ((this.onBeginTestCase_MoveStepDelegate == null)) {
                this.onBeginTestCase_MoveStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_MoveStep);
            }
            if ((this.onEndTestCase_MoveStepDelegate == null)) {
                this.onEndTestCase_MoveStepDelegate = new EndOperationDelegate(this.OnEndTestCase_MoveStep);
            }
            if ((this.onTestCase_MoveStepCompletedDelegate == null)) {
                this.onTestCase_MoveStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_MoveStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_MoveStepDelegate, new object[] {
                        testCaseId,
                        sourceTestStepId,
                        destinationTestStepId}, this.onEndTestCase_MoveStepDelegate, this.onTestCase_MoveStepCompletedDelegate, userState);
        }
        
        public void TestCase_DeleteStep(int testCaseId, int testStepId) {
            base.Channel.TestCase_DeleteStep(testCaseId, testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_DeleteStep(int testCaseId, int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_DeleteStep(testCaseId, testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_DeleteStep(System.IAsyncResult result) {
            base.Channel.EndTestCase_DeleteStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_DeleteStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int testStepId = ((int)(inValues[1]));
            return this.BeginTestCase_DeleteStep(testCaseId, testStepId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_DeleteStep(System.IAsyncResult result) {
            this.EndTestCase_DeleteStep(result);
            return null;
        }
        
        private void OnTestCase_DeleteStepCompleted(object state) {
            if ((this.TestCase_DeleteStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_DeleteStepCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_DeleteStepAsync(int testCaseId, int testStepId) {
            this.TestCase_DeleteStepAsync(testCaseId, testStepId, null);
        }
        
        public void TestCase_DeleteStepAsync(int testCaseId, int testStepId, object userState) {
            if ((this.onBeginTestCase_DeleteStepDelegate == null)) {
                this.onBeginTestCase_DeleteStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_DeleteStep);
            }
            if ((this.onEndTestCase_DeleteStepDelegate == null)) {
                this.onEndTestCase_DeleteStepDelegate = new EndOperationDelegate(this.OnEndTestCase_DeleteStep);
            }
            if ((this.onTestCase_DeleteStepCompletedDelegate == null)) {
                this.onTestCase_DeleteStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_DeleteStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_DeleteStepDelegate, new object[] {
                        testCaseId,
                        testStepId}, this.onEndTestCase_DeleteStepDelegate, this.onTestCase_DeleteStepCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep TestCase_AddStep(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId) {
            return base.Channel.TestCase_AddStep(remoteTestStep, testCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddStep(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddStep(remoteTestStep, testCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep EndTestCase_AddStep(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddStep(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep)(inValues[0]));
            int testCaseId = ((int)(inValues[1]));
            return this.BeginTestCase_AddStep(remoteTestStep, testCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddStep(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep retVal = this.EndTestCase_AddStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddStepCompleted(object state) {
            if ((this.TestCase_AddStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddStepCompleted(this, new TestCase_AddStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddStepAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId) {
            this.TestCase_AddStepAsync(remoteTestStep, testCaseId, null);
        }
        
        public void TestCase_AddStepAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStep remoteTestStep, int testCaseId, object userState) {
            if ((this.onBeginTestCase_AddStepDelegate == null)) {
                this.onBeginTestCase_AddStepDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddStep);
            }
            if ((this.onEndTestCase_AddStepDelegate == null)) {
                this.onEndTestCase_AddStepDelegate = new EndOperationDelegate(this.OnEndTestCase_AddStep);
            }
            if ((this.onTestCase_AddStepCompletedDelegate == null)) {
                this.onTestCase_AddStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddStepCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddStepDelegate, new object[] {
                        remoteTestStep,
                        testCaseId}, this.onEndTestCase_AddStepDelegate, this.onTestCase_AddStepCompletedDelegate, userState);
        }
        
        public int TestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters) {
            return base.Channel.TestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddLink(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndTestCase_AddLink(System.IAsyncResult result) {
            return base.Channel.EndTestCase_AddLink(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddLink(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            int position = ((int)(inValues[1]));
            int linkedTestCaseId = ((int)(inValues[2]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter>)(inValues[3]));
            return this.BeginTestCase_AddLink(testCaseId, position, linkedTestCaseId, parameters, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddLink(System.IAsyncResult result) {
            int retVal = this.EndTestCase_AddLink(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_AddLinkCompleted(object state) {
            if ((this.TestCase_AddLinkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddLinkCompleted(this, new TestCase_AddLinkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddLinkAsync(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters) {
            this.TestCase_AddLinkAsync(testCaseId, position, linkedTestCaseId, parameters, null);
        }
        
        public void TestCase_AddLinkAsync(int testCaseId, int position, int linkedTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestStepParameter> parameters, object userState) {
            if ((this.onBeginTestCase_AddLinkDelegate == null)) {
                this.onBeginTestCase_AddLinkDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddLink);
            }
            if ((this.onEndTestCase_AddLinkDelegate == null)) {
                this.onEndTestCase_AddLinkDelegate = new EndOperationDelegate(this.OnEndTestCase_AddLink);
            }
            if ((this.onTestCase_AddLinkCompletedDelegate == null)) {
                this.onTestCase_AddLinkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddLinkCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddLinkDelegate, new object[] {
                        testCaseId,
                        position,
                        linkedTestCaseId,
                        parameters}, this.onEndTestCase_AddLinkDelegate, this.onTestCase_AddLinkCompletedDelegate, userState);
        }
        
        public void TestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            base.Channel.TestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_AddUpdateAutomationScript(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestCase_AddUpdateAutomationScript(System.IAsyncResult result) {
            base.Channel.EndTestCase_AddUpdateAutomationScript(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_AddUpdateAutomationScript(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            System.Nullable<int> automationEngineId = ((System.Nullable<int>)(inValues[1]));
            string urlOrFilename = ((string)(inValues[2]));
            string description = ((string)(inValues[3]));
            byte[] binaryData = ((byte[])(inValues[4]));
            string version = ((string)(inValues[5]));
            System.Nullable<int> projectAttachmentTypeId = ((System.Nullable<int>)(inValues[6]));
            System.Nullable<int> projectAttachmentFolderId = ((System.Nullable<int>)(inValues[7]));
            return this.BeginTestCase_AddUpdateAutomationScript(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_AddUpdateAutomationScript(System.IAsyncResult result) {
            this.EndTestCase_AddUpdateAutomationScript(result);
            return null;
        }
        
        private void OnTestCase_AddUpdateAutomationScriptCompleted(object state) {
            if ((this.TestCase_AddUpdateAutomationScriptCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_AddUpdateAutomationScriptCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_AddUpdateAutomationScriptAsync(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId) {
            this.TestCase_AddUpdateAutomationScriptAsync(testCaseId, automationEngineId, urlOrFilename, description, binaryData, version, projectAttachmentTypeId, projectAttachmentFolderId, null);
        }
        
        public void TestCase_AddUpdateAutomationScriptAsync(int testCaseId, System.Nullable<int> automationEngineId, string urlOrFilename, string description, byte[] binaryData, string version, System.Nullable<int> projectAttachmentTypeId, System.Nullable<int> projectAttachmentFolderId, object userState) {
            if ((this.onBeginTestCase_AddUpdateAutomationScriptDelegate == null)) {
                this.onBeginTestCase_AddUpdateAutomationScriptDelegate = new BeginOperationDelegate(this.OnBeginTestCase_AddUpdateAutomationScript);
            }
            if ((this.onEndTestCase_AddUpdateAutomationScriptDelegate == null)) {
                this.onEndTestCase_AddUpdateAutomationScriptDelegate = new EndOperationDelegate(this.OnEndTestCase_AddUpdateAutomationScript);
            }
            if ((this.onTestCase_AddUpdateAutomationScriptCompletedDelegate == null)) {
                this.onTestCase_AddUpdateAutomationScriptCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_AddUpdateAutomationScriptCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_AddUpdateAutomationScriptDelegate, new object[] {
                        testCaseId,
                        automationEngineId,
                        urlOrFilename,
                        description,
                        binaryData,
                        version,
                        projectAttachmentTypeId,
                        projectAttachmentFolderId}, this.onEndTestCase_AddUpdateAutomationScriptDelegate, this.onTestCase_AddUpdateAutomationScriptCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> TestCase_RetrieveComments(int TestCaseId) {
            return base.Channel.TestCase_RetrieveComments(TestCaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_RetrieveComments(int TestCaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_RetrieveComments(TestCaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTestCase_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTestCase_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TestCaseId = ((int)(inValues[0]));
            return this.BeginTestCase_RetrieveComments(TestCaseId, callback, asyncState);
        }
        
        private object[] OnEndTestCase_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndTestCase_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_RetrieveCommentsCompleted(object state) {
            if ((this.TestCase_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_RetrieveCommentsCompleted(this, new TestCase_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_RetrieveCommentsAsync(int TestCaseId) {
            this.TestCase_RetrieveCommentsAsync(TestCaseId, null);
        }
        
        public void TestCase_RetrieveCommentsAsync(int TestCaseId, object userState) {
            if ((this.onBeginTestCase_RetrieveCommentsDelegate == null)) {
                this.onBeginTestCase_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTestCase_RetrieveComments);
            }
            if ((this.onEndTestCase_RetrieveCommentsDelegate == null)) {
                this.onEndTestCase_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTestCase_RetrieveComments);
            }
            if ((this.onTestCase_RetrieveCommentsCompletedDelegate == null)) {
                this.onTestCase_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_RetrieveCommentsDelegate, new object[] {
                        TestCaseId}, this.onEndTestCase_RetrieveCommentsDelegate, this.onTestCase_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public long TestCase_CountForFolder(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID) {
            return base.Channel.TestCase_CountForFolder(remoteFilters, parentID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CountForFolder(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CountForFolder(remoteFilters, parentID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestCase_CountForFolder(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CountForFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CountForFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            int parentID = ((int)(inValues[1]));
            return this.BeginTestCase_CountForFolder(remoteFilters, parentID, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CountForFolder(System.IAsyncResult result) {
            long retVal = this.EndTestCase_CountForFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CountForFolderCompleted(object state) {
            if ((this.TestCase_CountForFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CountForFolderCompleted(this, new TestCase_CountForFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CountForFolderAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID) {
            this.TestCase_CountForFolderAsync(remoteFilters, parentID, null);
        }
        
        public void TestCase_CountForFolderAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int parentID, object userState) {
            if ((this.onBeginTestCase_CountForFolderDelegate == null)) {
                this.onBeginTestCase_CountForFolderDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CountForFolder);
            }
            if ((this.onEndTestCase_CountForFolderDelegate == null)) {
                this.onEndTestCase_CountForFolderDelegate = new EndOperationDelegate(this.OnEndTestCase_CountForFolder);
            }
            if ((this.onTestCase_CountForFolderCompletedDelegate == null)) {
                this.onTestCase_CountForFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CountForFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CountForFolderDelegate, new object[] {
                        remoteFilters,
                        parentID}, this.onEndTestCase_CountForFolderDelegate, this.onTestCase_CountForFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment TestCase_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            return base.Channel.TestCase_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestCase_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestCase_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTestCase_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTestCase_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTestCase_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(inValues[0]));
            return this.BeginTestCase_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTestCase_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment retVal = this.EndTestCase_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCase_CreateCommentCompleted(object state) {
            if ((this.TestCase_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCase_CreateCommentCompleted(this, new TestCase_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestCase_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            this.TestCase_CreateCommentAsync(remoteComment, null);
        }
        
        public void TestCase_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTestCase_CreateCommentDelegate == null)) {
                this.onBeginTestCase_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTestCase_CreateComment);
            }
            if ((this.onEndTestCase_CreateCommentDelegate == null)) {
                this.onEndTestCase_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTestCase_CreateComment);
            }
            if ((this.onTestCase_CreateCommentCompletedDelegate == null)) {
                this.onTestCase_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCase_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTestCase_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTestCase_CreateCommentDelegate, this.onTestCase_CreateCommentCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_CreateFromTestCases(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId) {
            return base.Channel.TestRun_CreateFromTestCases(testCaseIds, releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateFromTestCases(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateFromTestCases(testCaseIds, releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_CreateFromTestCases(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateFromTestCases(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateFromTestCases(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<int> testCaseIds = ((System.Collections.Generic.List<int>)(inValues[0]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestRun_CreateFromTestCases(testCaseIds, releaseId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateFromTestCases(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> retVal = this.EndTestRun_CreateFromTestCases(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateFromTestCasesCompleted(object state) {
            if ((this.TestRun_CreateFromTestCasesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateFromTestCasesCompleted(this, new TestRun_CreateFromTestCasesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateFromTestCasesAsync(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId) {
            this.TestRun_CreateFromTestCasesAsync(testCaseIds, releaseId, null);
        }
        
        public void TestRun_CreateFromTestCasesAsync(System.Collections.Generic.List<int> testCaseIds, System.Nullable<int> releaseId, object userState) {
            if ((this.onBeginTestRun_CreateFromTestCasesDelegate == null)) {
                this.onBeginTestRun_CreateFromTestCasesDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateFromTestCases);
            }
            if ((this.onEndTestRun_CreateFromTestCasesDelegate == null)) {
                this.onEndTestRun_CreateFromTestCasesDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateFromTestCases);
            }
            if ((this.onTestRun_CreateFromTestCasesCompletedDelegate == null)) {
                this.onTestRun_CreateFromTestCasesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateFromTestCasesCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateFromTestCasesDelegate, new object[] {
                        testCaseIds,
                        releaseId}, this.onEndTestRun_CreateFromTestCasesDelegate, this.onTestRun_CreateFromTestCasesCompletedDelegate, userState);
        }
        
        public long TestRun_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.TestRun_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestRun_Count(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginTestRun_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Count(System.IAsyncResult result) {
            long retVal = this.EndTestRun_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CountCompleted(object state) {
            if ((this.TestRun_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CountCompleted(this, new TestRun_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.TestRun_CountAsync(remoteFilters, null);
        }
        
        public void TestRun_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginTestRun_CountDelegate == null)) {
                this.onBeginTestRun_CountDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Count);
            }
            if ((this.onEndTestRun_CountDelegate == null)) {
                this.onEndTestRun_CountDelegate = new EndOperationDelegate(this.OnEndTestRun_Count);
            }
            if ((this.onTestRun_CountCompletedDelegate == null)) {
                this.onTestRun_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTestRun_CountDelegate, this.onTestRun_CountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_CreateFromTestSet(int testSetId) {
            return base.Channel.TestRun_CreateFromTestSet(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateFromTestSet(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateFromTestSet(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_CreateFromTestSet(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateFromTestSet(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateFromTestSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestRun_CreateFromTestSet(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateFromTestSet(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> retVal = this.EndTestRun_CreateFromTestSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateFromTestSetCompleted(object state) {
            if ((this.TestRun_CreateFromTestSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateFromTestSetCompleted(this, new TestRun_CreateFromTestSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateFromTestSetAsync(int testSetId) {
            this.TestRun_CreateFromTestSetAsync(testSetId, null);
        }
        
        public void TestRun_CreateFromTestSetAsync(int testSetId, object userState) {
            if ((this.onBeginTestRun_CreateFromTestSetDelegate == null)) {
                this.onBeginTestRun_CreateFromTestSetDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateFromTestSet);
            }
            if ((this.onEndTestRun_CreateFromTestSetDelegate == null)) {
                this.onEndTestRun_CreateFromTestSetDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateFromTestSet);
            }
            if ((this.onTestRun_CreateFromTestSetCompletedDelegate == null)) {
                this.onTestRun_CreateFromTestSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateFromTestSetCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateFromTestSetDelegate, new object[] {
                        testSetId}, this.onEndTestRun_CreateFromTestSetDelegate, this.onTestRun_CreateFromTestSetCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange) {
            return base.Channel.TestRun_CreateForAutomationHost(automationHostToken, dateRange);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateForAutomationHost(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateForAutomationHost(automationHostToken, dateRange, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_CreateForAutomationHost(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateForAutomationHost(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateForAutomationHost(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string automationHostToken = ((string)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange)(inValues[1]));
            return this.BeginTestRun_CreateForAutomationHost(automationHostToken, dateRange, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateForAutomationHost(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> retVal = this.EndTestRun_CreateForAutomationHost(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateForAutomationHostCompleted(object state) {
            if ((this.TestRun_CreateForAutomationHostCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateForAutomationHostCompleted(this, new TestRun_CreateForAutomationHostCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateForAutomationHostAsync(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange) {
            this.TestRun_CreateForAutomationHostAsync(automationHostToken, dateRange, null);
        }
        
        public void TestRun_CreateForAutomationHostAsync(string automationHostToken, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.DateRange dateRange, object userState) {
            if ((this.onBeginTestRun_CreateForAutomationHostDelegate == null)) {
                this.onBeginTestRun_CreateForAutomationHostDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateForAutomationHost);
            }
            if ((this.onEndTestRun_CreateForAutomationHostDelegate == null)) {
                this.onEndTestRun_CreateForAutomationHostDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateForAutomationHost);
            }
            if ((this.onTestRun_CreateForAutomationHostCompletedDelegate == null)) {
                this.onTestRun_CreateForAutomationHostCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateForAutomationHostCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateForAutomationHostDelegate, new object[] {
                        automationHostToken,
                        dateRange}, this.onEndTestRun_CreateForAutomationHostDelegate, this.onTestRun_CreateForAutomationHostCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken) {
            return base.Channel.TestRun_CreateForAutomatedTestSet(testSetId, automationHostToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_CreateForAutomatedTestSet(int testSetId, string automationHostToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_CreateForAutomatedTestSet(testSetId, automationHostToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result) {
            return base.Channel.EndTestRun_CreateForAutomatedTestSet(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_CreateForAutomatedTestSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            string automationHostToken = ((string)(inValues[1]));
            return this.BeginTestRun_CreateForAutomatedTestSet(testSetId, automationHostToken, callback, asyncState);
        }
        
        private object[] OnEndTestRun_CreateForAutomatedTestSet(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> retVal = this.EndTestRun_CreateForAutomatedTestSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_CreateForAutomatedTestSetCompleted(object state) {
            if ((this.TestRun_CreateForAutomatedTestSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_CreateForAutomatedTestSetCompleted(this, new TestRun_CreateForAutomatedTestSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_CreateForAutomatedTestSetAsync(int testSetId, string automationHostToken) {
            this.TestRun_CreateForAutomatedTestSetAsync(testSetId, automationHostToken, null);
        }
        
        public void TestRun_CreateForAutomatedTestSetAsync(int testSetId, string automationHostToken, object userState) {
            if ((this.onBeginTestRun_CreateForAutomatedTestSetDelegate == null)) {
                this.onBeginTestRun_CreateForAutomatedTestSetDelegate = new BeginOperationDelegate(this.OnBeginTestRun_CreateForAutomatedTestSet);
            }
            if ((this.onEndTestRun_CreateForAutomatedTestSetDelegate == null)) {
                this.onEndTestRun_CreateForAutomatedTestSetDelegate = new EndOperationDelegate(this.OnEndTestRun_CreateForAutomatedTestSet);
            }
            if ((this.onTestRun_CreateForAutomatedTestSetCompletedDelegate == null)) {
                this.onTestRun_CreateForAutomatedTestSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_CreateForAutomatedTestSetCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_CreateForAutomatedTestSetDelegate, new object[] {
                        testSetId,
                        automationHostToken}, this.onEndTestRun_CreateForAutomatedTestSetDelegate, this.onTestRun_CreateForAutomatedTestSetCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun TestRun_RecordAutomated1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun) {
            return base.Channel.TestRun_RecordAutomated1(remoteTestRun);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated1(remoteTestRun, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun EndTestRun_RecordAutomated1(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated1(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun)(inValues[0]));
            return this.BeginTestRun_RecordAutomated1(remoteTestRun, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated1(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun retVal = this.EndTestRun_RecordAutomated1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated1Completed(object state) {
            if ((this.TestRun_RecordAutomated1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated1Completed(this, new TestRun_RecordAutomated1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated1Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun) {
            this.TestRun_RecordAutomated1Async(remoteTestRun, null);
        }
        
        public void TestRun_RecordAutomated1Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun remoteTestRun, object userState) {
            if ((this.onBeginTestRun_RecordAutomated1Delegate == null)) {
                this.onBeginTestRun_RecordAutomated1Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated1);
            }
            if ((this.onEndTestRun_RecordAutomated1Delegate == null)) {
                this.onEndTestRun_RecordAutomated1Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated1);
            }
            if ((this.onTestRun_RecordAutomated1CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated1Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated1Delegate, new object[] {
                        remoteTestRun}, this.onEndTestRun_RecordAutomated1Delegate, this.onTestRun_RecordAutomated1CompletedDelegate, userState);
        }
        
        public int TestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            return base.Channel.TestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated2(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndTestRun_RecordAutomated2(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated2(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            int projectId = ((int)(inValues[2]));
            System.Nullable<int> testerUserId = ((System.Nullable<int>)(inValues[3]));
            int testCaseId = ((int)(inValues[4]));
            System.Nullable<int> releaseId = ((System.Nullable<int>)(inValues[5]));
            System.Nullable<int> testSetId = ((System.Nullable<int>)(inValues[6]));
            System.Nullable<int> testSetTestCaseId = ((System.Nullable<int>)(inValues[7]));
            System.Nullable<int> buildId = ((System.Nullable<int>)(inValues[8]));
            System.DateTime startDate = ((System.DateTime)(inValues[9]));
            System.DateTime endDate = ((System.DateTime)(inValues[10]));
            int executionStatusId = ((int)(inValues[11]));
            string runnerName = ((string)(inValues[12]));
            string runnerTestName = ((string)(inValues[13]));
            int runnerAssertCount = ((int)(inValues[14]));
            string runnerMessage = ((string)(inValues[15]));
            string runnerStackTrace = ((string)(inValues[16]));
            int testRunFormatId = ((int)(inValues[17]));
            return this.BeginTestRun_RecordAutomated2(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated2(System.IAsyncResult result) {
            int retVal = this.EndTestRun_RecordAutomated2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated2Completed(object state) {
            if ((this.TestRun_RecordAutomated2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated2Completed(this, new TestRun_RecordAutomated2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId) {
            this.TestRun_RecordAutomated2Async(userName, password, projectId, testerUserId, testCaseId, releaseId, testSetId, testSetTestCaseId, buildId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, testRunFormatId, null);
        }
        
        public void TestRun_RecordAutomated2Async(
                    string userName, 
                    string password, 
                    int projectId, 
                    System.Nullable<int> testerUserId, 
                    int testCaseId, 
                    System.Nullable<int> releaseId, 
                    System.Nullable<int> testSetId, 
                    System.Nullable<int> testSetTestCaseId, 
                    System.Nullable<int> buildId, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    int executionStatusId, 
                    string runnerName, 
                    string runnerTestName, 
                    int runnerAssertCount, 
                    string runnerMessage, 
                    string runnerStackTrace, 
                    int testRunFormatId, 
                    object userState) {
            if ((this.onBeginTestRun_RecordAutomated2Delegate == null)) {
                this.onBeginTestRun_RecordAutomated2Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated2);
            }
            if ((this.onEndTestRun_RecordAutomated2Delegate == null)) {
                this.onEndTestRun_RecordAutomated2Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated2);
            }
            if ((this.onTestRun_RecordAutomated2CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated2Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated2Delegate, new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        testSetId,
                        testSetTestCaseId,
                        buildId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace,
                        testRunFormatId}, this.onEndTestRun_RecordAutomated2Delegate, this.onTestRun_RecordAutomated2CompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_RecordAutomated3(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns) {
            return base.Channel.TestRun_RecordAutomated3(remoteTestRuns);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RecordAutomated3(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RecordAutomated3(remoteTestRuns, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_RecordAutomated3(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RecordAutomated3(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RecordAutomated3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun>)(inValues[0]));
            return this.BeginTestRun_RecordAutomated3(remoteTestRuns, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RecordAutomated3(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> retVal = this.EndTestRun_RecordAutomated3(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RecordAutomated3Completed(object state) {
            if ((this.TestRun_RecordAutomated3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RecordAutomated3Completed(this, new TestRun_RecordAutomated3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RecordAutomated3Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns) {
            this.TestRun_RecordAutomated3Async(remoteTestRuns, null);
        }
        
        public void TestRun_RecordAutomated3Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> remoteTestRuns, object userState) {
            if ((this.onBeginTestRun_RecordAutomated3Delegate == null)) {
                this.onBeginTestRun_RecordAutomated3Delegate = new BeginOperationDelegate(this.OnBeginTestRun_RecordAutomated3);
            }
            if ((this.onEndTestRun_RecordAutomated3Delegate == null)) {
                this.onEndTestRun_RecordAutomated3Delegate = new EndOperationDelegate(this.OnEndTestRun_RecordAutomated3);
            }
            if ((this.onTestRun_RecordAutomated3CompletedDelegate == null)) {
                this.onTestRun_RecordAutomated3CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RecordAutomated3Completed);
            }
            base.InvokeAsync(this.onBeginTestRun_RecordAutomated3Delegate, new object[] {
                        remoteTestRuns}, this.onEndTestRun_RecordAutomated3Delegate, this.onTestRun_RecordAutomated3CompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> TestRun_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> EndTestRun_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun> retVal = this.EndTestRun_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveCompleted(object state) {
            if ((this.TestRun_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveCompleted(this, new TestRun_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveDelegate == null)) {
                this.onBeginTestRun_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Retrieve);
            }
            if ((this.onEndTestRun_RetrieveDelegate == null)) {
                this.onEndTestRun_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestRun_Retrieve);
            }
            if ((this.onTestRun_RetrieveCompletedDelegate == null)) {
                this.onTestRun_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveDelegate, this.onTestRun_RetrieveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_RetrieveManual(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveManual(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_RetrieveManual(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveManual(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveManual(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_RetrieveManual(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveManual(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> retVal = this.EndTestRun_RetrieveManual(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveManualCompleted(object state) {
            if ((this.TestRun_RetrieveManualCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveManualCompleted(this, new TestRun_RetrieveManualCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveManualAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveManualAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveManualAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveManualDelegate == null)) {
                this.onBeginTestRun_RetrieveManualDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveManual);
            }
            if ((this.onEndTestRun_RetrieveManualDelegate == null)) {
                this.onEndTestRun_RetrieveManualDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveManual);
            }
            if ((this.onTestRun_RetrieveManualCompletedDelegate == null)) {
                this.onTestRun_RetrieveManualCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveManualCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveManualDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveManualDelegate, this.onTestRun_RetrieveManualCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> TestRun_RetrieveAutomated(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.TestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveAutomated(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> EndTestRun_RetrieveAutomated(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveAutomated(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveAutomated(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginTestRun_RetrieveAutomated(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveAutomated(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun> retVal = this.EndTestRun_RetrieveAutomated(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveAutomatedCompleted(object state) {
            if ((this.TestRun_RetrieveAutomatedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveAutomatedCompleted(this, new TestRun_RetrieveAutomatedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAutomatedAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.TestRun_RetrieveAutomatedAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void TestRun_RetrieveAutomatedAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestRun_RetrieveAutomatedDelegate == null)) {
                this.onBeginTestRun_RetrieveAutomatedDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveAutomated);
            }
            if ((this.onEndTestRun_RetrieveAutomatedDelegate == null)) {
                this.onEndTestRun_RetrieveAutomatedDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveAutomated);
            }
            if ((this.onTestRun_RetrieveAutomatedCompletedDelegate == null)) {
                this.onTestRun_RetrieveAutomatedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveAutomatedCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveAutomatedDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndTestRun_RetrieveAutomatedDelegate, this.onTestRun_RetrieveAutomatedCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun TestRun_RetrieveById(int testRunId) {
            return base.Channel.TestRun_RetrieveById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun EndTestRun_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestRun retVal = this.EndTestRun_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveByIdCompleted(object state) {
            if ((this.TestRun_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveByIdCompleted(this, new TestRun_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveByIdAsync(int testRunId) {
            this.TestRun_RetrieveByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveById);
            }
            if ((this.onEndTestRun_RetrieveByIdDelegate == null)) {
                this.onEndTestRun_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveById);
            }
            if ((this.onTestRun_RetrieveByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveByIdDelegate, this.onTestRun_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun TestRun_RetrieveAutomatedById(int testRunId) {
            return base.Channel.TestRun_RetrieveAutomatedById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveAutomatedById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveAutomatedById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun EndTestRun_RetrieveAutomatedById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveAutomatedById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveAutomatedById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveAutomatedById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveAutomatedById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomatedTestRun retVal = this.EndTestRun_RetrieveAutomatedById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveAutomatedByIdCompleted(object state) {
            if ((this.TestRun_RetrieveAutomatedByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveAutomatedByIdCompleted(this, new TestRun_RetrieveAutomatedByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveAutomatedByIdAsync(int testRunId) {
            this.TestRun_RetrieveAutomatedByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveAutomatedByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveAutomatedByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveAutomatedByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveAutomatedById);
            }
            if ((this.onEndTestRun_RetrieveAutomatedByIdDelegate == null)) {
                this.onEndTestRun_RetrieveAutomatedByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveAutomatedById);
            }
            if ((this.onTestRun_RetrieveAutomatedByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveAutomatedByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveAutomatedByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveAutomatedByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveAutomatedByIdDelegate, this.onTestRun_RetrieveAutomatedByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun TestRun_RetrieveManualById(int testRunId) {
            return base.Channel.TestRun_RetrieveManualById(testRunId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_RetrieveManualById(int testRunId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_RetrieveManualById(testRunId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun EndTestRun_RetrieveManualById(System.IAsyncResult result) {
            return base.Channel.EndTestRun_RetrieveManualById(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_RetrieveManualById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunId = ((int)(inValues[0]));
            return this.BeginTestRun_RetrieveManualById(testRunId, callback, asyncState);
        }
        
        private object[] OnEndTestRun_RetrieveManualById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun retVal = this.EndTestRun_RetrieveManualById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_RetrieveManualByIdCompleted(object state) {
            if ((this.TestRun_RetrieveManualByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_RetrieveManualByIdCompleted(this, new TestRun_RetrieveManualByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_RetrieveManualByIdAsync(int testRunId) {
            this.TestRun_RetrieveManualByIdAsync(testRunId, null);
        }
        
        public void TestRun_RetrieveManualByIdAsync(int testRunId, object userState) {
            if ((this.onBeginTestRun_RetrieveManualByIdDelegate == null)) {
                this.onBeginTestRun_RetrieveManualByIdDelegate = new BeginOperationDelegate(this.OnBeginTestRun_RetrieveManualById);
            }
            if ((this.onEndTestRun_RetrieveManualByIdDelegate == null)) {
                this.onEndTestRun_RetrieveManualByIdDelegate = new EndOperationDelegate(this.OnEndTestRun_RetrieveManualById);
            }
            if ((this.onTestRun_RetrieveManualByIdCompletedDelegate == null)) {
                this.onTestRun_RetrieveManualByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_RetrieveManualByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_RetrieveManualByIdDelegate, new object[] {
                        testRunId}, this.onEndTestRun_RetrieveManualByIdDelegate, this.onTestRun_RetrieveManualByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> TestRun_Save(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            return base.Channel.TestRun_Save(remoteTestRuns, endDate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestRun_Save(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestRun_Save(remoteTestRuns, endDate, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> EndTestRun_Save(System.IAsyncResult result) {
            return base.Channel.EndTestRun_Save(result);
        }
        
        private System.IAsyncResult OnBeginTestRun_Save(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun>)(inValues[0]));
            System.Nullable<System.DateTime> endDate = ((System.Nullable<System.DateTime>)(inValues[1]));
            return this.BeginTestRun_Save(remoteTestRuns, endDate, callback, asyncState);
        }
        
        private object[] OnEndTestRun_Save(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> retVal = this.EndTestRun_Save(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestRun_SaveCompleted(object state) {
            if ((this.TestRun_SaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestRun_SaveCompleted(this, new TestRun_SaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestRun_SaveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate) {
            this.TestRun_SaveAsync(remoteTestRuns, endDate, null);
        }
        
        public void TestRun_SaveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteManualTestRun> remoteTestRuns, System.Nullable<System.DateTime> endDate, object userState) {
            if ((this.onBeginTestRun_SaveDelegate == null)) {
                this.onBeginTestRun_SaveDelegate = new BeginOperationDelegate(this.OnBeginTestRun_Save);
            }
            if ((this.onEndTestRun_SaveDelegate == null)) {
                this.onEndTestRun_SaveDelegate = new EndOperationDelegate(this.OnEndTestRun_Save);
            }
            if ((this.onTestRun_SaveCompletedDelegate == null)) {
                this.onTestRun_SaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestRun_SaveCompleted);
            }
            base.InvokeAsync(this.onBeginTestRun_SaveDelegate, new object[] {
                        remoteTestRuns,
                        endDate}, this.onEndTestRun_SaveDelegate, this.onTestRun_SaveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> TestSet_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters) {
            return base.Channel.TestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> EndTestSet_AddTestMapping(System.IAsyncResult result) {
            return base.Channel.EndTestSet_AddTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_AddTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping)(inValues[0]));
            System.Nullable<int> existingTestSetTestCaseId = ((System.Nullable<int>)(inValues[1]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter>)(inValues[2]));
            return this.BeginTestSet_AddTestMapping(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, callback, asyncState);
        }
        
        private object[] OnEndTestSet_AddTestMapping(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> retVal = this.EndTestSet_AddTestMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_AddTestMappingCompleted(object state) {
            if ((this.TestSet_AddTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_AddTestMappingCompleted(this, new TestSet_AddTestMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_AddTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters) {
            this.TestSet_AddTestMappingAsync(remoteTestSetTestCaseMapping, existingTestSetTestCaseId, parameters, null);
        }
        
        public void TestSet_AddTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.Nullable<int> existingTestSetTestCaseId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseParameter> parameters, object userState) {
            if ((this.onBeginTestSet_AddTestMappingDelegate == null)) {
                this.onBeginTestSet_AddTestMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_AddTestMapping);
            }
            if ((this.onEndTestSet_AddTestMappingDelegate == null)) {
                this.onEndTestSet_AddTestMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_AddTestMapping);
            }
            if ((this.onTestSet_AddTestMappingCompletedDelegate == null)) {
                this.onTestSet_AddTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_AddTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_AddTestMappingDelegate, new object[] {
                        remoteTestSetTestCaseMapping,
                        existingTestSetTestCaseId,
                        parameters}, this.onEndTestSet_AddTestMappingDelegate, this.onTestSet_AddTestMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId) {
            return base.Channel.TestSet_Create(remoteTestSet, parentTestSetFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Create(remoteTestSet, parentTestSetFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_Create(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Create(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(inValues[0]));
            System.Nullable<int> parentTestSetFolderId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_Create(remoteTestSet, parentTestSetFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet retVal = this.EndTestSet_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateCompleted(object state) {
            if ((this.TestSet_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateCompleted(this, new TestSet_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId) {
            this.TestSet_CreateAsync(remoteTestSet, parentTestSetFolderId, null);
        }
        
        public void TestSet_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, object userState) {
            if ((this.onBeginTestSet_CreateDelegate == null)) {
                this.onBeginTestSet_CreateDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Create);
            }
            if ((this.onEndTestSet_CreateDelegate == null)) {
                this.onEndTestSet_CreateDelegate = new EndOperationDelegate(this.OnEndTestSet_Create);
            }
            if ((this.onTestSet_CreateCompletedDelegate == null)) {
                this.onTestSet_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateDelegate, new object[] {
                        remoteTestSet,
                        parentTestSetFolderId}, this.onEndTestSet_CreateDelegate, this.onTestSet_CreateCompletedDelegate, userState);
        }
        
        public long TestSet_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.TestSet_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndTestSet_Count(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Count(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginTestSet_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Count(System.IAsyncResult result) {
            long retVal = this.EndTestSet_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CountCompleted(object state) {
            if ((this.TestSet_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CountCompleted(this, new TestSet_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.TestSet_CountAsync(remoteFilters, null);
        }
        
        public void TestSet_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginTestSet_CountDelegate == null)) {
                this.onBeginTestSet_CountDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Count);
            }
            if ((this.onEndTestSet_CountDelegate == null)) {
                this.onEndTestSet_CountDelegate = new EndOperationDelegate(this.OnEndTestSet_Count);
            }
            if ((this.onTestSet_CountCompletedDelegate == null)) {
                this.onTestSet_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CountCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CountDelegate, new object[] {
                        remoteFilters}, this.onEndTestSet_CountDelegate, this.onTestSet_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId) {
            return base.Channel.TestSet_CreateFolder(remoteTestSet, parentTestSetFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_CreateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_CreateFolder(remoteTestSet, parentTestSetFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_CreateFolder(System.IAsyncResult result) {
            return base.Channel.EndTestSet_CreateFolder(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_CreateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(inValues[0]));
            System.Nullable<int> parentTestSetFolderId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_CreateFolder(remoteTestSet, parentTestSetFolderId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_CreateFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet retVal = this.EndTestSet_CreateFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateFolderCompleted(object state) {
            if ((this.TestSet_CreateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateFolderCompleted(this, new TestSet_CreateFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId) {
            this.TestSet_CreateFolderAsync(remoteTestSet, parentTestSetFolderId, null);
        }
        
        public void TestSet_CreateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.Nullable<int> parentTestSetFolderId, object userState) {
            if ((this.onBeginTestSet_CreateFolderDelegate == null)) {
                this.onBeginTestSet_CreateFolderDelegate = new BeginOperationDelegate(this.OnBeginTestSet_CreateFolder);
            }
            if ((this.onEndTestSet_CreateFolderDelegate == null)) {
                this.onEndTestSet_CreateFolderDelegate = new EndOperationDelegate(this.OnEndTestSet_CreateFolder);
            }
            if ((this.onTestSet_CreateFolderCompletedDelegate == null)) {
                this.onTestSet_CreateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateFolderDelegate, new object[] {
                        remoteTestSet,
                        parentTestSetFolderId}, this.onEndTestSet_CreateFolderDelegate, this.onTestSet_CreateFolderCompletedDelegate, userState);
        }
        
        public void TestSet_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            base.Channel.TestSet_RemoveTestMapping(remoteTestSetTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RemoveTestMapping(remoteTestSetTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_RemoveTestMapping(System.IAsyncResult result) {
            base.Channel.EndTestSet_RemoveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RemoveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping)(inValues[0]));
            return this.BeginTestSet_RemoveTestMapping(remoteTestSetTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RemoveTestMapping(System.IAsyncResult result) {
            this.EndTestSet_RemoveTestMapping(result);
            return null;
        }
        
        private void OnTestSet_RemoveTestMappingCompleted(object state) {
            if ((this.TestSet_RemoveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RemoveTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RemoveTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping) {
            this.TestSet_RemoveTestMappingAsync(remoteTestSetTestCaseMapping, null);
        }
        
        public void TestSet_RemoveTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping remoteTestSetTestCaseMapping, object userState) {
            if ((this.onBeginTestSet_RemoveTestMappingDelegate == null)) {
                this.onBeginTestSet_RemoveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RemoveTestMapping);
            }
            if ((this.onEndTestSet_RemoveTestMappingDelegate == null)) {
                this.onEndTestSet_RemoveTestMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_RemoveTestMapping);
            }
            if ((this.onTestSet_RemoveTestMappingCompletedDelegate == null)) {
                this.onTestSet_RemoveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RemoveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RemoveTestMappingDelegate, new object[] {
                        remoteTestSetTestCaseMapping}, this.onEndTestSet_RemoveTestMappingDelegate, this.onTestSet_RemoveTestMappingCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> TestSet_RetrieveTestCaseMapping(int testSetId) {
            return base.Channel.TestSet_RetrieveTestCaseMapping(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveTestCaseMapping(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveTestCaseMapping(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> EndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveTestCaseMapping(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveTestCaseMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveTestCaseMapping(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveTestCaseMapping(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSetTestCaseMapping> retVal = this.EndTestSet_RetrieveTestCaseMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveTestCaseMappingCompleted(object state) {
            if ((this.TestSet_RetrieveTestCaseMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveTestCaseMappingCompleted(this, new TestSet_RetrieveTestCaseMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveTestCaseMappingAsync(int testSetId) {
            this.TestSet_RetrieveTestCaseMappingAsync(testSetId, null);
        }
        
        public void TestSet_RetrieveTestCaseMappingAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveTestCaseMappingDelegate == null)) {
                this.onBeginTestSet_RetrieveTestCaseMappingDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveTestCaseMapping);
            }
            if ((this.onEndTestSet_RetrieveTestCaseMappingDelegate == null)) {
                this.onEndTestSet_RetrieveTestCaseMappingDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveTestCaseMapping);
            }
            if ((this.onTestSet_RetrieveTestCaseMappingCompletedDelegate == null)) {
                this.onTestSet_RetrieveTestCaseMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveTestCaseMappingCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveTestCaseMappingDelegate, new object[] {
                        testSetId}, this.onEndTestSet_RetrieveTestCaseMappingDelegate, this.onTestSet_RetrieveTestCaseMappingCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> TestSet_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.TestSet_Retrieve(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> EndTestSet_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndTestSet_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginTestSet_Retrieve(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> retVal = this.EndTestSet_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveCompleted(object state) {
            if ((this.TestSet_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveCompleted(this, new TestSet_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            this.TestSet_RetrieveAsync(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void TestSet_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginTestSet_RetrieveDelegate == null)) {
                this.onBeginTestSet_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Retrieve);
            }
            if ((this.onEndTestSet_RetrieveDelegate == null)) {
                this.onEndTestSet_RetrieveDelegate = new EndOperationDelegate(this.OnEndTestSet_Retrieve);
            }
            if ((this.onTestSet_RetrieveCompletedDelegate == null)) {
                this.onTestSet_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveDelegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndTestSet_RetrieveDelegate, this.onTestSet_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet TestSet_RetrieveById(int testSetId) {
            return base.Channel.TestSet_RetrieveById(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveById(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveById(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet EndTestSet_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveById(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet retVal = this.EndTestSet_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveByIdCompleted(object state) {
            if ((this.TestSet_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveByIdCompleted(this, new TestSet_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveByIdAsync(int testSetId) {
            this.TestSet_RetrieveByIdAsync(testSetId, null);
        }
        
        public void TestSet_RetrieveByIdAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveByIdDelegate == null)) {
                this.onBeginTestSet_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveById);
            }
            if ((this.onEndTestSet_RetrieveByIdDelegate == null)) {
                this.onEndTestSet_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveById);
            }
            if ((this.onTestSet_RetrieveByIdCompletedDelegate == null)) {
                this.onTestSet_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveByIdDelegate, new object[] {
                        testSetId}, this.onEndTestSet_RetrieveByIdDelegate, this.onTestSet_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> TestSet_RetrieveForOwner() {
            return base.Channel.TestSet_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> EndTestSet_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginTestSet_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveForOwner(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet> retVal = this.EndTestSet_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveForOwnerCompleted(object state) {
            if ((this.TestSet_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveForOwnerCompleted(this, new TestSet_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveForOwnerAsync() {
            this.TestSet_RetrieveForOwnerAsync(null);
        }
        
        public void TestSet_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginTestSet_RetrieveForOwnerDelegate == null)) {
                this.onBeginTestSet_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveForOwner);
            }
            if ((this.onEndTestSet_RetrieveForOwnerDelegate == null)) {
                this.onEndTestSet_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveForOwner);
            }
            if ((this.onTestSet_RetrieveForOwnerCompletedDelegate == null)) {
                this.onTestSet_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveForOwnerDelegate, null, this.onEndTestSet_RetrieveForOwnerDelegate, this.onTestSet_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public void TestSet_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet) {
            base.Channel.TestSet_Update(remoteTestSet);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Update(remoteTestSet, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Update(System.IAsyncResult result) {
            base.Channel.EndTestSet_Update(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet)(inValues[0]));
            return this.BeginTestSet_Update(remoteTestSet, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Update(System.IAsyncResult result) {
            this.EndTestSet_Update(result);
            return null;
        }
        
        private void OnTestSet_UpdateCompleted(object state) {
            if ((this.TestSet_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet) {
            this.TestSet_UpdateAsync(remoteTestSet, null);
        }
        
        public void TestSet_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteTestSet remoteTestSet, object userState) {
            if ((this.onBeginTestSet_UpdateDelegate == null)) {
                this.onBeginTestSet_UpdateDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Update);
            }
            if ((this.onEndTestSet_UpdateDelegate == null)) {
                this.onEndTestSet_UpdateDelegate = new EndOperationDelegate(this.OnEndTestSet_Update);
            }
            if ((this.onTestSet_UpdateCompletedDelegate == null)) {
                this.onTestSet_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_UpdateDelegate, new object[] {
                        remoteTestSet}, this.onEndTestSet_UpdateDelegate, this.onTestSet_UpdateCompletedDelegate, userState);
        }
        
        public void TestSet_Delete(int testSetId) {
            base.Channel.TestSet_Delete(testSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Delete(int testSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Delete(testSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Delete(System.IAsyncResult result) {
            base.Channel.EndTestSet_Delete(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            return this.BeginTestSet_Delete(testSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Delete(System.IAsyncResult result) {
            this.EndTestSet_Delete(result);
            return null;
        }
        
        private void OnTestSet_DeleteCompleted(object state) {
            if ((this.TestSet_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_DeleteAsync(int testSetId) {
            this.TestSet_DeleteAsync(testSetId, null);
        }
        
        public void TestSet_DeleteAsync(int testSetId, object userState) {
            if ((this.onBeginTestSet_DeleteDelegate == null)) {
                this.onBeginTestSet_DeleteDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Delete);
            }
            if ((this.onEndTestSet_DeleteDelegate == null)) {
                this.onEndTestSet_DeleteDelegate = new EndOperationDelegate(this.OnEndTestSet_Delete);
            }
            if ((this.onTestSet_DeleteCompletedDelegate == null)) {
                this.onTestSet_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_DeleteDelegate, new object[] {
                        testSetId}, this.onEndTestSet_DeleteDelegate, this.onTestSet_DeleteCompletedDelegate, userState);
        }
        
        public void TestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId) {
            base.Channel.TestSet_Move(testSetId, destinationTestSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_Move(int testSetId, System.Nullable<int> destinationTestSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_Move(testSetId, destinationTestSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndTestSet_Move(System.IAsyncResult result) {
            base.Channel.EndTestSet_Move(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testSetId = ((int)(inValues[0]));
            System.Nullable<int> destinationTestSetId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginTestSet_Move(testSetId, destinationTestSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_Move(System.IAsyncResult result) {
            this.EndTestSet_Move(result);
            return null;
        }
        
        private void OnTestSet_MoveCompleted(object state) {
            if ((this.TestSet_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_MoveAsync(int testSetId, System.Nullable<int> destinationTestSetId) {
            this.TestSet_MoveAsync(testSetId, destinationTestSetId, null);
        }
        
        public void TestSet_MoveAsync(int testSetId, System.Nullable<int> destinationTestSetId, object userState) {
            if ((this.onBeginTestSet_MoveDelegate == null)) {
                this.onBeginTestSet_MoveDelegate = new BeginOperationDelegate(this.OnBeginTestSet_Move);
            }
            if ((this.onEndTestSet_MoveDelegate == null)) {
                this.onEndTestSet_MoveDelegate = new EndOperationDelegate(this.OnEndTestSet_Move);
            }
            if ((this.onTestSet_MoveCompletedDelegate == null)) {
                this.onTestSet_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_MoveDelegate, new object[] {
                        testSetId,
                        destinationTestSetId}, this.onEndTestSet_MoveDelegate, this.onTestSet_MoveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> TestSet_RetrieveComments(int TestSetId) {
            return base.Channel.TestSet_RetrieveComments(TestSetId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_RetrieveComments(int TestSetId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_RetrieveComments(TestSetId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndTestSet_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndTestSet_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int TestSetId = ((int)(inValues[0]));
            return this.BeginTestSet_RetrieveComments(TestSetId, callback, asyncState);
        }
        
        private object[] OnEndTestSet_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndTestSet_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_RetrieveCommentsCompleted(object state) {
            if ((this.TestSet_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_RetrieveCommentsCompleted(this, new TestSet_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_RetrieveCommentsAsync(int TestSetId) {
            this.TestSet_RetrieveCommentsAsync(TestSetId, null);
        }
        
        public void TestSet_RetrieveCommentsAsync(int TestSetId, object userState) {
            if ((this.onBeginTestSet_RetrieveCommentsDelegate == null)) {
                this.onBeginTestSet_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginTestSet_RetrieveComments);
            }
            if ((this.onEndTestSet_RetrieveCommentsDelegate == null)) {
                this.onEndTestSet_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndTestSet_RetrieveComments);
            }
            if ((this.onTestSet_RetrieveCommentsCompletedDelegate == null)) {
                this.onTestSet_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_RetrieveCommentsDelegate, new object[] {
                        TestSetId}, this.onEndTestSet_RetrieveCommentsDelegate, this.onTestSet_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment TestSet_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            return base.Channel.TestSet_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSet_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSet_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndTestSet_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndTestSet_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginTestSet_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(inValues[0]));
            return this.BeginTestSet_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndTestSet_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment retVal = this.EndTestSet_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSet_CreateCommentCompleted(object state) {
            if ((this.TestSet_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSet_CreateCommentCompleted(this, new TestSet_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSet_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            this.TestSet_CreateCommentAsync(remoteComment, null);
        }
        
        public void TestSet_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, object userState) {
            if ((this.onBeginTestSet_CreateCommentDelegate == null)) {
                this.onBeginTestSet_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginTestSet_CreateComment);
            }
            if ((this.onEndTestSet_CreateCommentDelegate == null)) {
                this.onEndTestSet_CreateCommentDelegate = new EndOperationDelegate(this.OnEndTestSet_CreateComment);
            }
            if ((this.onTestSet_CreateCommentCompletedDelegate == null)) {
                this.onTestSet_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSet_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginTestSet_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndTestSet_CreateCommentDelegate, this.onTestSet_CreateCommentCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId) {
            return base.Channel.User_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_Create(System.IAsyncResult result) {
            return base.Channel.EndUser_Create(result);
        }
        
        private System.IAsyncResult OnBeginUser_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser)(inValues[0]));
            string password = ((string)(inValues[1]));
            string passwordQuestion = ((string)(inValues[2]));
            string passwordAnswer = ((string)(inValues[3]));
            System.Nullable<int> projectRoleId = ((System.Nullable<int>)(inValues[4]));
            return this.BeginUser_Create(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, callback, asyncState);
        }
        
        private object[] OnEndUser_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser retVal = this.EndUser_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_CreateCompleted(object state) {
            if ((this.User_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_CreateCompleted(this, new User_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId) {
            this.User_CreateAsync(remoteUser, password, passwordQuestion, passwordAnswer, projectRoleId, null);
        }
        
        public void User_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser remoteUser, string password, string passwordQuestion, string passwordAnswer, System.Nullable<int> projectRoleId, object userState) {
            if ((this.onBeginUser_CreateDelegate == null)) {
                this.onBeginUser_CreateDelegate = new BeginOperationDelegate(this.OnBeginUser_Create);
            }
            if ((this.onEndUser_CreateDelegate == null)) {
                this.onEndUser_CreateDelegate = new EndOperationDelegate(this.OnEndUser_Create);
            }
            if ((this.onUser_CreateCompletedDelegate == null)) {
                this.onUser_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginUser_CreateDelegate, new object[] {
                        remoteUser,
                        password,
                        passwordQuestion,
                        passwordAnswer,
                        projectRoleId}, this.onEndUser_CreateDelegate, this.onUser_CreateCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_RetrieveById(int userId) {
            return base.Channel.User_RetrieveById(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RetrieveById(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RetrieveById(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndUser_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginUser_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_RetrieveById(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser retVal = this.EndUser_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveByIdCompleted(object state) {
            if ((this.User_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveByIdCompleted(this, new User_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveByIdAsync(int userId) {
            this.User_RetrieveByIdAsync(userId, null);
        }
        
        public void User_RetrieveByIdAsync(int userId, object userState) {
            if ((this.onBeginUser_RetrieveByIdDelegate == null)) {
                this.onBeginUser_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginUser_RetrieveById);
            }
            if ((this.onEndUser_RetrieveByIdDelegate == null)) {
                this.onEndUser_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndUser_RetrieveById);
            }
            if ((this.onUser_RetrieveByIdCompletedDelegate == null)) {
                this.onUser_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveByIdDelegate, new object[] {
                        userId}, this.onEndUser_RetrieveByIdDelegate, this.onUser_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser User_RetrieveByUserName(string userName) {
            return base.Channel.User_RetrieveByUserName(userName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_RetrieveByUserName(string userName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_RetrieveByUserName(userName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser EndUser_RetrieveByUserName(System.IAsyncResult result) {
            return base.Channel.EndUser_RetrieveByUserName(result);
        }
        
        private System.IAsyncResult OnBeginUser_RetrieveByUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            return this.BeginUser_RetrieveByUserName(userName, callback, asyncState);
        }
        
        private object[] OnEndUser_RetrieveByUserName(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteUser retVal = this.EndUser_RetrieveByUserName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUser_RetrieveByUserNameCompleted(object state) {
            if ((this.User_RetrieveByUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_RetrieveByUserNameCompleted(this, new User_RetrieveByUserNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_RetrieveByUserNameAsync(string userName) {
            this.User_RetrieveByUserNameAsync(userName, null);
        }
        
        public void User_RetrieveByUserNameAsync(string userName, object userState) {
            if ((this.onBeginUser_RetrieveByUserNameDelegate == null)) {
                this.onBeginUser_RetrieveByUserNameDelegate = new BeginOperationDelegate(this.OnBeginUser_RetrieveByUserName);
            }
            if ((this.onEndUser_RetrieveByUserNameDelegate == null)) {
                this.onEndUser_RetrieveByUserNameDelegate = new EndOperationDelegate(this.OnEndUser_RetrieveByUserName);
            }
            if ((this.onUser_RetrieveByUserNameCompletedDelegate == null)) {
                this.onUser_RetrieveByUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_RetrieveByUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginUser_RetrieveByUserNameDelegate, new object[] {
                        userName}, this.onEndUser_RetrieveByUserNameDelegate, this.onUser_RetrieveByUserNameCompletedDelegate, userState);
        }
        
        public void User_Delete(int userId) {
            base.Channel.User_Delete(userId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUser_Delete(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUser_Delete(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUser_Delete(System.IAsyncResult result) {
            base.Channel.EndUser_Delete(result);
        }
        
        private System.IAsyncResult OnBeginUser_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return this.BeginUser_Delete(userId, callback, asyncState);
        }
        
        private object[] OnEndUser_Delete(System.IAsyncResult result) {
            this.EndUser_Delete(result);
            return null;
        }
        
        private void OnUser_DeleteCompleted(object state) {
            if ((this.User_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.User_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void User_DeleteAsync(int userId) {
            this.User_DeleteAsync(userId, null);
        }
        
        public void User_DeleteAsync(int userId, object userState) {
            if ((this.onBeginUser_DeleteDelegate == null)) {
                this.onBeginUser_DeleteDelegate = new BeginOperationDelegate(this.OnBeginUser_Delete);
            }
            if ((this.onEndUser_DeleteDelegate == null)) {
                this.onEndUser_DeleteDelegate = new EndOperationDelegate(this.OnEndUser_Delete);
            }
            if ((this.onUser_DeleteCompletedDelegate == null)) {
                this.onUser_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUser_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginUser_DeleteDelegate, new object[] {
                        userId}, this.onEndUser_DeleteDelegate, this.onUser_DeleteCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> AutomationHost_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.AutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> EndAutomationHost_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginAutomationHost_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost> retVal = this.EndAutomationHost_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveCompleted(object state) {
            if ((this.AutomationHost_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveCompleted(this, new AutomationHost_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.AutomationHost_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void AutomationHost_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginAutomationHost_RetrieveDelegate == null)) {
                this.onBeginAutomationHost_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Retrieve);
            }
            if ((this.onEndAutomationHost_RetrieveDelegate == null)) {
                this.onEndAutomationHost_RetrieveDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Retrieve);
            }
            if ((this.onAutomationHost_RetrieveCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndAutomationHost_RetrieveDelegate, this.onAutomationHost_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_RetrieveById(int automationHostId) {
            return base.Channel.AutomationHost_RetrieveById(automationHostId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_RetrieveById(int automationHostId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_RetrieveById(automationHostId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int automationHostId = ((int)(inValues[0]));
            return this.BeginAutomationHost_RetrieveById(automationHostId, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost retVal = this.EndAutomationHost_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveByIdCompleted(object state) {
            if ((this.AutomationHost_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveByIdCompleted(this, new AutomationHost_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveByIdAsync(int automationHostId) {
            this.AutomationHost_RetrieveByIdAsync(automationHostId, null);
        }
        
        public void AutomationHost_RetrieveByIdAsync(int automationHostId, object userState) {
            if ((this.onBeginAutomationHost_RetrieveByIdDelegate == null)) {
                this.onBeginAutomationHost_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_RetrieveById);
            }
            if ((this.onEndAutomationHost_RetrieveByIdDelegate == null)) {
                this.onEndAutomationHost_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndAutomationHost_RetrieveById);
            }
            if ((this.onAutomationHost_RetrieveByIdCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveByIdDelegate, new object[] {
                        automationHostId}, this.onEndAutomationHost_RetrieveByIdDelegate, this.onAutomationHost_RetrieveByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_RetrieveByToken(string token) {
            return base.Channel.AutomationHost_RetrieveByToken(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_RetrieveByToken(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_RetrieveByToken(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_RetrieveByToken(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_RetrieveByToken(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_RetrieveByToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginAutomationHost_RetrieveByToken(token, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_RetrieveByToken(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost retVal = this.EndAutomationHost_RetrieveByToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_RetrieveByTokenCompleted(object state) {
            if ((this.AutomationHost_RetrieveByTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_RetrieveByTokenCompleted(this, new AutomationHost_RetrieveByTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_RetrieveByTokenAsync(string token) {
            this.AutomationHost_RetrieveByTokenAsync(token, null);
        }
        
        public void AutomationHost_RetrieveByTokenAsync(string token, object userState) {
            if ((this.onBeginAutomationHost_RetrieveByTokenDelegate == null)) {
                this.onBeginAutomationHost_RetrieveByTokenDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_RetrieveByToken);
            }
            if ((this.onEndAutomationHost_RetrieveByTokenDelegate == null)) {
                this.onEndAutomationHost_RetrieveByTokenDelegate = new EndOperationDelegate(this.OnEndAutomationHost_RetrieveByToken);
            }
            if ((this.onAutomationHost_RetrieveByTokenCompletedDelegate == null)) {
                this.onAutomationHost_RetrieveByTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_RetrieveByTokenCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_RetrieveByTokenDelegate, new object[] {
                        token}, this.onEndAutomationHost_RetrieveByTokenDelegate, this.onAutomationHost_RetrieveByTokenCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost AutomationHost_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost) {
            return base.Channel.AutomationHost_Create(remoteAutomationHost);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Create(remoteAutomationHost, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost EndAutomationHost_Create(System.IAsyncResult result) {
            return base.Channel.EndAutomationHost_Create(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost)(inValues[0]));
            return this.BeginAutomationHost_Create(remoteAutomationHost, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost retVal = this.EndAutomationHost_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAutomationHost_CreateCompleted(object state) {
            if ((this.AutomationHost_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_CreateCompleted(this, new AutomationHost_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost) {
            this.AutomationHost_CreateAsync(remoteAutomationHost, null);
        }
        
        public void AutomationHost_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, object userState) {
            if ((this.onBeginAutomationHost_CreateDelegate == null)) {
                this.onBeginAutomationHost_CreateDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Create);
            }
            if ((this.onEndAutomationHost_CreateDelegate == null)) {
                this.onEndAutomationHost_CreateDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Create);
            }
            if ((this.onAutomationHost_CreateCompletedDelegate == null)) {
                this.onAutomationHost_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_CreateDelegate, new object[] {
                        remoteAutomationHost}, this.onEndAutomationHost_CreateDelegate, this.onAutomationHost_CreateCompletedDelegate, userState);
        }
        
        public void AutomationHost_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost) {
            base.Channel.AutomationHost_Update(remoteAutomationHost);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAutomationHost_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAutomationHost_Update(remoteAutomationHost, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAutomationHost_Update(System.IAsyncResult result) {
            base.Channel.EndAutomationHost_Update(result);
        }
        
        private System.IAsyncResult OnBeginAutomationHost_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost)(inValues[0]));
            return this.BeginAutomationHost_Update(remoteAutomationHost, callback, asyncState);
        }
        
        private object[] OnEndAutomationHost_Update(System.IAsyncResult result) {
            this.EndAutomationHost_Update(result);
            return null;
        }
        
        private void OnAutomationHost_UpdateCompleted(object state) {
            if ((this.AutomationHost_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AutomationHost_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AutomationHost_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost) {
            this.AutomationHost_UpdateAsync(remoteAutomationHost, null);
        }
        
        public void AutomationHost_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAutomationHost remoteAutomationHost, object userState) {
            if ((this.onBeginAutomationHost_UpdateDelegate == null)) {
                this.onBeginAutomationHost_UpdateDelegate = new BeginOperationDelegate(this.OnBeginAutomationHost_Update);
            }
            if ((this.onEndAutomationHost_UpdateDelegate == null)) {
                this.onEndAutomationHost_UpdateDelegate = new EndOperationDelegate(this.OnEndAutomationHost_Update);
            }
            if ((this.onAutomationHost_UpdateCompletedDelegate == null)) {
                this.onAutomationHost_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAutomationHost_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginAutomationHost_UpdateDelegate, new object[] {
                        remoteAutomationHost}, this.onEndAutomationHost_UpdateDelegate, this.onAutomationHost_UpdateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> CustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted) {
            return base.Channel.CustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveForArtifactType(int artifactTypeId, bool includeDeleted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> EndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveForArtifactType(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveForArtifactType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            bool includeDeleted = ((bool)(inValues[1]));
            return this.BeginCustomProperty_RetrieveForArtifactType(artifactTypeId, includeDeleted, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveForArtifactType(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty> retVal = this.EndCustomProperty_RetrieveForArtifactType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveForArtifactTypeCompleted(object state) {
            if ((this.CustomProperty_RetrieveForArtifactTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveForArtifactTypeCompleted(this, new CustomProperty_RetrieveForArtifactTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveForArtifactTypeAsync(int artifactTypeId, bool includeDeleted) {
            this.CustomProperty_RetrieveForArtifactTypeAsync(artifactTypeId, includeDeleted, null);
        }
        
        public void CustomProperty_RetrieveForArtifactTypeAsync(int artifactTypeId, bool includeDeleted, object userState) {
            if ((this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate == null)) {
                this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveForArtifactType);
            }
            if ((this.onEndCustomProperty_RetrieveForArtifactTypeDelegate == null)) {
                this.onEndCustomProperty_RetrieveForArtifactTypeDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveForArtifactType);
            }
            if ((this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveForArtifactTypeCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveForArtifactTypeDelegate, new object[] {
                        artifactTypeId,
                        includeDeleted}, this.onEndCustomProperty_RetrieveForArtifactTypeDelegate, this.onCustomProperty_RetrieveForArtifactTypeCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomProperty_AddCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList) {
            return base.Channel.CustomProperty_AddCustomList(remoteCustomList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddCustomList(remoteCustomList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList EndCustomProperty_AddCustomList(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddCustomList(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddCustomList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList)(inValues[0]));
            return this.BeginCustomProperty_AddCustomList(remoteCustomList, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddCustomList(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList retVal = this.EndCustomProperty_AddCustomList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddCustomListCompleted(object state) {
            if ((this.CustomProperty_AddCustomListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddCustomListCompleted(this, new CustomProperty_AddCustomListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddCustomListAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList) {
            this.CustomProperty_AddCustomListAsync(remoteCustomList, null);
        }
        
        public void CustomProperty_AddCustomListAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, object userState) {
            if ((this.onBeginCustomProperty_AddCustomListDelegate == null)) {
                this.onBeginCustomProperty_AddCustomListDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddCustomList);
            }
            if ((this.onEndCustomProperty_AddCustomListDelegate == null)) {
                this.onEndCustomProperty_AddCustomListDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddCustomList);
            }
            if ((this.onCustomProperty_AddCustomListCompletedDelegate == null)) {
                this.onCustomProperty_AddCustomListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddCustomListCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddCustomListDelegate, new object[] {
                        remoteCustomList}, this.onEndCustomProperty_AddCustomListDelegate, this.onCustomProperty_AddCustomListCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue CustomProperty_AddCustomListValue(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue) {
            return base.Channel.CustomProperty_AddCustomListValue(remoteCustomListValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddCustomListValue(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddCustomListValue(remoteCustomListValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue EndCustomProperty_AddCustomListValue(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddCustomListValue(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddCustomListValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue)(inValues[0]));
            return this.BeginCustomProperty_AddCustomListValue(remoteCustomListValue, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddCustomListValue(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue retVal = this.EndCustomProperty_AddCustomListValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddCustomListValueCompleted(object state) {
            if ((this.CustomProperty_AddCustomListValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddCustomListValueCompleted(this, new CustomProperty_AddCustomListValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddCustomListValueAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue) {
            this.CustomProperty_AddCustomListValueAsync(remoteCustomListValue, null);
        }
        
        public void CustomProperty_AddCustomListValueAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomListValue remoteCustomListValue, object userState) {
            if ((this.onBeginCustomProperty_AddCustomListValueDelegate == null)) {
                this.onBeginCustomProperty_AddCustomListValueDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddCustomListValue);
            }
            if ((this.onEndCustomProperty_AddCustomListValueDelegate == null)) {
                this.onEndCustomProperty_AddCustomListValueDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddCustomListValue);
            }
            if ((this.onCustomProperty_AddCustomListValueCompletedDelegate == null)) {
                this.onCustomProperty_AddCustomListValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddCustomListValueCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddCustomListValueDelegate, new object[] {
                        remoteCustomListValue}, this.onEndCustomProperty_AddCustomListValueDelegate, this.onCustomProperty_AddCustomListValueCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty CustomProperty_AddDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            return base.Channel.CustomProperty_AddDefinition(remoteCustomProperty, customListId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_AddDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_AddDefinition(remoteCustomProperty, customListId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty EndCustomProperty_AddDefinition(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_AddDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_AddDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty)(inValues[0]));
            System.Nullable<int> customListId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginCustomProperty_AddDefinition(remoteCustomProperty, customListId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_AddDefinition(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty retVal = this.EndCustomProperty_AddDefinition(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_AddDefinitionCompleted(object state) {
            if ((this.CustomProperty_AddDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_AddDefinitionCompleted(this, new CustomProperty_AddDefinitionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_AddDefinitionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId) {
            this.CustomProperty_AddDefinitionAsync(remoteCustomProperty, customListId, null);
        }
        
        public void CustomProperty_AddDefinitionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.Nullable<int> customListId, object userState) {
            if ((this.onBeginCustomProperty_AddDefinitionDelegate == null)) {
                this.onBeginCustomProperty_AddDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_AddDefinition);
            }
            if ((this.onEndCustomProperty_AddDefinitionDelegate == null)) {
                this.onEndCustomProperty_AddDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_AddDefinition);
            }
            if ((this.onCustomProperty_AddDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_AddDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_AddDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_AddDefinitionDelegate, new object[] {
                        remoteCustomProperty,
                        customListId}, this.onEndCustomProperty_AddDefinitionDelegate, this.onCustomProperty_AddDefinitionCompletedDelegate, userState);
        }
        
        public void CustomProperty_UpdateDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty) {
            base.Channel.CustomProperty_UpdateDefinition(remoteCustomProperty);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_UpdateDefinition(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_UpdateDefinition(remoteCustomProperty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_UpdateDefinition(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_UpdateDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_UpdateDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty)(inValues[0]));
            return this.BeginCustomProperty_UpdateDefinition(remoteCustomProperty, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_UpdateDefinition(System.IAsyncResult result) {
            this.EndCustomProperty_UpdateDefinition(result);
            return null;
        }
        
        private void OnCustomProperty_UpdateDefinitionCompleted(object state) {
            if ((this.CustomProperty_UpdateDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_UpdateDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_UpdateDefinitionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty) {
            this.CustomProperty_UpdateDefinitionAsync(remoteCustomProperty, null);
        }
        
        public void CustomProperty_UpdateDefinitionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomProperty remoteCustomProperty, object userState) {
            if ((this.onBeginCustomProperty_UpdateDefinitionDelegate == null)) {
                this.onBeginCustomProperty_UpdateDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_UpdateDefinition);
            }
            if ((this.onEndCustomProperty_UpdateDefinitionDelegate == null)) {
                this.onEndCustomProperty_UpdateDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_UpdateDefinition);
            }
            if ((this.onCustomProperty_UpdateDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_UpdateDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_UpdateDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_UpdateDefinitionDelegate, new object[] {
                        remoteCustomProperty}, this.onEndCustomProperty_UpdateDefinitionDelegate, this.onCustomProperty_UpdateDefinitionCompletedDelegate, userState);
        }
        
        public void CustomProperty_DeleteDefinition(int customPropertyId) {
            base.Channel.CustomProperty_DeleteDefinition(customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_DeleteDefinition(int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_DeleteDefinition(customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_DeleteDefinition(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_DeleteDefinition(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_DeleteDefinition(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customPropertyId = ((int)(inValues[0]));
            return this.BeginCustomProperty_DeleteDefinition(customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_DeleteDefinition(System.IAsyncResult result) {
            this.EndCustomProperty_DeleteDefinition(result);
            return null;
        }
        
        private void OnCustomProperty_DeleteDefinitionCompleted(object state) {
            if ((this.CustomProperty_DeleteDefinitionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_DeleteDefinitionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_DeleteDefinitionAsync(int customPropertyId) {
            this.CustomProperty_DeleteDefinitionAsync(customPropertyId, null);
        }
        
        public void CustomProperty_DeleteDefinitionAsync(int customPropertyId, object userState) {
            if ((this.onBeginCustomProperty_DeleteDefinitionDelegate == null)) {
                this.onBeginCustomProperty_DeleteDefinitionDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_DeleteDefinition);
            }
            if ((this.onEndCustomProperty_DeleteDefinitionDelegate == null)) {
                this.onEndCustomProperty_DeleteDefinitionDelegate = new EndOperationDelegate(this.OnEndCustomProperty_DeleteDefinition);
            }
            if ((this.onCustomProperty_DeleteDefinitionCompletedDelegate == null)) {
                this.onCustomProperty_DeleteDefinitionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_DeleteDefinitionCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_DeleteDefinitionDelegate, new object[] {
                        customPropertyId}, this.onEndCustomProperty_DeleteDefinitionDelegate, this.onCustomProperty_DeleteDefinitionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList CustomProperty_RetrieveCustomListById(int customListId) {
            return base.Channel.CustomProperty_RetrieveCustomListById(customListId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveCustomListById(int customListId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveCustomListById(customListId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList EndCustomProperty_RetrieveCustomListById(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveCustomListById(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveCustomListById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int customListId = ((int)(inValues[0]));
            return this.BeginCustomProperty_RetrieveCustomListById(customListId, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveCustomListById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList retVal = this.EndCustomProperty_RetrieveCustomListById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveCustomListByIdCompleted(object state) {
            if ((this.CustomProperty_RetrieveCustomListByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveCustomListByIdCompleted(this, new CustomProperty_RetrieveCustomListByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveCustomListByIdAsync(int customListId) {
            this.CustomProperty_RetrieveCustomListByIdAsync(customListId, null);
        }
        
        public void CustomProperty_RetrieveCustomListByIdAsync(int customListId, object userState) {
            if ((this.onBeginCustomProperty_RetrieveCustomListByIdDelegate == null)) {
                this.onBeginCustomProperty_RetrieveCustomListByIdDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveCustomListById);
            }
            if ((this.onEndCustomProperty_RetrieveCustomListByIdDelegate == null)) {
                this.onEndCustomProperty_RetrieveCustomListByIdDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveCustomListById);
            }
            if ((this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveCustomListByIdCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveCustomListByIdDelegate, new object[] {
                        customListId}, this.onEndCustomProperty_RetrieveCustomListByIdDelegate, this.onCustomProperty_RetrieveCustomListByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> CustomProperty_RetrieveCustomLists() {
            return base.Channel.CustomProperty_RetrieveCustomLists();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_RetrieveCustomLists(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_RetrieveCustomLists(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> EndCustomProperty_RetrieveCustomLists(System.IAsyncResult result) {
            return base.Channel.EndCustomProperty_RetrieveCustomLists(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_RetrieveCustomLists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginCustomProperty_RetrieveCustomLists(callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_RetrieveCustomLists(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList> retVal = this.EndCustomProperty_RetrieveCustomLists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomProperty_RetrieveCustomListsCompleted(object state) {
            if ((this.CustomProperty_RetrieveCustomListsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_RetrieveCustomListsCompleted(this, new CustomProperty_RetrieveCustomListsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_RetrieveCustomListsAsync() {
            this.CustomProperty_RetrieveCustomListsAsync(null);
        }
        
        public void CustomProperty_RetrieveCustomListsAsync(object userState) {
            if ((this.onBeginCustomProperty_RetrieveCustomListsDelegate == null)) {
                this.onBeginCustomProperty_RetrieveCustomListsDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_RetrieveCustomLists);
            }
            if ((this.onEndCustomProperty_RetrieveCustomListsDelegate == null)) {
                this.onEndCustomProperty_RetrieveCustomListsDelegate = new EndOperationDelegate(this.OnEndCustomProperty_RetrieveCustomLists);
            }
            if ((this.onCustomProperty_RetrieveCustomListsCompletedDelegate == null)) {
                this.onCustomProperty_RetrieveCustomListsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_RetrieveCustomListsCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_RetrieveCustomListsDelegate, null, this.onEndCustomProperty_RetrieveCustomListsDelegate, this.onCustomProperty_RetrieveCustomListsCompletedDelegate, userState);
        }
        
        public void CustomProperty_UpdateCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList) {
            base.Channel.CustomProperty_UpdateCustomList(remoteCustomList);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCustomProperty_UpdateCustomList(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomProperty_UpdateCustomList(remoteCustomList, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCustomProperty_UpdateCustomList(System.IAsyncResult result) {
            base.Channel.EndCustomProperty_UpdateCustomList(result);
        }
        
        private System.IAsyncResult OnBeginCustomProperty_UpdateCustomList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList)(inValues[0]));
            return this.BeginCustomProperty_UpdateCustomList(remoteCustomList, callback, asyncState);
        }
        
        private object[] OnEndCustomProperty_UpdateCustomList(System.IAsyncResult result) {
            this.EndCustomProperty_UpdateCustomList(result);
            return null;
        }
        
        private void OnCustomProperty_UpdateCustomListCompleted(object state) {
            if ((this.CustomProperty_UpdateCustomListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomProperty_UpdateCustomListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomProperty_UpdateCustomListAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList) {
            this.CustomProperty_UpdateCustomListAsync(remoteCustomList, null);
        }
        
        public void CustomProperty_UpdateCustomListAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteCustomList remoteCustomList, object userState) {
            if ((this.onBeginCustomProperty_UpdateCustomListDelegate == null)) {
                this.onBeginCustomProperty_UpdateCustomListDelegate = new BeginOperationDelegate(this.OnBeginCustomProperty_UpdateCustomList);
            }
            if ((this.onEndCustomProperty_UpdateCustomListDelegate == null)) {
                this.onEndCustomProperty_UpdateCustomListDelegate = new EndOperationDelegate(this.OnEndCustomProperty_UpdateCustomList);
            }
            if ((this.onCustomProperty_UpdateCustomListCompletedDelegate == null)) {
                this.onCustomProperty_UpdateCustomListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomProperty_UpdateCustomListCompleted);
            }
            base.InvokeAsync(this.onBeginCustomProperty_UpdateCustomListDelegate, new object[] {
                        remoteCustomList}, this.onEndCustomProperty_UpdateCustomListDelegate, this.onCustomProperty_UpdateCustomListCompletedDelegate, userState);
        }
        
        public void DataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            base.Channel.DataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_AddArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_AddArtifactMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_AddArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_AddArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(inValues[2]));
            return this.BeginDataMapping_AddArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_AddArtifactMappings(System.IAsyncResult result) {
            this.EndDataMapping_AddArtifactMappings(result);
            return null;
        }
        
        private void OnDataMapping_AddArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_AddArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_AddArtifactMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_AddArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            this.DataMapping_AddArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, remoteDataMappings, null);
        }
        
        public void DataMapping_AddArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_AddArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_AddArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_AddArtifactMappings);
            }
            if ((this.onEndDataMapping_AddArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_AddArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_AddArtifactMappings);
            }
            if ((this.onDataMapping_AddArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_AddArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_AddArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_AddArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        remoteDataMappings}, this.onEndDataMapping_AddArtifactMappingsDelegate, this.onDataMapping_AddArtifactMappingsCompletedDelegate, userState);
        }
        
        public void DataMapping_AddUserMappings(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            base.Channel.DataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_AddUserMappings(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_AddUserMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_AddUserMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_AddUserMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(inValues[1]));
            return this.BeginDataMapping_AddUserMappings(dataSyncSystemId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_AddUserMappings(System.IAsyncResult result) {
            this.EndDataMapping_AddUserMappings(result);
            return null;
        }
        
        private void OnDataMapping_AddUserMappingsCompleted(object state) {
            if ((this.DataMapping_AddUserMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_AddUserMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_AddUserMappingsAsync(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            this.DataMapping_AddUserMappingsAsync(dataSyncSystemId, remoteDataMappings, null);
        }
        
        public void DataMapping_AddUserMappingsAsync(int dataSyncSystemId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_AddUserMappingsDelegate == null)) {
                this.onBeginDataMapping_AddUserMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_AddUserMappings);
            }
            if ((this.onEndDataMapping_AddUserMappingsDelegate == null)) {
                this.onEndDataMapping_AddUserMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_AddUserMappings);
            }
            if ((this.onDataMapping_AddUserMappingsCompletedDelegate == null)) {
                this.onDataMapping_AddUserMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_AddUserMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_AddUserMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        remoteDataMappings}, this.onEndDataMapping_AddUserMappingsDelegate, this.onDataMapping_AddUserMappingsCompletedDelegate, userState);
        }
        
        public void DataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            base.Channel.DataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RemoveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDataMapping_RemoveArtifactMappings(System.IAsyncResult result) {
            base.Channel.EndDataMapping_RemoveArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RemoveArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping>)(inValues[2]));
            return this.BeginDataMapping_RemoveArtifactMappings(dataSyncSystemId, artifactTypeId, remoteDataMappings, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RemoveArtifactMappings(System.IAsyncResult result) {
            this.EndDataMapping_RemoveArtifactMappings(result);
            return null;
        }
        
        private void OnDataMapping_RemoveArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_RemoveArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RemoveArtifactMappingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RemoveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings) {
            this.DataMapping_RemoveArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, remoteDataMappings, null);
        }
        
        public void DataMapping_RemoveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> remoteDataMappings, object userState) {
            if ((this.onBeginDataMapping_RemoveArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_RemoveArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RemoveArtifactMappings);
            }
            if ((this.onEndDataMapping_RemoveArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_RemoveArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RemoveArtifactMappings);
            }
            if ((this.onDataMapping_RemoveArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_RemoveArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RemoveArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RemoveArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        remoteDataMappings}, this.onEndDataMapping_RemoveArtifactMappingsDelegate, this.onDataMapping_RemoveArtifactMappingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId) {
            return base.Channel.DataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveArtifactMappings(int dataSyncSystemId, int artifactTypeId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveArtifactMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveArtifactMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            return this.BeginDataMapping_RetrieveArtifactMappings(dataSyncSystemId, artifactTypeId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveArtifactMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> retVal = this.EndDataMapping_RetrieveArtifactMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveArtifactMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveArtifactMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveArtifactMappingsCompleted(this, new DataMapping_RetrieveArtifactMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId) {
            this.DataMapping_RetrieveArtifactMappingsAsync(dataSyncSystemId, artifactTypeId, null);
        }
        
        public void DataMapping_RetrieveArtifactMappingsAsync(int dataSyncSystemId, int artifactTypeId, object userState) {
            if ((this.onBeginDataMapping_RetrieveArtifactMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveArtifactMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveArtifactMappings);
            }
            if ((this.onEndDataMapping_RetrieveArtifactMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveArtifactMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveArtifactMappings);
            }
            if ((this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveArtifactMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveArtifactMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId}, this.onEndDataMapping_RetrieveArtifactMappingsDelegate, this.onDataMapping_RetrieveArtifactMappingsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping DataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyMapping(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping EndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveCustomPropertyMapping(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveCustomPropertyMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int customPropertyId = ((int)(inValues[2]));
            return this.BeginDataMapping_RetrieveCustomPropertyMapping(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveCustomPropertyMapping(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping retVal = this.EndDataMapping_RetrieveCustomPropertyMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveCustomPropertyMappingCompleted(object state) {
            if ((this.DataMapping_RetrieveCustomPropertyMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveCustomPropertyMappingCompleted(this, new DataMapping_RetrieveCustomPropertyMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveCustomPropertyMappingAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            this.DataMapping_RetrieveCustomPropertyMappingAsync(dataSyncSystemId, artifactTypeId, customPropertyId, null);
        }
        
        public void DataMapping_RetrieveCustomPropertyMappingAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId, object userState) {
            if ((this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate == null)) {
                this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveCustomPropertyMapping);
            }
            if ((this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate == null)) {
                this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveCustomPropertyMapping);
            }
            if ((this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate == null)) {
                this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveCustomPropertyMappingCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveCustomPropertyMappingDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        customPropertyId}, this.onEndDataMapping_RetrieveCustomPropertyMappingDelegate, this.onDataMapping_RetrieveCustomPropertyMappingCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            return base.Channel.DataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveCustomPropertyValueMappings(int dataSyncSystemId, int artifactTypeId, int customPropertyId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveCustomPropertyValueMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveCustomPropertyValueMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int customPropertyId = ((int)(inValues[2]));
            return this.BeginDataMapping_RetrieveCustomPropertyValueMappings(dataSyncSystemId, artifactTypeId, customPropertyId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveCustomPropertyValueMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> retVal = this.EndDataMapping_RetrieveCustomPropertyValueMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveCustomPropertyValueMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveCustomPropertyValueMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveCustomPropertyValueMappingsCompleted(this, new DataMapping_RetrieveCustomPropertyValueMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveCustomPropertyValueMappingsAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId) {
            this.DataMapping_RetrieveCustomPropertyValueMappingsAsync(dataSyncSystemId, artifactTypeId, customPropertyId, null);
        }
        
        public void DataMapping_RetrieveCustomPropertyValueMappingsAsync(int dataSyncSystemId, int artifactTypeId, int customPropertyId, object userState) {
            if ((this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveCustomPropertyValueMappings);
            }
            if ((this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveCustomPropertyValueMappings);
            }
            if ((this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveCustomPropertyValueMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveCustomPropertyValueMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactTypeId,
                        customPropertyId}, this.onEndDataMapping_RetrieveCustomPropertyValueMappingsDelegate, this.onDataMapping_RetrieveCustomPropertyValueMappingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId) {
            return base.Channel.DataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveFieldValueMappings(int dataSyncSystemId, int artifactFieldId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveFieldValueMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveFieldValueMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            int artifactFieldId = ((int)(inValues[1]));
            return this.BeginDataMapping_RetrieveFieldValueMappings(dataSyncSystemId, artifactFieldId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveFieldValueMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> retVal = this.EndDataMapping_RetrieveFieldValueMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveFieldValueMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveFieldValueMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveFieldValueMappingsCompleted(this, new DataMapping_RetrieveFieldValueMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveFieldValueMappingsAsync(int dataSyncSystemId, int artifactFieldId) {
            this.DataMapping_RetrieveFieldValueMappingsAsync(dataSyncSystemId, artifactFieldId, null);
        }
        
        public void DataMapping_RetrieveFieldValueMappingsAsync(int dataSyncSystemId, int artifactFieldId, object userState) {
            if ((this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveFieldValueMappings);
            }
            if ((this.onEndDataMapping_RetrieveFieldValueMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveFieldValueMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveFieldValueMappings);
            }
            if ((this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveFieldValueMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveFieldValueMappingsDelegate, new object[] {
                        dataSyncSystemId,
                        artifactFieldId}, this.onEndDataMapping_RetrieveFieldValueMappingsDelegate, this.onDataMapping_RetrieveFieldValueMappingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveProjectMappings(int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveProjectMappings(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveProjectMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveProjectMappings(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveProjectMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveProjectMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveProjectMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataMapping_RetrieveProjectMappings(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveProjectMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> retVal = this.EndDataMapping_RetrieveProjectMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveProjectMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveProjectMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveProjectMappingsCompleted(this, new DataMapping_RetrieveProjectMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveProjectMappingsAsync(int dataSyncSystemId) {
            this.DataMapping_RetrieveProjectMappingsAsync(dataSyncSystemId, null);
        }
        
        public void DataMapping_RetrieveProjectMappingsAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataMapping_RetrieveProjectMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveProjectMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveProjectMappings);
            }
            if ((this.onEndDataMapping_RetrieveProjectMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveProjectMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveProjectMappings);
            }
            if ((this.onDataMapping_RetrieveProjectMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveProjectMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveProjectMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveProjectMappingsDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataMapping_RetrieveProjectMappingsDelegate, this.onDataMapping_RetrieveProjectMappingsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> DataMapping_RetrieveUserMappings(int dataSyncSystemId) {
            return base.Channel.DataMapping_RetrieveUserMappings(dataSyncSystemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDataMapping_RetrieveUserMappings(int dataSyncSystemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDataMapping_RetrieveUserMappings(dataSyncSystemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> EndDataMapping_RetrieveUserMappings(System.IAsyncResult result) {
            return base.Channel.EndDataMapping_RetrieveUserMappings(result);
        }
        
        private System.IAsyncResult OnBeginDataMapping_RetrieveUserMappings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int dataSyncSystemId = ((int)(inValues[0]));
            return this.BeginDataMapping_RetrieveUserMappings(dataSyncSystemId, callback, asyncState);
        }
        
        private object[] OnEndDataMapping_RetrieveUserMappings(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDataMapping> retVal = this.EndDataMapping_RetrieveUserMappings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDataMapping_RetrieveUserMappingsCompleted(object state) {
            if ((this.DataMapping_RetrieveUserMappingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DataMapping_RetrieveUserMappingsCompleted(this, new DataMapping_RetrieveUserMappingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DataMapping_RetrieveUserMappingsAsync(int dataSyncSystemId) {
            this.DataMapping_RetrieveUserMappingsAsync(dataSyncSystemId, null);
        }
        
        public void DataMapping_RetrieveUserMappingsAsync(int dataSyncSystemId, object userState) {
            if ((this.onBeginDataMapping_RetrieveUserMappingsDelegate == null)) {
                this.onBeginDataMapping_RetrieveUserMappingsDelegate = new BeginOperationDelegate(this.OnBeginDataMapping_RetrieveUserMappings);
            }
            if ((this.onEndDataMapping_RetrieveUserMappingsDelegate == null)) {
                this.onEndDataMapping_RetrieveUserMappingsDelegate = new EndOperationDelegate(this.OnEndDataMapping_RetrieveUserMappings);
            }
            if ((this.onDataMapping_RetrieveUserMappingsCompletedDelegate == null)) {
                this.onDataMapping_RetrieveUserMappingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDataMapping_RetrieveUserMappingsCompleted);
            }
            base.InvokeAsync(this.onBeginDataMapping_RetrieveUserMappingsDelegate, new object[] {
                        dataSyncSystemId}, this.onEndDataMapping_RetrieveUserMappingsDelegate, this.onDataMapping_RetrieveUserMappingsCompletedDelegate, userState);
        }
        
        public byte[] Document_OpenFile(int attachmentId) {
            return base.Channel.Document_OpenFile(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_OpenFile(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_OpenFile(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndDocument_OpenFile(System.IAsyncResult result) {
            return base.Channel.EndDocument_OpenFile(result);
        }
        
        private System.IAsyncResult OnBeginDocument_OpenFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_OpenFile(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_OpenFile(System.IAsyncResult result) {
            byte[] retVal = this.EndDocument_OpenFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_OpenFileCompleted(object state) {
            if ((this.Document_OpenFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_OpenFileCompleted(this, new Document_OpenFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_OpenFileAsync(int attachmentId) {
            this.Document_OpenFileAsync(attachmentId, null);
        }
        
        public void Document_OpenFileAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_OpenFileDelegate == null)) {
                this.onBeginDocument_OpenFileDelegate = new BeginOperationDelegate(this.OnBeginDocument_OpenFile);
            }
            if ((this.onEndDocument_OpenFileDelegate == null)) {
                this.onEndDocument_OpenFileDelegate = new EndOperationDelegate(this.OnEndDocument_OpenFile);
            }
            if ((this.onDocument_OpenFileCompletedDelegate == null)) {
                this.onDocument_OpenFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_OpenFileCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_OpenFileDelegate, new object[] {
                        attachmentId}, this.onEndDocument_OpenFileDelegate, this.onDocument_OpenFileCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_AddFile(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData) {
            return base.Channel.Document_AddFile(remoteDocument, binaryData);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFile(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFile(remoteDocument, binaryData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_AddFile(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFile(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument)(inValues[0]));
            byte[] binaryData = ((byte[])(inValues[1]));
            return this.BeginDocument_AddFile(remoteDocument, binaryData, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFile(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument retVal = this.EndDocument_AddFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFileCompleted(object state) {
            if ((this.Document_AddFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFileCompleted(this, new Document_AddFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFileAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData) {
            this.Document_AddFileAsync(remoteDocument, binaryData, null);
        }
        
        public void Document_AddFileAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, byte[] binaryData, object userState) {
            if ((this.onBeginDocument_AddFileDelegate == null)) {
                this.onBeginDocument_AddFileDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFile);
            }
            if ((this.onEndDocument_AddFileDelegate == null)) {
                this.onEndDocument_AddFileDelegate = new EndOperationDelegate(this.OnEndDocument_AddFile);
            }
            if ((this.onDocument_AddFileCompletedDelegate == null)) {
                this.onDocument_AddFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFileCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFileDelegate, new object[] {
                        remoteDocument,
                        binaryData}, this.onEndDocument_AddFileDelegate, this.onDocument_AddFileCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_AddUrl(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument) {
            return base.Channel.Document_AddUrl(remoteDocument);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddUrl(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddUrl(remoteDocument, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_AddUrl(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddUrl(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument)(inValues[0]));
            return this.BeginDocument_AddUrl(remoteDocument, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddUrl(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument retVal = this.EndDocument_AddUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddUrlCompleted(object state) {
            if ((this.Document_AddUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddUrlCompleted(this, new Document_AddUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddUrlAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument) {
            this.Document_AddUrlAsync(remoteDocument, null);
        }
        
        public void Document_AddUrlAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument remoteDocument, object userState) {
            if ((this.onBeginDocument_AddUrlDelegate == null)) {
                this.onBeginDocument_AddUrlDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddUrl);
            }
            if ((this.onEndDocument_AddUrlDelegate == null)) {
                this.onEndDocument_AddUrlDelegate = new EndOperationDelegate(this.OnEndDocument_AddUrl);
            }
            if ((this.onDocument_AddUrlCompletedDelegate == null)) {
                this.onDocument_AddUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddUrlCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddUrlDelegate, new object[] {
                        remoteDocument}, this.onEndDocument_AddUrlDelegate, this.onDocument_AddUrlCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Document_AddFileVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            return base.Channel.Document_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFileVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion EndDocument_AddFileVersion(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFileVersion(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFileVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion)(inValues[0]));
            byte[] binaryData = ((byte[])(inValues[1]));
            bool makeCurrent = ((bool)(inValues[2]));
            return this.BeginDocument_AddFileVersion(remoteDocumentVersion, binaryData, makeCurrent, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFileVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion retVal = this.EndDocument_AddFileVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFileVersionCompleted(object state) {
            if ((this.Document_AddFileVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFileVersionCompleted(this, new Document_AddFileVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFileVersionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent) {
            this.Document_AddFileVersionAsync(remoteDocumentVersion, binaryData, makeCurrent, null);
        }
        
        public void Document_AddFileVersionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, byte[] binaryData, bool makeCurrent, object userState) {
            if ((this.onBeginDocument_AddFileVersionDelegate == null)) {
                this.onBeginDocument_AddFileVersionDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFileVersion);
            }
            if ((this.onEndDocument_AddFileVersionDelegate == null)) {
                this.onEndDocument_AddFileVersionDelegate = new EndOperationDelegate(this.OnEndDocument_AddFileVersion);
            }
            if ((this.onDocument_AddFileVersionCompletedDelegate == null)) {
                this.onDocument_AddFileVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFileVersionCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFileVersionDelegate, new object[] {
                        remoteDocumentVersion,
                        binaryData,
                        makeCurrent}, this.onEndDocument_AddFileVersionDelegate, this.onDocument_AddFileVersionCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion Document_AddUrlVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            return base.Channel.Document_AddUrlVersion(remoteDocumentVersion, makeCurrent);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddUrlVersion(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddUrlVersion(remoteDocumentVersion, makeCurrent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion EndDocument_AddUrlVersion(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddUrlVersion(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddUrlVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion)(inValues[0]));
            bool makeCurrent = ((bool)(inValues[1]));
            return this.BeginDocument_AddUrlVersion(remoteDocumentVersion, makeCurrent, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddUrlVersion(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion retVal = this.EndDocument_AddUrlVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddUrlVersionCompleted(object state) {
            if ((this.Document_AddUrlVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddUrlVersionCompleted(this, new Document_AddUrlVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddUrlVersionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent) {
            this.Document_AddUrlVersionAsync(remoteDocumentVersion, makeCurrent, null);
        }
        
        public void Document_AddUrlVersionAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentVersion remoteDocumentVersion, bool makeCurrent, object userState) {
            if ((this.onBeginDocument_AddUrlVersionDelegate == null)) {
                this.onBeginDocument_AddUrlVersionDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddUrlVersion);
            }
            if ((this.onEndDocument_AddUrlVersionDelegate == null)) {
                this.onEndDocument_AddUrlVersionDelegate = new EndOperationDelegate(this.OnEndDocument_AddUrlVersion);
            }
            if ((this.onDocument_AddUrlVersionCompletedDelegate == null)) {
                this.onDocument_AddUrlVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddUrlVersionCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddUrlVersionDelegate, new object[] {
                        remoteDocumentVersion,
                        makeCurrent}, this.onEndDocument_AddUrlVersionDelegate, this.onDocument_AddUrlVersionCompletedDelegate, userState);
        }
        
        public void Document_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId) {
            base.Channel.Document_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_DeleteFromArtifact(int attachmentId, int artifactTypeId, int artifactId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_DeleteFromArtifact(System.IAsyncResult result) {
            base.Channel.EndDocument_DeleteFromArtifact(result);
        }
        
        private System.IAsyncResult OnBeginDocument_DeleteFromArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            int artifactTypeId = ((int)(inValues[1]));
            int artifactId = ((int)(inValues[2]));
            return this.BeginDocument_DeleteFromArtifact(attachmentId, artifactTypeId, artifactId, callback, asyncState);
        }
        
        private object[] OnEndDocument_DeleteFromArtifact(System.IAsyncResult result) {
            this.EndDocument_DeleteFromArtifact(result);
            return null;
        }
        
        private void OnDocument_DeleteFromArtifactCompleted(object state) {
            if ((this.Document_DeleteFromArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteFromArtifactCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteFromArtifactAsync(int attachmentId, int artifactTypeId, int artifactId) {
            this.Document_DeleteFromArtifactAsync(attachmentId, artifactTypeId, artifactId, null);
        }
        
        public void Document_DeleteFromArtifactAsync(int attachmentId, int artifactTypeId, int artifactId, object userState) {
            if ((this.onBeginDocument_DeleteFromArtifactDelegate == null)) {
                this.onBeginDocument_DeleteFromArtifactDelegate = new BeginOperationDelegate(this.OnBeginDocument_DeleteFromArtifact);
            }
            if ((this.onEndDocument_DeleteFromArtifactDelegate == null)) {
                this.onEndDocument_DeleteFromArtifactDelegate = new EndOperationDelegate(this.OnEndDocument_DeleteFromArtifact);
            }
            if ((this.onDocument_DeleteFromArtifactCompletedDelegate == null)) {
                this.onDocument_DeleteFromArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteFromArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteFromArtifactDelegate, new object[] {
                        attachmentId,
                        artifactTypeId,
                        artifactId}, this.onEndDocument_DeleteFromArtifactDelegate, this.onDocument_DeleteFromArtifactCompletedDelegate, userState);
        }
        
        public void Document_Delete(int attachmentId) {
            base.Channel.Document_Delete(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_Delete(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_Delete(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_Delete(System.IAsyncResult result) {
            base.Channel.EndDocument_Delete(result);
        }
        
        private System.IAsyncResult OnBeginDocument_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_Delete(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_Delete(System.IAsyncResult result) {
            this.EndDocument_Delete(result);
            return null;
        }
        
        private void OnDocument_DeleteCompleted(object state) {
            if ((this.Document_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteAsync(int attachmentId) {
            this.Document_DeleteAsync(attachmentId, null);
        }
        
        public void Document_DeleteAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_DeleteDelegate == null)) {
                this.onBeginDocument_DeleteDelegate = new BeginOperationDelegate(this.OnBeginDocument_Delete);
            }
            if ((this.onEndDocument_DeleteDelegate == null)) {
                this.onEndDocument_DeleteDelegate = new EndOperationDelegate(this.OnEndDocument_Delete);
            }
            if ((this.onDocument_DeleteCompletedDelegate == null)) {
                this.onDocument_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteDelegate, new object[] {
                        attachmentId}, this.onEndDocument_DeleteDelegate, this.onDocument_DeleteCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Document_RetrieveForFolder(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows) {
            return base.Channel.Document_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveForFolder(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> EndDocument_RetrieveForFolder(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveForFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveForFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[1]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[2]));
            int startingRow = ((int)(inValues[3]));
            int numberRows = ((int)(inValues[4]));
            return this.BeginDocument_RetrieveForFolder(folderId, remoteFilters, remoteSort, startingRow, numberRows, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveForFolder(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> retVal = this.EndDocument_RetrieveForFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveForFolderCompleted(object state) {
            if ((this.Document_RetrieveForFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveForFolderCompleted(this, new Document_RetrieveForFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveForFolderAsync(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows) {
            this.Document_RetrieveForFolderAsync(folderId, remoteFilters, remoteSort, startingRow, numberRows, null);
        }
        
        public void Document_RetrieveForFolderAsync(int folderId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberRows, object userState) {
            if ((this.onBeginDocument_RetrieveForFolderDelegate == null)) {
                this.onBeginDocument_RetrieveForFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveForFolder);
            }
            if ((this.onEndDocument_RetrieveForFolderDelegate == null)) {
                this.onEndDocument_RetrieveForFolderDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveForFolder);
            }
            if ((this.onDocument_RetrieveForFolderCompletedDelegate == null)) {
                this.onDocument_RetrieveForFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveForFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveForFolderDelegate, new object[] {
                        folderId,
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberRows}, this.onEndDocument_RetrieveForFolderDelegate, this.onDocument_RetrieveForFolderCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> Document_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort) {
            return base.Channel.Document_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> EndDocument_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[2]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[3]));
            return this.BeginDocument_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveForArtifact(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument> retVal = this.EndDocument_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveForArtifactCompleted(object state) {
            if ((this.Document_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveForArtifactCompleted(this, new Document_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort) {
            this.Document_RetrieveForArtifactAsync(artifactTypeId, artifactId, remoteFilters, remoteSort, null);
        }
        
        public void Document_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, object userState) {
            if ((this.onBeginDocument_RetrieveForArtifactDelegate == null)) {
                this.onBeginDocument_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveForArtifact);
            }
            if ((this.onEndDocument_RetrieveForArtifactDelegate == null)) {
                this.onEndDocument_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveForArtifact);
            }
            if ((this.onDocument_RetrieveForArtifactCompletedDelegate == null)) {
                this.onDocument_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        remoteFilters,
                        remoteSort}, this.onEndDocument_RetrieveForArtifactDelegate, this.onDocument_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public void Document_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId) {
            base.Channel.Document_AddToArtifactId(artifactTypeId, artifactId, attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddToArtifactId(int artifactTypeId, int artifactId, int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddToArtifactId(artifactTypeId, artifactId, attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_AddToArtifactId(System.IAsyncResult result) {
            base.Channel.EndDocument_AddToArtifactId(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddToArtifactId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            int attachmentId = ((int)(inValues[2]));
            return this.BeginDocument_AddToArtifactId(artifactTypeId, artifactId, attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddToArtifactId(System.IAsyncResult result) {
            this.EndDocument_AddToArtifactId(result);
            return null;
        }
        
        private void OnDocument_AddToArtifactIdCompleted(object state) {
            if ((this.Document_AddToArtifactIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddToArtifactIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddToArtifactIdAsync(int artifactTypeId, int artifactId, int attachmentId) {
            this.Document_AddToArtifactIdAsync(artifactTypeId, artifactId, attachmentId, null);
        }
        
        public void Document_AddToArtifactIdAsync(int artifactTypeId, int artifactId, int attachmentId, object userState) {
            if ((this.onBeginDocument_AddToArtifactIdDelegate == null)) {
                this.onBeginDocument_AddToArtifactIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddToArtifactId);
            }
            if ((this.onEndDocument_AddToArtifactIdDelegate == null)) {
                this.onEndDocument_AddToArtifactIdDelegate = new EndOperationDelegate(this.OnEndDocument_AddToArtifactId);
            }
            if ((this.onDocument_AddToArtifactIdCompletedDelegate == null)) {
                this.onDocument_AddToArtifactIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddToArtifactIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddToArtifactIdDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        attachmentId}, this.onEndDocument_AddToArtifactIdDelegate, this.onDocument_AddToArtifactIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument Document_RetrieveById(int attachmentId) {
            return base.Channel.Document_RetrieveById(attachmentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveById(int attachmentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveById(attachmentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument EndDocument_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int attachmentId = ((int)(inValues[0]));
            return this.BeginDocument_RetrieveById(attachmentId, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocument retVal = this.EndDocument_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveByIdCompleted(object state) {
            if ((this.Document_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveByIdCompleted(this, new Document_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveByIdAsync(int attachmentId) {
            this.Document_RetrieveByIdAsync(attachmentId, null);
        }
        
        public void Document_RetrieveByIdAsync(int attachmentId, object userState) {
            if ((this.onBeginDocument_RetrieveByIdDelegate == null)) {
                this.onBeginDocument_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveById);
            }
            if ((this.onEndDocument_RetrieveByIdDelegate == null)) {
                this.onEndDocument_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveById);
            }
            if ((this.onDocument_RetrieveByIdCompletedDelegate == null)) {
                this.onDocument_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveByIdDelegate, new object[] {
                        attachmentId}, this.onEndDocument_RetrieveByIdDelegate, this.onDocument_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> Document_RetrieveTypes(bool activeOnly) {
            return base.Channel.Document_RetrieveTypes(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveTypes(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveTypes(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> EndDocument_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginDocument_RetrieveTypes(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveTypes(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentType> retVal = this.EndDocument_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveTypesCompleted(object state) {
            if ((this.Document_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveTypesCompleted(this, new Document_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveTypesAsync(bool activeOnly) {
            this.Document_RetrieveTypesAsync(activeOnly, null);
        }
        
        public void Document_RetrieveTypesAsync(bool activeOnly, object userState) {
            if ((this.onBeginDocument_RetrieveTypesDelegate == null)) {
                this.onBeginDocument_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveTypes);
            }
            if ((this.onEndDocument_RetrieveTypesDelegate == null)) {
                this.onEndDocument_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveTypes);
            }
            if ((this.onDocument_RetrieveTypesCompletedDelegate == null)) {
                this.onDocument_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveTypesDelegate, new object[] {
                        activeOnly}, this.onEndDocument_RetrieveTypesDelegate, this.onDocument_RetrieveTypesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> Document_RetrieveFolders() {
            return base.Channel.Document_RetrieveFolders();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveFolders(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveFolders(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> EndDocument_RetrieveFolders(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveFolders(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveFolders(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDocument_RetrieveFolders(callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveFolders(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder> retVal = this.EndDocument_RetrieveFolders(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveFoldersCompleted(object state) {
            if ((this.Document_RetrieveFoldersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveFoldersCompleted(this, new Document_RetrieveFoldersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveFoldersAsync() {
            this.Document_RetrieveFoldersAsync(null);
        }
        
        public void Document_RetrieveFoldersAsync(object userState) {
            if ((this.onBeginDocument_RetrieveFoldersDelegate == null)) {
                this.onBeginDocument_RetrieveFoldersDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveFolders);
            }
            if ((this.onEndDocument_RetrieveFoldersDelegate == null)) {
                this.onEndDocument_RetrieveFoldersDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveFolders);
            }
            if ((this.onDocument_RetrieveFoldersCompletedDelegate == null)) {
                this.onDocument_RetrieveFoldersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveFoldersCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveFoldersDelegate, null, this.onEndDocument_RetrieveFoldersDelegate, this.onDocument_RetrieveFoldersCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Document_RetrieveFolderById(int folderId) {
            return base.Channel.Document_RetrieveFolderById(folderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_RetrieveFolderById(int folderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_RetrieveFolderById(folderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder EndDocument_RetrieveFolderById(System.IAsyncResult result) {
            return base.Channel.EndDocument_RetrieveFolderById(result);
        }
        
        private System.IAsyncResult OnBeginDocument_RetrieveFolderById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            return this.BeginDocument_RetrieveFolderById(folderId, callback, asyncState);
        }
        
        private object[] OnEndDocument_RetrieveFolderById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder retVal = this.EndDocument_RetrieveFolderById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_RetrieveFolderByIdCompleted(object state) {
            if ((this.Document_RetrieveFolderByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_RetrieveFolderByIdCompleted(this, new Document_RetrieveFolderByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_RetrieveFolderByIdAsync(int folderId) {
            this.Document_RetrieveFolderByIdAsync(folderId, null);
        }
        
        public void Document_RetrieveFolderByIdAsync(int folderId, object userState) {
            if ((this.onBeginDocument_RetrieveFolderByIdDelegate == null)) {
                this.onBeginDocument_RetrieveFolderByIdDelegate = new BeginOperationDelegate(this.OnBeginDocument_RetrieveFolderById);
            }
            if ((this.onEndDocument_RetrieveFolderByIdDelegate == null)) {
                this.onEndDocument_RetrieveFolderByIdDelegate = new EndOperationDelegate(this.OnEndDocument_RetrieveFolderById);
            }
            if ((this.onDocument_RetrieveFolderByIdCompletedDelegate == null)) {
                this.onDocument_RetrieveFolderByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_RetrieveFolderByIdCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_RetrieveFolderByIdDelegate, new object[] {
                        folderId}, this.onEndDocument_RetrieveFolderByIdDelegate, this.onDocument_RetrieveFolderByIdCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder Document_AddFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder) {
            return base.Channel.Document_AddFolder(remoteDocumentFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_AddFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_AddFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder EndDocument_AddFolder(System.IAsyncResult result) {
            return base.Channel.EndDocument_AddFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_AddFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder)(inValues[0]));
            return this.BeginDocument_AddFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        private object[] OnEndDocument_AddFolder(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder retVal = this.EndDocument_AddFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDocument_AddFolderCompleted(object state) {
            if ((this.Document_AddFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_AddFolderCompleted(this, new Document_AddFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_AddFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder) {
            this.Document_AddFolderAsync(remoteDocumentFolder, null);
        }
        
        public void Document_AddFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, object userState) {
            if ((this.onBeginDocument_AddFolderDelegate == null)) {
                this.onBeginDocument_AddFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_AddFolder);
            }
            if ((this.onEndDocument_AddFolderDelegate == null)) {
                this.onEndDocument_AddFolderDelegate = new EndOperationDelegate(this.OnEndDocument_AddFolder);
            }
            if ((this.onDocument_AddFolderCompletedDelegate == null)) {
                this.onDocument_AddFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_AddFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_AddFolderDelegate, new object[] {
                        remoteDocumentFolder}, this.onEndDocument_AddFolderDelegate, this.onDocument_AddFolderCompletedDelegate, userState);
        }
        
        public void Document_DeleteFolder(int projectAttachmentFolderId) {
            base.Channel.Document_DeleteFolder(projectAttachmentFolderId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_DeleteFolder(int projectAttachmentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_DeleteFolder(projectAttachmentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_DeleteFolder(System.IAsyncResult result) {
            base.Channel.EndDocument_DeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_DeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectAttachmentFolderId = ((int)(inValues[0]));
            return this.BeginDocument_DeleteFolder(projectAttachmentFolderId, callback, asyncState);
        }
        
        private object[] OnEndDocument_DeleteFolder(System.IAsyncResult result) {
            this.EndDocument_DeleteFolder(result);
            return null;
        }
        
        private void OnDocument_DeleteFolderCompleted(object state) {
            if ((this.Document_DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_DeleteFolderAsync(int projectAttachmentFolderId) {
            this.Document_DeleteFolderAsync(projectAttachmentFolderId, null);
        }
        
        public void Document_DeleteFolderAsync(int projectAttachmentFolderId, object userState) {
            if ((this.onBeginDocument_DeleteFolderDelegate == null)) {
                this.onBeginDocument_DeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_DeleteFolder);
            }
            if ((this.onEndDocument_DeleteFolderDelegate == null)) {
                this.onEndDocument_DeleteFolderDelegate = new EndOperationDelegate(this.OnEndDocument_DeleteFolder);
            }
            if ((this.onDocument_DeleteFolderCompletedDelegate == null)) {
                this.onDocument_DeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_DeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_DeleteFolderDelegate, new object[] {
                        projectAttachmentFolderId}, this.onEndDocument_DeleteFolderDelegate, this.onDocument_DeleteFolderCompletedDelegate, userState);
        }
        
        public void Document_UpdateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder) {
            base.Channel.Document_UpdateFolder(remoteDocumentFolder);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDocument_UpdateFolder(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDocument_UpdateFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDocument_UpdateFolder(System.IAsyncResult result) {
            base.Channel.EndDocument_UpdateFolder(result);
        }
        
        private System.IAsyncResult OnBeginDocument_UpdateFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder)(inValues[0]));
            return this.BeginDocument_UpdateFolder(remoteDocumentFolder, callback, asyncState);
        }
        
        private object[] OnEndDocument_UpdateFolder(System.IAsyncResult result) {
            this.EndDocument_UpdateFolder(result);
            return null;
        }
        
        private void OnDocument_UpdateFolderCompleted(object state) {
            if ((this.Document_UpdateFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Document_UpdateFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Document_UpdateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder) {
            this.Document_UpdateFolderAsync(remoteDocumentFolder, null);
        }
        
        public void Document_UpdateFolderAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteDocumentFolder remoteDocumentFolder, object userState) {
            if ((this.onBeginDocument_UpdateFolderDelegate == null)) {
                this.onBeginDocument_UpdateFolderDelegate = new BeginOperationDelegate(this.OnBeginDocument_UpdateFolder);
            }
            if ((this.onEndDocument_UpdateFolderDelegate == null)) {
                this.onEndDocument_UpdateFolderDelegate = new EndOperationDelegate(this.OnEndDocument_UpdateFolder);
            }
            if ((this.onDocument_UpdateFolderCompletedDelegate == null)) {
                this.onDocument_UpdateFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDocument_UpdateFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDocument_UpdateFolderDelegate, new object[] {
                        remoteDocumentFolder}, this.onEndDocument_UpdateFolderDelegate, this.onDocument_UpdateFolderCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation Association_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation) {
            return base.Channel.Association_Create(remoteAssociation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_Create(remoteAssociation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation EndAssociation_Create(System.IAsyncResult result) {
            return base.Channel.EndAssociation_Create(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation)(inValues[0]));
            return this.BeginAssociation_Create(remoteAssociation, callback, asyncState);
        }
        
        private object[] OnEndAssociation_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation retVal = this.EndAssociation_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssociation_CreateCompleted(object state) {
            if ((this.Association_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_CreateCompleted(this, new Association_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation) {
            this.Association_CreateAsync(remoteAssociation, null);
        }
        
        public void Association_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, object userState) {
            if ((this.onBeginAssociation_CreateDelegate == null)) {
                this.onBeginAssociation_CreateDelegate = new BeginOperationDelegate(this.OnBeginAssociation_Create);
            }
            if ((this.onEndAssociation_CreateDelegate == null)) {
                this.onEndAssociation_CreateDelegate = new EndOperationDelegate(this.OnEndAssociation_Create);
            }
            if ((this.onAssociation_CreateCompletedDelegate == null)) {
                this.onAssociation_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_CreateDelegate, new object[] {
                        remoteAssociation}, this.onEndAssociation_CreateDelegate, this.onAssociation_CreateCompletedDelegate, userState);
        }
        
        public void Association_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation) {
            base.Channel.Association_Update(remoteAssociation);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_Update(remoteAssociation, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAssociation_Update(System.IAsyncResult result) {
            base.Channel.EndAssociation_Update(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation)(inValues[0]));
            return this.BeginAssociation_Update(remoteAssociation, callback, asyncState);
        }
        
        private object[] OnEndAssociation_Update(System.IAsyncResult result) {
            this.EndAssociation_Update(result);
            return null;
        }
        
        private void OnAssociation_UpdateCompleted(object state) {
            if ((this.Association_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation) {
            this.Association_UpdateAsync(remoteAssociation, null);
        }
        
        public void Association_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation remoteAssociation, object userState) {
            if ((this.onBeginAssociation_UpdateDelegate == null)) {
                this.onBeginAssociation_UpdateDelegate = new BeginOperationDelegate(this.OnBeginAssociation_Update);
            }
            if ((this.onEndAssociation_UpdateDelegate == null)) {
                this.onEndAssociation_UpdateDelegate = new EndOperationDelegate(this.OnEndAssociation_Update);
            }
            if ((this.onAssociation_UpdateCompletedDelegate == null)) {
                this.onAssociation_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_UpdateDelegate, new object[] {
                        remoteAssociation}, this.onEndAssociation_UpdateDelegate, this.onAssociation_UpdateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> Association_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort) {
            return base.Channel.Association_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAssociation_RetrieveForArtifact(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssociation_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> EndAssociation_RetrieveForArtifact(System.IAsyncResult result) {
            return base.Channel.EndAssociation_RetrieveForArtifact(result);
        }
        
        private System.IAsyncResult OnBeginAssociation_RetrieveForArtifact(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int artifactTypeId = ((int)(inValues[0]));
            int artifactId = ((int)(inValues[1]));
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[2]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[3]));
            return this.BeginAssociation_RetrieveForArtifact(artifactTypeId, artifactId, remoteFilters, remoteSort, callback, asyncState);
        }
        
        private object[] OnEndAssociation_RetrieveForArtifact(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteAssociation> retVal = this.EndAssociation_RetrieveForArtifact(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssociation_RetrieveForArtifactCompleted(object state) {
            if ((this.Association_RetrieveForArtifactCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Association_RetrieveForArtifactCompleted(this, new Association_RetrieveForArtifactCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Association_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort) {
            this.Association_RetrieveForArtifactAsync(artifactTypeId, artifactId, remoteFilters, remoteSort, null);
        }
        
        public void Association_RetrieveForArtifactAsync(int artifactTypeId, int artifactId, System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, object userState) {
            if ((this.onBeginAssociation_RetrieveForArtifactDelegate == null)) {
                this.onBeginAssociation_RetrieveForArtifactDelegate = new BeginOperationDelegate(this.OnBeginAssociation_RetrieveForArtifact);
            }
            if ((this.onEndAssociation_RetrieveForArtifactDelegate == null)) {
                this.onEndAssociation_RetrieveForArtifactDelegate = new EndOperationDelegate(this.OnEndAssociation_RetrieveForArtifact);
            }
            if ((this.onAssociation_RetrieveForArtifactCompletedDelegate == null)) {
                this.onAssociation_RetrieveForArtifactCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssociation_RetrieveForArtifactCompleted);
            }
            base.InvokeAsync(this.onBeginAssociation_RetrieveForArtifactDelegate, new object[] {
                        artifactTypeId,
                        artifactId,
                        remoteFilters,
                        remoteSort}, this.onEndAssociation_RetrieveForArtifactDelegate, this.onAssociation_RetrieveForArtifactCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority Incident_AddPriority(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority) {
            return base.Channel.Incident_AddPriority(remoteIncidentPriority);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddPriority(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddPriority(remoteIncidentPriority, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority EndIncident_AddPriority(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddPriority(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddPriority(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority)(inValues[0]));
            return this.BeginIncident_AddPriority(remoteIncidentPriority, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddPriority(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority retVal = this.EndIncident_AddPriority(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddPriorityCompleted(object state) {
            if ((this.Incident_AddPriorityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddPriorityCompleted(this, new Incident_AddPriorityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddPriorityAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority) {
            this.Incident_AddPriorityAsync(remoteIncidentPriority, null);
        }
        
        public void Incident_AddPriorityAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority remoteIncidentPriority, object userState) {
            if ((this.onBeginIncident_AddPriorityDelegate == null)) {
                this.onBeginIncident_AddPriorityDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddPriority);
            }
            if ((this.onEndIncident_AddPriorityDelegate == null)) {
                this.onEndIncident_AddPriorityDelegate = new EndOperationDelegate(this.OnEndIncident_AddPriority);
            }
            if ((this.onIncident_AddPriorityCompletedDelegate == null)) {
                this.onIncident_AddPriorityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddPriorityCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddPriorityDelegate, new object[] {
                        remoteIncidentPriority}, this.onEndIncident_AddPriorityDelegate, this.onIncident_AddPriorityCompletedDelegate, userState);
        }
        
        public long Incident_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.Incident_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndIncident_Count(System.IAsyncResult result) {
            return base.Channel.EndIncident_Count(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginIncident_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndIncident_Count(System.IAsyncResult result) {
            long retVal = this.EndIncident_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_CountCompleted(object state) {
            if ((this.Incident_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_CountCompleted(this, new Incident_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.Incident_CountAsync(remoteFilters, null);
        }
        
        public void Incident_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginIncident_CountDelegate == null)) {
                this.onBeginIncident_CountDelegate = new BeginOperationDelegate(this.OnBeginIncident_Count);
            }
            if ((this.onEndIncident_CountDelegate == null)) {
                this.onEndIncident_CountDelegate = new EndOperationDelegate(this.OnEndIncident_Count);
            }
            if ((this.onIncident_CountCompletedDelegate == null)) {
                this.onIncident_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_CountCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_CountDelegate, new object[] {
                        remoteFilters}, this.onEndIncident_CountDelegate, this.onIncident_CountCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Incident_AddComments(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments) {
            return base.Channel.Incident_AddComments(remoteComments);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddComments(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddComments(remoteComments, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndIncident_AddComments(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddComments(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment>)(inValues[0]));
            return this.BeginIncident_AddComments(remoteComments, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndIncident_AddComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddCommentsCompleted(object state) {
            if ((this.Incident_AddCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddCommentsCompleted(this, new Incident_AddCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddCommentsAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments) {
            this.Incident_AddCommentsAsync(remoteComments, null);
        }
        
        public void Incident_AddCommentsAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> remoteComments, object userState) {
            if ((this.onBeginIncident_AddCommentsDelegate == null)) {
                this.onBeginIncident_AddCommentsDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddComments);
            }
            if ((this.onEndIncident_AddCommentsDelegate == null)) {
                this.onEndIncident_AddCommentsDelegate = new EndOperationDelegate(this.OnEndIncident_AddComments);
            }
            if ((this.onIncident_AddCommentsCompletedDelegate == null)) {
                this.onIncident_AddCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddCommentsDelegate, new object[] {
                        remoteComments}, this.onEndIncident_AddCommentsDelegate, this.onIncident_AddCommentsCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity Incident_AddSeverity(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity) {
            return base.Channel.Incident_AddSeverity(remoteIncidentSeverity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddSeverity(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddSeverity(remoteIncidentSeverity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity EndIncident_AddSeverity(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddSeverity(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddSeverity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity)(inValues[0]));
            return this.BeginIncident_AddSeverity(remoteIncidentSeverity, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddSeverity(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity retVal = this.EndIncident_AddSeverity(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddSeverityCompleted(object state) {
            if ((this.Incident_AddSeverityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddSeverityCompleted(this, new Incident_AddSeverityCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddSeverityAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity) {
            this.Incident_AddSeverityAsync(remoteIncidentSeverity, null);
        }
        
        public void Incident_AddSeverityAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity remoteIncidentSeverity, object userState) {
            if ((this.onBeginIncident_AddSeverityDelegate == null)) {
                this.onBeginIncident_AddSeverityDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddSeverity);
            }
            if ((this.onEndIncident_AddSeverityDelegate == null)) {
                this.onEndIncident_AddSeverityDelegate = new EndOperationDelegate(this.OnEndIncident_AddSeverity);
            }
            if ((this.onIncident_AddSeverityCompletedDelegate == null)) {
                this.onIncident_AddSeverityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddSeverityCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddSeverityDelegate, new object[] {
                        remoteIncidentSeverity}, this.onEndIncident_AddSeverityDelegate, this.onIncident_AddSeverityCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus Incident_AddStatus(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus) {
            return base.Channel.Incident_AddStatus(remoteIncidentStatus);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddStatus(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddStatus(remoteIncidentStatus, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus EndIncident_AddStatus(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddStatus(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus)(inValues[0]));
            return this.BeginIncident_AddStatus(remoteIncidentStatus, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddStatus(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus retVal = this.EndIncident_AddStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddStatusCompleted(object state) {
            if ((this.Incident_AddStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddStatusCompleted(this, new Incident_AddStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddStatusAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus) {
            this.Incident_AddStatusAsync(remoteIncidentStatus, null);
        }
        
        public void Incident_AddStatusAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus remoteIncidentStatus, object userState) {
            if ((this.onBeginIncident_AddStatusDelegate == null)) {
                this.onBeginIncident_AddStatusDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddStatus);
            }
            if ((this.onEndIncident_AddStatusDelegate == null)) {
                this.onEndIncident_AddStatusDelegate = new EndOperationDelegate(this.OnEndIncident_AddStatus);
            }
            if ((this.onIncident_AddStatusCompletedDelegate == null)) {
                this.onIncident_AddStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddStatusCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddStatusDelegate, new object[] {
                        remoteIncidentStatus}, this.onEndIncident_AddStatusDelegate, this.onIncident_AddStatusCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType Incident_AddType(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType) {
            return base.Channel.Incident_AddType(remoteIncidentType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_AddType(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_AddType(remoteIncidentType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType EndIncident_AddType(System.IAsyncResult result) {
            return base.Channel.EndIncident_AddType(result);
        }
        
        private System.IAsyncResult OnBeginIncident_AddType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType)(inValues[0]));
            return this.BeginIncident_AddType(remoteIncidentType, callback, asyncState);
        }
        
        private object[] OnEndIncident_AddType(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType retVal = this.EndIncident_AddType(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_AddTypeCompleted(object state) {
            if ((this.Incident_AddTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_AddTypeCompleted(this, new Incident_AddTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_AddTypeAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType) {
            this.Incident_AddTypeAsync(remoteIncidentType, null);
        }
        
        public void Incident_AddTypeAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType remoteIncidentType, object userState) {
            if ((this.onBeginIncident_AddTypeDelegate == null)) {
                this.onBeginIncident_AddTypeDelegate = new BeginOperationDelegate(this.OnBeginIncident_AddType);
            }
            if ((this.onEndIncident_AddTypeDelegate == null)) {
                this.onEndIncident_AddTypeDelegate = new EndOperationDelegate(this.OnEndIncident_AddType);
            }
            if ((this.onIncident_AddTypeCompletedDelegate == null)) {
                this.onIncident_AddTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_AddTypeCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_AddTypeDelegate, new object[] {
                        remoteIncidentType}, this.onEndIncident_AddTypeDelegate, this.onIncident_AddTypeCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Incident_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident) {
            return base.Channel.Incident_Create(remoteIncident);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Create(remoteIncident, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident EndIncident_Create(System.IAsyncResult result) {
            return base.Channel.EndIncident_Create(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident)(inValues[0]));
            return this.BeginIncident_Create(remoteIncident, callback, asyncState);
        }
        
        private object[] OnEndIncident_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident retVal = this.EndIncident_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_CreateCompleted(object state) {
            if ((this.Incident_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_CreateCompleted(this, new Incident_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident) {
            this.Incident_CreateAsync(remoteIncident, null);
        }
        
        public void Incident_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, object userState) {
            if ((this.onBeginIncident_CreateDelegate == null)) {
                this.onBeginIncident_CreateDelegate = new BeginOperationDelegate(this.OnBeginIncident_Create);
            }
            if ((this.onEndIncident_CreateDelegate == null)) {
                this.onEndIncident_CreateDelegate = new EndOperationDelegate(this.OnEndIncident_Create);
            }
            if ((this.onIncident_CreateCompletedDelegate == null)) {
                this.onIncident_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_CreateDelegate, new object[] {
                        remoteIncident}, this.onEndIncident_CreateDelegate, this.onIncident_CreateCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            return base.Channel.Incident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Retrieve(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndIncident_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort)(inValues[1]));
            int startingRow = ((int)(inValues[2]));
            int numberOfRows = ((int)(inValues[3]));
            return this.BeginIncident_Retrieve(remoteFilters, remoteSort, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndIncident_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveCompleted(object state) {
            if ((this.Incident_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveCompleted(this, new Incident_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows) {
            this.Incident_RetrieveAsync(remoteFilters, remoteSort, startingRow, numberOfRows, null);
        }
        
        public void Incident_RetrieveAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteSort remoteSort, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginIncident_RetrieveDelegate == null)) {
                this.onBeginIncident_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginIncident_Retrieve);
            }
            if ((this.onEndIncident_RetrieveDelegate == null)) {
                this.onEndIncident_RetrieveDelegate = new EndOperationDelegate(this.OnEndIncident_Retrieve);
            }
            if ((this.onIncident_RetrieveCompletedDelegate == null)) {
                this.onIncident_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveDelegate, new object[] {
                        remoteFilters,
                        remoteSort,
                        startingRow,
                        numberOfRows}, this.onEndIncident_RetrieveDelegate, this.onIncident_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident Incident_RetrieveById(int incidentId) {
            return base.Channel.Incident_RetrieveById(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveById(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveById(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident EndIncident_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveById(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident retVal = this.EndIncident_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByIdCompleted(object state) {
            if ((this.Incident_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByIdCompleted(this, new Incident_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByIdAsync(int incidentId) {
            this.Incident_RetrieveByIdAsync(incidentId, null);
        }
        
        public void Incident_RetrieveByIdAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_RetrieveByIdDelegate == null)) {
                this.onBeginIncident_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveById);
            }
            if ((this.onEndIncident_RetrieveByIdDelegate == null)) {
                this.onEndIncident_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveById);
            }
            if ((this.onIncident_RetrieveByIdCompletedDelegate == null)) {
                this.onIncident_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByIdDelegate, new object[] {
                        incidentId}, this.onEndIncident_RetrieveByIdDelegate, this.onIncident_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestCase(int testCaseId, bool openOnly) {
            return base.Channel.Incident_RetrieveByTestCase(testCaseId, openOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestCase(int testCaseId, bool openOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestCase(testCaseId, openOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestCase(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestCase(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestCase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testCaseId = ((int)(inValues[0]));
            bool openOnly = ((bool)(inValues[1]));
            return this.BeginIncident_RetrieveByTestCase(testCaseId, openOnly, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestCase(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_RetrieveByTestCase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestCaseCompleted(object state) {
            if ((this.Incident_RetrieveByTestCaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestCaseCompleted(this, new Incident_RetrieveByTestCaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestCaseAsync(int testCaseId, bool openOnly) {
            this.Incident_RetrieveByTestCaseAsync(testCaseId, openOnly, null);
        }
        
        public void Incident_RetrieveByTestCaseAsync(int testCaseId, bool openOnly, object userState) {
            if ((this.onBeginIncident_RetrieveByTestCaseDelegate == null)) {
                this.onBeginIncident_RetrieveByTestCaseDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestCase);
            }
            if ((this.onEndIncident_RetrieveByTestCaseDelegate == null)) {
                this.onEndIncident_RetrieveByTestCaseDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestCase);
            }
            if ((this.onIncident_RetrieveByTestCaseCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestCaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestCaseCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestCaseDelegate, new object[] {
                        testCaseId,
                        openOnly}, this.onEndIncident_RetrieveByTestCaseDelegate, this.onIncident_RetrieveByTestCaseCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestRunStep(int testRunStepId) {
            return base.Channel.Incident_RetrieveByTestRunStep(testRunStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestRunStep(int testRunStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestRunStep(testRunStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestRunStep(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestRunStep(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestRunStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testRunStepId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveByTestRunStep(testRunStepId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestRunStep(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_RetrieveByTestRunStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestRunStepCompleted(object state) {
            if ((this.Incident_RetrieveByTestRunStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestRunStepCompleted(this, new Incident_RetrieveByTestRunStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestRunStepAsync(int testRunStepId) {
            this.Incident_RetrieveByTestRunStepAsync(testRunStepId, null);
        }
        
        public void Incident_RetrieveByTestRunStepAsync(int testRunStepId, object userState) {
            if ((this.onBeginIncident_RetrieveByTestRunStepDelegate == null)) {
                this.onBeginIncident_RetrieveByTestRunStepDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestRunStep);
            }
            if ((this.onEndIncident_RetrieveByTestRunStepDelegate == null)) {
                this.onEndIncident_RetrieveByTestRunStepDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestRunStep);
            }
            if ((this.onIncident_RetrieveByTestRunStepCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestRunStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestRunStepCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestRunStepDelegate, new object[] {
                        testRunStepId}, this.onEndIncident_RetrieveByTestRunStepDelegate, this.onIncident_RetrieveByTestRunStepCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveByTestStep(int testStepId) {
            return base.Channel.Incident_RetrieveByTestStep(testStepId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveByTestStep(int testStepId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveByTestStep(testStepId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveByTestStep(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveByTestStep(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveByTestStep(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int testStepId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveByTestStep(testStepId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveByTestStep(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_RetrieveByTestStep(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveByTestStepCompleted(object state) {
            if ((this.Incident_RetrieveByTestStepCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveByTestStepCompleted(this, new Incident_RetrieveByTestStepCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveByTestStepAsync(int testStepId) {
            this.Incident_RetrieveByTestStepAsync(testStepId, null);
        }
        
        public void Incident_RetrieveByTestStepAsync(int testStepId, object userState) {
            if ((this.onBeginIncident_RetrieveByTestStepDelegate == null)) {
                this.onBeginIncident_RetrieveByTestStepDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveByTestStep);
            }
            if ((this.onEndIncident_RetrieveByTestStepDelegate == null)) {
                this.onEndIncident_RetrieveByTestStepDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveByTestStep);
            }
            if ((this.onIncident_RetrieveByTestStepCompletedDelegate == null)) {
                this.onIncident_RetrieveByTestStepCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveByTestStepCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveByTestStepDelegate, new object[] {
                        testStepId}, this.onEndIncident_RetrieveByTestStepDelegate, this.onIncident_RetrieveByTestStepCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveForOwner() {
            return base.Channel.Incident_RetrieveForOwner();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveForOwner(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveForOwner(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveForOwner(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveForOwner(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveForOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveForOwner(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveForOwner(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_RetrieveForOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveForOwnerCompleted(object state) {
            if ((this.Incident_RetrieveForOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveForOwnerCompleted(this, new Incident_RetrieveForOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveForOwnerAsync() {
            this.Incident_RetrieveForOwnerAsync(null);
        }
        
        public void Incident_RetrieveForOwnerAsync(object userState) {
            if ((this.onBeginIncident_RetrieveForOwnerDelegate == null)) {
                this.onBeginIncident_RetrieveForOwnerDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveForOwner);
            }
            if ((this.onEndIncident_RetrieveForOwnerDelegate == null)) {
                this.onEndIncident_RetrieveForOwnerDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveForOwner);
            }
            if ((this.onIncident_RetrieveForOwnerCompletedDelegate == null)) {
                this.onIncident_RetrieveForOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveForOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveForOwnerDelegate, null, this.onEndIncident_RetrieveForOwnerDelegate, this.onIncident_RetrieveForOwnerCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> Incident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows) {
            return base.Channel.Incident_RetrieveNew(creationDate, startRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveNew(System.DateTime creationDate, int startRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> EndIncident_RetrieveNew(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveNew(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveNew(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime creationDate = ((System.DateTime)(inValues[0]));
            int startRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginIncident_RetrieveNew(creationDate, startRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveNew(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident> retVal = this.EndIncident_RetrieveNew(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveNewCompleted(object state) {
            if ((this.Incident_RetrieveNewCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveNewCompleted(this, new Incident_RetrieveNewCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows) {
            this.Incident_RetrieveNewAsync(creationDate, startRow, numberOfRows, null);
        }
        
        public void Incident_RetrieveNewAsync(System.DateTime creationDate, int startRow, int numberOfRows, object userState) {
            if ((this.onBeginIncident_RetrieveNewDelegate == null)) {
                this.onBeginIncident_RetrieveNewDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveNew);
            }
            if ((this.onEndIncident_RetrieveNewDelegate == null)) {
                this.onEndIncident_RetrieveNewDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveNew);
            }
            if ((this.onIncident_RetrieveNewCompletedDelegate == null)) {
                this.onIncident_RetrieveNewCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveNewCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveNewDelegate, new object[] {
                        creationDate,
                        startRow,
                        numberOfRows}, this.onEndIncident_RetrieveNewDelegate, this.onIncident_RetrieveNewCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> Incident_RetrievePriorities() {
            return base.Channel.Incident_RetrievePriorities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrievePriorities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrievePriorities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> EndIncident_RetrievePriorities(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrievePriorities(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrievePriorities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrievePriorities(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrievePriorities(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentPriority> retVal = this.EndIncident_RetrievePriorities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrievePrioritiesCompleted(object state) {
            if ((this.Incident_RetrievePrioritiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrievePrioritiesCompleted(this, new Incident_RetrievePrioritiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrievePrioritiesAsync() {
            this.Incident_RetrievePrioritiesAsync(null);
        }
        
        public void Incident_RetrievePrioritiesAsync(object userState) {
            if ((this.onBeginIncident_RetrievePrioritiesDelegate == null)) {
                this.onBeginIncident_RetrievePrioritiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrievePriorities);
            }
            if ((this.onEndIncident_RetrievePrioritiesDelegate == null)) {
                this.onEndIncident_RetrievePrioritiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrievePriorities);
            }
            if ((this.onIncident_RetrievePrioritiesCompletedDelegate == null)) {
                this.onIncident_RetrievePrioritiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrievePrioritiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrievePrioritiesDelegate, null, this.onEndIncident_RetrievePrioritiesDelegate, this.onIncident_RetrievePrioritiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Incident_RetrieveComments(int incidentId) {
            return base.Channel.Incident_RetrieveComments(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveComments(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveComments(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndIncident_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_RetrieveComments(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndIncident_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveCommentsCompleted(object state) {
            if ((this.Incident_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveCommentsCompleted(this, new Incident_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveCommentsAsync(int incidentId) {
            this.Incident_RetrieveCommentsAsync(incidentId, null);
        }
        
        public void Incident_RetrieveCommentsAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_RetrieveCommentsDelegate == null)) {
                this.onBeginIncident_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveComments);
            }
            if ((this.onEndIncident_RetrieveCommentsDelegate == null)) {
                this.onEndIncident_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveComments);
            }
            if ((this.onIncident_RetrieveCommentsCompletedDelegate == null)) {
                this.onIncident_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveCommentsDelegate, new object[] {
                        incidentId}, this.onEndIncident_RetrieveCommentsDelegate, this.onIncident_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> Incident_RetrieveSeverities() {
            return base.Channel.Incident_RetrieveSeverities();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveSeverities(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveSeverities(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> EndIncident_RetrieveSeverities(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveSeverities(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveSeverities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveSeverities(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveSeverities(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentSeverity> retVal = this.EndIncident_RetrieveSeverities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveSeveritiesCompleted(object state) {
            if ((this.Incident_RetrieveSeveritiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveSeveritiesCompleted(this, new Incident_RetrieveSeveritiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveSeveritiesAsync() {
            this.Incident_RetrieveSeveritiesAsync(null);
        }
        
        public void Incident_RetrieveSeveritiesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveSeveritiesDelegate == null)) {
                this.onBeginIncident_RetrieveSeveritiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveSeverities);
            }
            if ((this.onEndIncident_RetrieveSeveritiesDelegate == null)) {
                this.onEndIncident_RetrieveSeveritiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveSeverities);
            }
            if ((this.onIncident_RetrieveSeveritiesCompletedDelegate == null)) {
                this.onIncident_RetrieveSeveritiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveSeveritiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveSeveritiesDelegate, null, this.onEndIncident_RetrieveSeveritiesDelegate, this.onIncident_RetrieveSeveritiesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> Incident_RetrieveStatuses() {
            return base.Channel.Incident_RetrieveStatuses();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveStatuses(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveStatuses(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> EndIncident_RetrieveStatuses(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveStatuses(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveStatuses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveStatuses(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveStatuses(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentStatus> retVal = this.EndIncident_RetrieveStatuses(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveStatusesCompleted(object state) {
            if ((this.Incident_RetrieveStatusesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveStatusesCompleted(this, new Incident_RetrieveStatusesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveStatusesAsync() {
            this.Incident_RetrieveStatusesAsync(null);
        }
        
        public void Incident_RetrieveStatusesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveStatusesDelegate == null)) {
                this.onBeginIncident_RetrieveStatusesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveStatuses);
            }
            if ((this.onEndIncident_RetrieveStatusesDelegate == null)) {
                this.onEndIncident_RetrieveStatusesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveStatuses);
            }
            if ((this.onIncident_RetrieveStatusesCompletedDelegate == null)) {
                this.onIncident_RetrieveStatusesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveStatusesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveStatusesDelegate, null, this.onEndIncident_RetrieveStatusesDelegate, this.onIncident_RetrieveStatusesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> Incident_RetrieveTypes() {
            return base.Channel.Incident_RetrieveTypes();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> EndIncident_RetrieveTypes(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveTypes(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginIncident_RetrieveTypes(callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveTypes(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncidentType> retVal = this.EndIncident_RetrieveTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveTypesCompleted(object state) {
            if ((this.Incident_RetrieveTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveTypesCompleted(this, new Incident_RetrieveTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveTypesAsync() {
            this.Incident_RetrieveTypesAsync(null);
        }
        
        public void Incident_RetrieveTypesAsync(object userState) {
            if ((this.onBeginIncident_RetrieveTypesDelegate == null)) {
                this.onBeginIncident_RetrieveTypesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveTypes);
            }
            if ((this.onEndIncident_RetrieveTypesDelegate == null)) {
                this.onEndIncident_RetrieveTypesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveTypes);
            }
            if ((this.onIncident_RetrieveTypesCompletedDelegate == null)) {
                this.onIncident_RetrieveTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveTypesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveTypesDelegate, null, this.onEndIncident_RetrieveTypesDelegate, this.onIncident_RetrieveTypesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> Incident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowFields(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowFields(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> EndIncident_RetrieveWorkflowFields(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowFields(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginIncident_RetrieveWorkflowFields(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowFields(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentFields> retVal = this.EndIncident_RetrieveWorkflowFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowFieldsCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowFieldsCompleted(this, new Incident_RetrieveWorkflowFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId) {
            this.Incident_RetrieveWorkflowFieldsAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Incident_RetrieveWorkflowFieldsAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowFieldsDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowFieldsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowFields);
            }
            if ((this.onEndIncident_RetrieveWorkflowFieldsDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowFieldsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowFields);
            }
            if ((this.onIncident_RetrieveWorkflowFieldsCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowFieldsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndIncident_RetrieveWorkflowFieldsDelegate, this.onIncident_RetrieveWorkflowFieldsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> Incident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            return base.Channel.Incident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowTransitions(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> EndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowTransitions(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowTransitions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            bool isDetector = ((bool)(inValues[2]));
            bool isOwner = ((bool)(inValues[3]));
            return this.BeginIncident_RetrieveWorkflowTransitions(currentTypeId, currentStatusId, isDetector, isOwner, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowTransitions(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentTransition> retVal = this.EndIncident_RetrieveWorkflowTransitions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowTransitionsCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowTransitionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowTransitionsCompleted(this, new Incident_RetrieveWorkflowTransitionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner) {
            this.Incident_RetrieveWorkflowTransitionsAsync(currentTypeId, currentStatusId, isDetector, isOwner, null);
        }
        
        public void Incident_RetrieveWorkflowTransitionsAsync(int currentTypeId, int currentStatusId, bool isDetector, bool isOwner, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowTransitionsDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowTransitions);
            }
            if ((this.onEndIncident_RetrieveWorkflowTransitionsDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowTransitionsDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowTransitions);
            }
            if ((this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowTransitionsCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowTransitionsDelegate, new object[] {
                        currentTypeId,
                        currentStatusId,
                        isDetector,
                        isOwner}, this.onEndIncident_RetrieveWorkflowTransitionsDelegate, this.onIncident_RetrieveWorkflowTransitionsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> Incident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId) {
            return base.Channel.Incident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_RetrieveWorkflowCustomProperties(int currentTypeId, int currentStatusId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> EndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            return base.Channel.EndIncident_RetrieveWorkflowCustomProperties(result);
        }
        
        private System.IAsyncResult OnBeginIncident_RetrieveWorkflowCustomProperties(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int currentTypeId = ((int)(inValues[0]));
            int currentStatusId = ((int)(inValues[1]));
            return this.BeginIncident_RetrieveWorkflowCustomProperties(currentTypeId, currentStatusId, callback, asyncState);
        }
        
        private object[] OnEndIncident_RetrieveWorkflowCustomProperties(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteWorkflowIncidentCustomProperties> retVal = this.EndIncident_RetrieveWorkflowCustomProperties(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIncident_RetrieveWorkflowCustomPropertiesCompleted(object state) {
            if ((this.Incident_RetrieveWorkflowCustomPropertiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_RetrieveWorkflowCustomPropertiesCompleted(this, new Incident_RetrieveWorkflowCustomPropertiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId) {
            this.Incident_RetrieveWorkflowCustomPropertiesAsync(currentTypeId, currentStatusId, null);
        }
        
        public void Incident_RetrieveWorkflowCustomPropertiesAsync(int currentTypeId, int currentStatusId, object userState) {
            if ((this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate = new BeginOperationDelegate(this.OnBeginIncident_RetrieveWorkflowCustomProperties);
            }
            if ((this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate == null)) {
                this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate = new EndOperationDelegate(this.OnEndIncident_RetrieveWorkflowCustomProperties);
            }
            if ((this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate == null)) {
                this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_RetrieveWorkflowCustomPropertiesCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_RetrieveWorkflowCustomPropertiesDelegate, new object[] {
                        currentTypeId,
                        currentStatusId}, this.onEndIncident_RetrieveWorkflowCustomPropertiesDelegate, this.onIncident_RetrieveWorkflowCustomPropertiesCompletedDelegate, userState);
        }
        
        public void Incident_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident) {
            base.Channel.Incident_Update(remoteIncident);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Update(remoteIncident, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndIncident_Update(System.IAsyncResult result) {
            base.Channel.EndIncident_Update(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident)(inValues[0]));
            return this.BeginIncident_Update(remoteIncident, callback, asyncState);
        }
        
        private object[] OnEndIncident_Update(System.IAsyncResult result) {
            this.EndIncident_Update(result);
            return null;
        }
        
        private void OnIncident_UpdateCompleted(object state) {
            if ((this.Incident_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident) {
            this.Incident_UpdateAsync(remoteIncident, null);
        }
        
        public void Incident_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteIncident remoteIncident, object userState) {
            if ((this.onBeginIncident_UpdateDelegate == null)) {
                this.onBeginIncident_UpdateDelegate = new BeginOperationDelegate(this.OnBeginIncident_Update);
            }
            if ((this.onEndIncident_UpdateDelegate == null)) {
                this.onEndIncident_UpdateDelegate = new EndOperationDelegate(this.OnEndIncident_Update);
            }
            if ((this.onIncident_UpdateCompletedDelegate == null)) {
                this.onIncident_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_UpdateDelegate, new object[] {
                        remoteIncident}, this.onEndIncident_UpdateDelegate, this.onIncident_UpdateCompletedDelegate, userState);
        }
        
        public void Incident_Delete(int incidentId) {
            base.Channel.Incident_Delete(incidentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIncident_Delete(int incidentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIncident_Delete(incidentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndIncident_Delete(System.IAsyncResult result) {
            base.Channel.EndIncident_Delete(result);
        }
        
        private System.IAsyncResult OnBeginIncident_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int incidentId = ((int)(inValues[0]));
            return this.BeginIncident_Delete(incidentId, callback, asyncState);
        }
        
        private object[] OnEndIncident_Delete(System.IAsyncResult result) {
            this.EndIncident_Delete(result);
            return null;
        }
        
        private void OnIncident_DeleteCompleted(object state) {
            if ((this.Incident_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Incident_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Incident_DeleteAsync(int incidentId) {
            this.Incident_DeleteAsync(incidentId, null);
        }
        
        public void Incident_DeleteAsync(int incidentId, object userState) {
            if ((this.onBeginIncident_DeleteDelegate == null)) {
                this.onBeginIncident_DeleteDelegate = new BeginOperationDelegate(this.OnBeginIncident_Delete);
            }
            if ((this.onEndIncident_DeleteDelegate == null)) {
                this.onEndIncident_DeleteDelegate = new EndOperationDelegate(this.OnEndIncident_Delete);
            }
            if ((this.onIncident_DeleteCompletedDelegate == null)) {
                this.onIncident_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIncident_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginIncident_DeleteDelegate, new object[] {
                        incidentId}, this.onEndIncident_DeleteDelegate, this.onIncident_DeleteCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Project_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            return base.Channel.Project_Create(remoteProject, existingProjectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Create(remoteProject, existingProjectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject EndProject_Create(System.IAsyncResult result) {
            return base.Channel.EndProject_Create(result);
        }
        
        private System.IAsyncResult OnBeginProject_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject)(inValues[0]));
            System.Nullable<int> existingProjectId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginProject_Create(remoteProject, existingProjectId, callback, asyncState);
        }
        
        private object[] OnEndProject_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject retVal = this.EndProject_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_CreateCompleted(object state) {
            if ((this.Project_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_CreateCompleted(this, new Project_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId) {
            this.Project_CreateAsync(remoteProject, existingProjectId, null);
        }
        
        public void Project_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject remoteProject, System.Nullable<int> existingProjectId, object userState) {
            if ((this.onBeginProject_CreateDelegate == null)) {
                this.onBeginProject_CreateDelegate = new BeginOperationDelegate(this.OnBeginProject_Create);
            }
            if ((this.onEndProject_CreateDelegate == null)) {
                this.onEndProject_CreateDelegate = new EndOperationDelegate(this.OnEndProject_Create);
            }
            if ((this.onProject_CreateCompletedDelegate == null)) {
                this.onProject_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginProject_CreateDelegate, new object[] {
                        remoteProject,
                        existingProjectId}, this.onEndProject_CreateDelegate, this.onProject_CreateCompletedDelegate, userState);
        }
        
        public void Project_Delete(int projectId) {
            base.Channel.Project_Delete(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Delete(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Delete(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndProject_Delete(System.IAsyncResult result) {
            base.Channel.EndProject_Delete(result);
        }
        
        private System.IAsyncResult OnBeginProject_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginProject_Delete(projectId, callback, asyncState);
        }
        
        private object[] OnEndProject_Delete(System.IAsyncResult result) {
            this.EndProject_Delete(result);
            return null;
        }
        
        private void OnProject_DeleteCompleted(object state) {
            if ((this.Project_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_DeleteAsync(int projectId) {
            this.Project_DeleteAsync(projectId, null);
        }
        
        public void Project_DeleteAsync(int projectId, object userState) {
            if ((this.onBeginProject_DeleteDelegate == null)) {
                this.onBeginProject_DeleteDelegate = new BeginOperationDelegate(this.OnBeginProject_Delete);
            }
            if ((this.onEndProject_DeleteDelegate == null)) {
                this.onEndProject_DeleteDelegate = new EndOperationDelegate(this.OnEndProject_Delete);
            }
            if ((this.onProject_DeleteCompletedDelegate == null)) {
                this.onProject_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginProject_DeleteDelegate, new object[] {
                        projectId}, this.onEndProject_DeleteDelegate, this.onProject_DeleteCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> Project_Retrieve() {
            return base.Channel.Project_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> EndProject_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndProject_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginProject_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProject_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndProject_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject> retVal = this.EndProject_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveCompleted(object state) {
            if ((this.Project_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveCompleted(this, new Project_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveAsync() {
            this.Project_RetrieveAsync(null);
        }
        
        public void Project_RetrieveAsync(object userState) {
            if ((this.onBeginProject_RetrieveDelegate == null)) {
                this.onBeginProject_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginProject_Retrieve);
            }
            if ((this.onEndProject_RetrieveDelegate == null)) {
                this.onEndProject_RetrieveDelegate = new EndOperationDelegate(this.OnEndProject_Retrieve);
            }
            if ((this.onProject_RetrieveCompletedDelegate == null)) {
                this.onProject_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveDelegate, null, this.onEndProject_RetrieveDelegate, this.onProject_RetrieveCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject Project_RetrieveById(int projectId) {
            return base.Channel.Project_RetrieveById(projectId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_RetrieveById(int projectId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_RetrieveById(projectId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject EndProject_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndProject_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginProject_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int projectId = ((int)(inValues[0]));
            return this.BeginProject_RetrieveById(projectId, callback, asyncState);
        }
        
        private object[] OnEndProject_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProject retVal = this.EndProject_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveByIdCompleted(object state) {
            if ((this.Project_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveByIdCompleted(this, new Project_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveByIdAsync(int projectId) {
            this.Project_RetrieveByIdAsync(projectId, null);
        }
        
        public void Project_RetrieveByIdAsync(int projectId, object userState) {
            if ((this.onBeginProject_RetrieveByIdDelegate == null)) {
                this.onBeginProject_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginProject_RetrieveById);
            }
            if ((this.onEndProject_RetrieveByIdDelegate == null)) {
                this.onEndProject_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndProject_RetrieveById);
            }
            if ((this.onProject_RetrieveByIdCompletedDelegate == null)) {
                this.onProject_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveByIdDelegate, new object[] {
                        projectId}, this.onEndProject_RetrieveByIdDelegate, this.onProject_RetrieveByIdCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> Project_RetrieveUserMembership() {
            return base.Channel.Project_RetrieveUserMembership();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProject_RetrieveUserMembership(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProject_RetrieveUserMembership(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> EndProject_RetrieveUserMembership(System.IAsyncResult result) {
            return base.Channel.EndProject_RetrieveUserMembership(result);
        }
        
        private System.IAsyncResult OnBeginProject_RetrieveUserMembership(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProject_RetrieveUserMembership(callback, asyncState);
        }
        
        private object[] OnEndProject_RetrieveUserMembership(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectUser> retVal = this.EndProject_RetrieveUserMembership(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProject_RetrieveUserMembershipCompleted(object state) {
            if ((this.Project_RetrieveUserMembershipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Project_RetrieveUserMembershipCompleted(this, new Project_RetrieveUserMembershipCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Project_RetrieveUserMembershipAsync() {
            this.Project_RetrieveUserMembershipAsync(null);
        }
        
        public void Project_RetrieveUserMembershipAsync(object userState) {
            if ((this.onBeginProject_RetrieveUserMembershipDelegate == null)) {
                this.onBeginProject_RetrieveUserMembershipDelegate = new BeginOperationDelegate(this.OnBeginProject_RetrieveUserMembership);
            }
            if ((this.onEndProject_RetrieveUserMembershipDelegate == null)) {
                this.onEndProject_RetrieveUserMembershipDelegate = new EndOperationDelegate(this.OnEndProject_RetrieveUserMembership);
            }
            if ((this.onProject_RetrieveUserMembershipCompletedDelegate == null)) {
                this.onProject_RetrieveUserMembershipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProject_RetrieveUserMembershipCompleted);
            }
            base.InvokeAsync(this.onBeginProject_RetrieveUserMembershipDelegate, null, this.onEndProject_RetrieveUserMembershipDelegate, this.onProject_RetrieveUserMembershipCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> ProjectRole_Retrieve() {
            return base.Channel.ProjectRole_Retrieve();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProjectRole_Retrieve(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProjectRole_Retrieve(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> EndProjectRole_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndProjectRole_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginProjectRole_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginProjectRole_Retrieve(callback, asyncState);
        }
        
        private object[] OnEndProjectRole_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteProjectRole> retVal = this.EndProjectRole_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProjectRole_RetrieveCompleted(object state) {
            if ((this.ProjectRole_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProjectRole_RetrieveCompleted(this, new ProjectRole_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProjectRole_RetrieveAsync() {
            this.ProjectRole_RetrieveAsync(null);
        }
        
        public void ProjectRole_RetrieveAsync(object userState) {
            if ((this.onBeginProjectRole_RetrieveDelegate == null)) {
                this.onBeginProjectRole_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginProjectRole_Retrieve);
            }
            if ((this.onEndProjectRole_RetrieveDelegate == null)) {
                this.onEndProjectRole_RetrieveDelegate = new EndOperationDelegate(this.OnEndProjectRole_Retrieve);
            }
            if ((this.onProjectRole_RetrieveCompletedDelegate == null)) {
                this.onProjectRole_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProjectRole_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginProjectRole_RetrieveDelegate, null, this.onEndProjectRole_RetrieveDelegate, this.onProjectRole_RetrieveCompletedDelegate, userState);
        }
        
        public void Release_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_AddTestMapping(remoteReleaseTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_AddTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_AddTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_AddTestMapping(System.IAsyncResult result) {
            base.Channel.EndRelease_AddTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_AddTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping)(inValues[0]));
            return this.BeginRelease_AddTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRelease_AddTestMapping(System.IAsyncResult result) {
            this.EndRelease_AddTestMapping(result);
            return null;
        }
        
        private void OnRelease_AddTestMappingCompleted(object state) {
            if ((this.Release_AddTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_AddTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_AddTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            this.Release_AddTestMappingAsync(remoteReleaseTestCaseMapping, null);
        }
        
        public void Release_AddTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, object userState) {
            if ((this.onBeginRelease_AddTestMappingDelegate == null)) {
                this.onBeginRelease_AddTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_AddTestMapping);
            }
            if ((this.onEndRelease_AddTestMappingDelegate == null)) {
                this.onEndRelease_AddTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_AddTestMapping);
            }
            if ((this.onRelease_AddTestMappingCompletedDelegate == null)) {
                this.onRelease_AddTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_AddTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_AddTestMappingDelegate, new object[] {
                        remoteReleaseTestCaseMapping}, this.onEndRelease_AddTestMappingDelegate, this.onRelease_AddTestMappingCompletedDelegate, userState);
        }
        
        public void Release_AddTestMapping2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings) {
            base.Channel.Release_AddTestMapping2(remoteReleaseTestCaseMappings);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_AddTestMapping2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_AddTestMapping2(remoteReleaseTestCaseMappings, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_AddTestMapping2(System.IAsyncResult result) {
            base.Channel.EndRelease_AddTestMapping2(result);
        }
        
        private System.IAsyncResult OnBeginRelease_AddTestMapping2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping>)(inValues[0]));
            return this.BeginRelease_AddTestMapping2(remoteReleaseTestCaseMappings, callback, asyncState);
        }
        
        private object[] OnEndRelease_AddTestMapping2(System.IAsyncResult result) {
            this.EndRelease_AddTestMapping2(result);
            return null;
        }
        
        private void OnRelease_AddTestMapping2Completed(object state) {
            if ((this.Release_AddTestMapping2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_AddTestMapping2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_AddTestMapping2Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings) {
            this.Release_AddTestMapping2Async(remoteReleaseTestCaseMappings, null);
        }
        
        public void Release_AddTestMapping2Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> remoteReleaseTestCaseMappings, object userState) {
            if ((this.onBeginRelease_AddTestMapping2Delegate == null)) {
                this.onBeginRelease_AddTestMapping2Delegate = new BeginOperationDelegate(this.OnBeginRelease_AddTestMapping2);
            }
            if ((this.onEndRelease_AddTestMapping2Delegate == null)) {
                this.onEndRelease_AddTestMapping2Delegate = new EndOperationDelegate(this.OnEndRelease_AddTestMapping2);
            }
            if ((this.onRelease_AddTestMapping2CompletedDelegate == null)) {
                this.onRelease_AddTestMapping2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_AddTestMapping2Completed);
            }
            base.InvokeAsync(this.onBeginRelease_AddTestMapping2Delegate, new object[] {
                        remoteReleaseTestCaseMappings}, this.onEndRelease_AddTestMapping2Delegate, this.onRelease_AddTestMapping2CompletedDelegate, userState);
        }
        
        public long Release_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.Release_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndRelease_Count(System.IAsyncResult result) {
            return base.Channel.EndRelease_Count(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginRelease_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndRelease_Count(System.IAsyncResult result) {
            long retVal = this.EndRelease_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CountCompleted(object state) {
            if ((this.Release_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CountCompleted(this, new Release_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.Release_CountAsync(remoteFilters, null);
        }
        
        public void Release_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginRelease_CountDelegate == null)) {
                this.onBeginRelease_CountDelegate = new BeginOperationDelegate(this.OnBeginRelease_Count);
            }
            if ((this.onEndRelease_CountDelegate == null)) {
                this.onEndRelease_CountDelegate = new EndOperationDelegate(this.OnEndRelease_Count);
            }
            if ((this.onRelease_CountCompletedDelegate == null)) {
                this.onRelease_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CountCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CountDelegate, new object[] {
                        remoteFilters}, this.onEndRelease_CountDelegate, this.onRelease_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Release_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            return base.Channel.Release_Create(remoteRelease, parentReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Create(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Create(remoteRelease, parentReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease EndRelease_Create(System.IAsyncResult result) {
            return base.Channel.EndRelease_Create(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Create(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease)(inValues[0]));
            System.Nullable<int> parentReleaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRelease_Create(remoteRelease, parentReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Create(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease retVal = this.EndRelease_Create(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CreateCompleted(object state) {
            if ((this.Release_CreateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CreateCompleted(this, new Release_CreateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId) {
            this.Release_CreateAsync(remoteRelease, parentReleaseId, null);
        }
        
        public void Release_CreateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.Nullable<int> parentReleaseId, object userState) {
            if ((this.onBeginRelease_CreateDelegate == null)) {
                this.onBeginRelease_CreateDelegate = new BeginOperationDelegate(this.OnBeginRelease_Create);
            }
            if ((this.onEndRelease_CreateDelegate == null)) {
                this.onEndRelease_CreateDelegate = new EndOperationDelegate(this.OnEndRelease_Create);
            }
            if ((this.onRelease_CreateCompletedDelegate == null)) {
                this.onRelease_CreateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CreateCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CreateDelegate, new object[] {
                        remoteRelease,
                        parentReleaseId}, this.onEndRelease_CreateDelegate, this.onRelease_CreateCompletedDelegate, userState);
        }
        
        public void Release_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            base.Channel.Release_RemoveTestMapping(remoteReleaseTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RemoveTestMapping(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RemoveTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_RemoveTestMapping(System.IAsyncResult result) {
            base.Channel.EndRelease_RemoveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RemoveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping)(inValues[0]));
            return this.BeginRelease_RemoveTestMapping(remoteReleaseTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRelease_RemoveTestMapping(System.IAsyncResult result) {
            this.EndRelease_RemoveTestMapping(result);
            return null;
        }
        
        private void OnRelease_RemoveTestMappingCompleted(object state) {
            if ((this.Release_RemoveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RemoveTestMappingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RemoveTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping) {
            this.Release_RemoveTestMappingAsync(remoteReleaseTestCaseMapping, null);
        }
        
        public void Release_RemoveTestMappingAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping remoteReleaseTestCaseMapping, object userState) {
            if ((this.onBeginRelease_RemoveTestMappingDelegate == null)) {
                this.onBeginRelease_RemoveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_RemoveTestMapping);
            }
            if ((this.onEndRelease_RemoveTestMappingDelegate == null)) {
                this.onEndRelease_RemoveTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_RemoveTestMapping);
            }
            if ((this.onRelease_RemoveTestMappingCompletedDelegate == null)) {
                this.onRelease_RemoveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RemoveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RemoveTestMappingDelegate, new object[] {
                        remoteReleaseTestCaseMapping}, this.onEndRelease_RemoveTestMappingDelegate, this.onRelease_RemoveTestMappingCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Release_Retrieve(bool activeOnly) {
            return base.Channel.Release_Retrieve(activeOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Retrieve(bool activeOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Retrieve(activeOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> EndRelease_Retrieve(System.IAsyncResult result) {
            return base.Channel.EndRelease_Retrieve(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Retrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool activeOnly = ((bool)(inValues[0]));
            return this.BeginRelease_Retrieve(activeOnly, callback, asyncState);
        }
        
        private object[] OnEndRelease_Retrieve(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> retVal = this.EndRelease_Retrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveCompleted(object state) {
            if ((this.Release_RetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveCompleted(this, new Release_RetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveAsync(bool activeOnly) {
            this.Release_RetrieveAsync(activeOnly, null);
        }
        
        public void Release_RetrieveAsync(bool activeOnly, object userState) {
            if ((this.onBeginRelease_RetrieveDelegate == null)) {
                this.onBeginRelease_RetrieveDelegate = new BeginOperationDelegate(this.OnBeginRelease_Retrieve);
            }
            if ((this.onEndRelease_RetrieveDelegate == null)) {
                this.onEndRelease_RetrieveDelegate = new EndOperationDelegate(this.OnEndRelease_Retrieve);
            }
            if ((this.onRelease_RetrieveCompletedDelegate == null)) {
                this.onRelease_RetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveDelegate, new object[] {
                        activeOnly}, this.onEndRelease_RetrieveDelegate, this.onRelease_RetrieveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> Release_Retrieve2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            return base.Channel.Release_Retrieve2(remoteFilters, startingRow, numberOfRows);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Retrieve2(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Retrieve2(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> EndRelease_Retrieve2(System.IAsyncResult result) {
            return base.Channel.EndRelease_Retrieve2(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Retrieve2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            int startingRow = ((int)(inValues[1]));
            int numberOfRows = ((int)(inValues[2]));
            return this.BeginRelease_Retrieve2(remoteFilters, startingRow, numberOfRows, callback, asyncState);
        }
        
        private object[] OnEndRelease_Retrieve2(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease> retVal = this.EndRelease_Retrieve2(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_Retrieve2Completed(object state) {
            if ((this.Release_Retrieve2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_Retrieve2Completed(this, new Release_Retrieve2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_Retrieve2Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows) {
            this.Release_Retrieve2Async(remoteFilters, startingRow, numberOfRows, null);
        }
        
        public void Release_Retrieve2Async(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, int startingRow, int numberOfRows, object userState) {
            if ((this.onBeginRelease_Retrieve2Delegate == null)) {
                this.onBeginRelease_Retrieve2Delegate = new BeginOperationDelegate(this.OnBeginRelease_Retrieve2);
            }
            if ((this.onEndRelease_Retrieve2Delegate == null)) {
                this.onEndRelease_Retrieve2Delegate = new EndOperationDelegate(this.OnEndRelease_Retrieve2);
            }
            if ((this.onRelease_Retrieve2CompletedDelegate == null)) {
                this.onRelease_Retrieve2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_Retrieve2Completed);
            }
            base.InvokeAsync(this.onBeginRelease_Retrieve2Delegate, new object[] {
                        remoteFilters,
                        startingRow,
                        numberOfRows}, this.onEndRelease_Retrieve2Delegate, this.onRelease_Retrieve2CompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease Release_RetrieveById(int releaseId) {
            return base.Channel.Release_RetrieveById(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveById(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveById(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease EndRelease_RetrieveById(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveById(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveById(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveById(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease retVal = this.EndRelease_RetrieveById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveByIdCompleted(object state) {
            if ((this.Release_RetrieveByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveByIdCompleted(this, new Release_RetrieveByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveByIdAsync(int releaseId) {
            this.Release_RetrieveByIdAsync(releaseId, null);
        }
        
        public void Release_RetrieveByIdAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_RetrieveByIdDelegate == null)) {
                this.onBeginRelease_RetrieveByIdDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveById);
            }
            if ((this.onEndRelease_RetrieveByIdDelegate == null)) {
                this.onEndRelease_RetrieveByIdDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveById);
            }
            if ((this.onRelease_RetrieveByIdCompletedDelegate == null)) {
                this.onRelease_RetrieveByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveByIdCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveByIdDelegate, new object[] {
                        releaseId}, this.onEndRelease_RetrieveByIdDelegate, this.onRelease_RetrieveByIdCompletedDelegate, userState);
        }
        
        public void Release_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease) {
            base.Channel.Release_Update(remoteRelease);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Update(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Update(remoteRelease, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Update(System.IAsyncResult result) {
            base.Channel.EndRelease_Update(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Update(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease)(inValues[0]));
            return this.BeginRelease_Update(remoteRelease, callback, asyncState);
        }
        
        private object[] OnEndRelease_Update(System.IAsyncResult result) {
            this.EndRelease_Update(result);
            return null;
        }
        
        private void OnRelease_UpdateCompleted(object state) {
            if ((this.Release_UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease) {
            this.Release_UpdateAsync(remoteRelease, null);
        }
        
        public void Release_UpdateAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRelease remoteRelease, object userState) {
            if ((this.onBeginRelease_UpdateDelegate == null)) {
                this.onBeginRelease_UpdateDelegate = new BeginOperationDelegate(this.OnBeginRelease_Update);
            }
            if ((this.onEndRelease_UpdateDelegate == null)) {
                this.onEndRelease_UpdateDelegate = new EndOperationDelegate(this.OnEndRelease_Update);
            }
            if ((this.onRelease_UpdateCompletedDelegate == null)) {
                this.onRelease_UpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_UpdateCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_UpdateDelegate, new object[] {
                        remoteRelease}, this.onEndRelease_UpdateDelegate, this.onRelease_UpdateCompletedDelegate, userState);
        }
        
        public void Release_Delete(int releaseId) {
            base.Channel.Release_Delete(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Delete(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Delete(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Delete(System.IAsyncResult result) {
            base.Channel.EndRelease_Delete(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Delete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_Delete(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Delete(System.IAsyncResult result) {
            this.EndRelease_Delete(result);
            return null;
        }
        
        private void OnRelease_DeleteCompleted(object state) {
            if ((this.Release_DeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_DeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_DeleteAsync(int releaseId) {
            this.Release_DeleteAsync(releaseId, null);
        }
        
        public void Release_DeleteAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_DeleteDelegate == null)) {
                this.onBeginRelease_DeleteDelegate = new BeginOperationDelegate(this.OnBeginRelease_Delete);
            }
            if ((this.onEndRelease_DeleteDelegate == null)) {
                this.onEndRelease_DeleteDelegate = new EndOperationDelegate(this.OnEndRelease_Delete);
            }
            if ((this.onRelease_DeleteCompletedDelegate == null)) {
                this.onRelease_DeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_DeleteCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_DeleteDelegate, new object[] {
                        releaseId}, this.onEndRelease_DeleteDelegate, this.onRelease_DeleteCompletedDelegate, userState);
        }
        
        public void Release_Move(int releaseId, System.Nullable<int> destinationReleaseId) {
            base.Channel.Release_Move(releaseId, destinationReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_Move(int releaseId, System.Nullable<int> destinationReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_Move(releaseId, destinationReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRelease_Move(System.IAsyncResult result) {
            base.Channel.EndRelease_Move(result);
        }
        
        private System.IAsyncResult OnBeginRelease_Move(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            System.Nullable<int> destinationReleaseId = ((System.Nullable<int>)(inValues[1]));
            return this.BeginRelease_Move(releaseId, destinationReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_Move(System.IAsyncResult result) {
            this.EndRelease_Move(result);
            return null;
        }
        
        private void OnRelease_MoveCompleted(object state) {
            if ((this.Release_MoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_MoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_MoveAsync(int releaseId, System.Nullable<int> destinationReleaseId) {
            this.Release_MoveAsync(releaseId, destinationReleaseId, null);
        }
        
        public void Release_MoveAsync(int releaseId, System.Nullable<int> destinationReleaseId, object userState) {
            if ((this.onBeginRelease_MoveDelegate == null)) {
                this.onBeginRelease_MoveDelegate = new BeginOperationDelegate(this.OnBeginRelease_Move);
            }
            if ((this.onEndRelease_MoveDelegate == null)) {
                this.onEndRelease_MoveDelegate = new EndOperationDelegate(this.OnEndRelease_Move);
            }
            if ((this.onRelease_MoveCompletedDelegate == null)) {
                this.onRelease_MoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_MoveCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_MoveDelegate, new object[] {
                        releaseId,
                        destinationReleaseId}, this.onEndRelease_MoveDelegate, this.onRelease_MoveCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> Release_RetrieveComments(int ReleaseId) {
            return base.Channel.Release_RetrieveComments(ReleaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveComments(int ReleaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveComments(ReleaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> EndRelease_RetrieveComments(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveComments(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveComments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ReleaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveComments(ReleaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveComments(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment> retVal = this.EndRelease_RetrieveComments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveCommentsCompleted(object state) {
            if ((this.Release_RetrieveCommentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveCommentsCompleted(this, new Release_RetrieveCommentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveCommentsAsync(int ReleaseId) {
            this.Release_RetrieveCommentsAsync(ReleaseId, null);
        }
        
        public void Release_RetrieveCommentsAsync(int ReleaseId, object userState) {
            if ((this.onBeginRelease_RetrieveCommentsDelegate == null)) {
                this.onBeginRelease_RetrieveCommentsDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveComments);
            }
            if ((this.onEndRelease_RetrieveCommentsDelegate == null)) {
                this.onEndRelease_RetrieveCommentsDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveComments);
            }
            if ((this.onRelease_RetrieveCommentsCompletedDelegate == null)) {
                this.onRelease_RetrieveCommentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveCommentsCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveCommentsDelegate, new object[] {
                        ReleaseId}, this.onEndRelease_RetrieveCommentsDelegate, this.onRelease_RetrieveCommentsCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> Release_RetrieveTestMapping(int releaseId) {
            return base.Channel.Release_RetrieveTestMapping(releaseId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_RetrieveTestMapping(int releaseId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_RetrieveTestMapping(releaseId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> EndRelease_RetrieveTestMapping(System.IAsyncResult result) {
            return base.Channel.EndRelease_RetrieveTestMapping(result);
        }
        
        private System.IAsyncResult OnBeginRelease_RetrieveTestMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int releaseId = ((int)(inValues[0]));
            return this.BeginRelease_RetrieveTestMapping(releaseId, callback, asyncState);
        }
        
        private object[] OnEndRelease_RetrieveTestMapping(System.IAsyncResult result) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteReleaseTestCaseMapping> retVal = this.EndRelease_RetrieveTestMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_RetrieveTestMappingCompleted(object state) {
            if ((this.Release_RetrieveTestMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_RetrieveTestMappingCompleted(this, new Release_RetrieveTestMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_RetrieveTestMappingAsync(int releaseId) {
            this.Release_RetrieveTestMappingAsync(releaseId, null);
        }
        
        public void Release_RetrieveTestMappingAsync(int releaseId, object userState) {
            if ((this.onBeginRelease_RetrieveTestMappingDelegate == null)) {
                this.onBeginRelease_RetrieveTestMappingDelegate = new BeginOperationDelegate(this.OnBeginRelease_RetrieveTestMapping);
            }
            if ((this.onEndRelease_RetrieveTestMappingDelegate == null)) {
                this.onEndRelease_RetrieveTestMappingDelegate = new EndOperationDelegate(this.OnEndRelease_RetrieveTestMapping);
            }
            if ((this.onRelease_RetrieveTestMappingCompletedDelegate == null)) {
                this.onRelease_RetrieveTestMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_RetrieveTestMappingCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_RetrieveTestMappingDelegate, new object[] {
                        releaseId}, this.onEndRelease_RetrieveTestMappingDelegate, this.onRelease_RetrieveTestMappingCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment Release_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            return base.Channel.Release_CreateComment(remoteComment);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRelease_CreateComment(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRelease_CreateComment(remoteComment, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment EndRelease_CreateComment(System.IAsyncResult result) {
            return base.Channel.EndRelease_CreateComment(result);
        }
        
        private System.IAsyncResult OnBeginRelease_CreateComment(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment)(inValues[0]));
            return this.BeginRelease_CreateComment(remoteComment, callback, asyncState);
        }
        
        private object[] OnEndRelease_CreateComment(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment retVal = this.EndRelease_CreateComment(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRelease_CreateCommentCompleted(object state) {
            if ((this.Release_CreateCommentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Release_CreateCommentCompleted(this, new Release_CreateCommentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Release_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment) {
            this.Release_CreateCommentAsync(remoteComment, null);
        }
        
        public void Release_CreateCommentAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteComment remoteComment, object userState) {
            if ((this.onBeginRelease_CreateCommentDelegate == null)) {
                this.onBeginRelease_CreateCommentDelegate = new BeginOperationDelegate(this.OnBeginRelease_CreateComment);
            }
            if ((this.onEndRelease_CreateCommentDelegate == null)) {
                this.onEndRelease_CreateCommentDelegate = new EndOperationDelegate(this.OnEndRelease_CreateComment);
            }
            if ((this.onRelease_CreateCommentCompletedDelegate == null)) {
                this.onRelease_CreateCommentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRelease_CreateCommentCompleted);
            }
            base.InvokeAsync(this.onBeginRelease_CreateCommentDelegate, new object[] {
                        remoteComment}, this.onEndRelease_CreateCommentDelegate, this.onRelease_CreateCommentCompletedDelegate, userState);
        }
        
        public void Requirement_AddTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            base.Channel.Requirement_AddTestCoverage(remoteReqTestCaseMapping);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_AddTestCoverage(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_AddTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRequirement_AddTestCoverage(System.IAsyncResult result) {
            base.Channel.EndRequirement_AddTestCoverage(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_AddTestCoverage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping)(inValues[0]));
            return this.BeginRequirement_AddTestCoverage(remoteReqTestCaseMapping, callback, asyncState);
        }
        
        private object[] OnEndRequirement_AddTestCoverage(System.IAsyncResult result) {
            this.EndRequirement_AddTestCoverage(result);
            return null;
        }
        
        private void OnRequirement_AddTestCoverageCompleted(object state) {
            if ((this.Requirement_AddTestCoverageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_AddTestCoverageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_AddTestCoverageAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping) {
            this.Requirement_AddTestCoverageAsync(remoteReqTestCaseMapping, null);
        }
        
        public void Requirement_AddTestCoverageAsync(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirementTestCaseMapping remoteReqTestCaseMapping, object userState) {
            if ((this.onBeginRequirement_AddTestCoverageDelegate == null)) {
                this.onBeginRequirement_AddTestCoverageDelegate = new BeginOperationDelegate(this.OnBeginRequirement_AddTestCoverage);
            }
            if ((this.onEndRequirement_AddTestCoverageDelegate == null)) {
                this.onEndRequirement_AddTestCoverageDelegate = new EndOperationDelegate(this.OnEndRequirement_AddTestCoverage);
            }
            if ((this.onRequirement_AddTestCoverageCompletedDelegate == null)) {
                this.onRequirement_AddTestCoverageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_AddTestCoverageCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_AddTestCoverageDelegate, new object[] {
                        remoteReqTestCaseMapping}, this.onEndRequirement_AddTestCoverageDelegate, this.onRequirement_AddTestCoverageCompletedDelegate, userState);
        }
        
        public long Requirement_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            return base.Channel.Requirement_Count(remoteFilters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Count(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Count(remoteFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public long EndRequirement_Count(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Count(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Count(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters = ((System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter>)(inValues[0]));
            return this.BeginRequirement_Count(remoteFilters, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Count(System.IAsyncResult result) {
            long retVal = this.EndRequirement_Count(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_CountCompleted(object state) {
            if ((this.Requirement_CountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_CountCompleted(this, new Requirement_CountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters) {
            this.Requirement_CountAsync(remoteFilters, null);
        }
        
        public void Requirement_CountAsync(System.Collections.Generic.List<Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteFilter> remoteFilters, object userState) {
            if ((this.onBeginRequirement_CountDelegate == null)) {
                this.onBeginRequirement_CountDelegate = new BeginOperationDelegate(this.OnBeginRequirement_Count);
            }
            if ((this.onEndRequirement_CountDelegate == null)) {
                this.onEndRequirement_CountDelegate = new EndOperationDelegate(this.OnEndRequirement_Count);
            }
            if ((this.onRequirement_CountCompletedDelegate == null)) {
                this.onRequirement_CountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_CountCompleted);
            }
            base.InvokeAsync(this.onBeginRequirement_CountDelegate, new object[] {
                        remoteFilters}, this.onEndRequirement_CountDelegate, this.onRequirement_CountCompletedDelegate, userState);
        }
        
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement Requirement_Create1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition) {
            return base.Channel.Requirement_Create1(remoteRequirement, indentPosition);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRequirement_Create1(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRequirement_Create1(remoteRequirement, indentPosition, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement EndRequirement_Create1(System.IAsyncResult result) {
            return base.Channel.EndRequirement_Create1(result);
        }
        
        private System.IAsyncResult OnBeginRequirement_Create1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement = ((Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement)(inValues[0]));
            int indentPosition = ((int)(inValues[1]));
            return this.BeginRequirement_Create1(remoteRequirement, indentPosition, callback, asyncState);
        }
        
        private object[] OnEndRequirement_Create1(System.IAsyncResult result) {
            Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement retVal = this.EndRequirement_Create1(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRequirement_Create1Completed(object state) {
            if ((this.Requirement_Create1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Requirement_Create1Completed(this, new Requirement_Create1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Requirement_Create1Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition) {
            this.Requirement_Create1Async(remoteRequirement, indentPosition, null);
        }
        
        public void Requirement_Create1Async(Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client.RemoteRequirement remoteRequirement, int indentPosition, object userState) {
            if ((this.onBeginRequirement_Create1Delegate == null)) {
                this.onBeginRequirement_Create1Delegate = new BeginOperationDelegate(this.OnBeginRequirement_Create1);
            }
            if ((this.onEndRequirement_Create1Delegate == null)) {
                this.onEndRequirement_Create1Delegate = new EndOperationDelegate(this.OnEndRequirement_Create1);
            }
            if ((this.onRequirement_Create1CompletedDelegate == null)) {
                this.onRequirement_Create1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRequirement_Create1Completed);
            }
            base.InvokeAsync(this.onBeginRequirement_Create1Delegate, new object[] {
                        remoteRequirement,
                        indentPosition}, this.onEndRequirement_Create1Delegate, this.onRequirement_Create1CompletedDelegate, userState);
        }
    }
}
