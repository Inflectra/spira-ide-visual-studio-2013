<UserControl x:Class="Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Forms.frmDetailsRequirement"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:bus_client="clr-namespace:Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Business.SpiraTeam_Client;assembly=Business"
	xmlns:ui_cntrl="clr-namespace:Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Controls"
    xmlns:tk="clr-namespace:Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Forms.ToolKit;assembly=WPFFormats"
	xmlns:vsfx="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.10.0"
	xmlns:resources="clr-namespace:Inflectra.SpiraTest.IDEIntegration.VisualStudio2012.Properties"
	Padding="0"
	FontFamily="Segoe UI"
	FontSize="10pt"
	Width="Auto" Height="Auto"
	Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}"
	Background="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowBackgroundKey}}">

    <UserControl.Resources>
        <!-- Display Templates -->
        <DataTemplate DataType="{x:Type bus_client:RemoteRelease}">
            <StackPanel Orientation="Horizontal" >
                <TextBlock Height="Auto" Width="Auto">
					<Run Text="{Binding Path=VersionNumber}" />
					<Run Text=" - " />
					<Run Text="{Binding Path=Name}" />
                </TextBlock>
            </StackPanel>
        </DataTemplate>
        <!-- Brushes for Backgrounds -->
        <LinearGradientBrush x:Key="WarningMessageBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="LightGoldenrodYellow" Offset=".65" />
            <GradientStop Color="Gold" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ErrorMessageBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="LightPink" Offset=".65" />
            <GradientStop Color="Red" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="InfoMessageBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="LightBlue" Offset=".65" />
            <GradientStop Color="RoyalBlue" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="NoMessageBackgroundBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="#00000000" Offset="0.1" />
            <GradientStop Color="#40000000" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="WarningControlBackground" StartPoint=".5,0" EndPoint=".5,1">
            <GradientStop Color="LightGoldenrodYellow" Offset=".35" />
            <GradientStop Color="Gold" Offset="1.5" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ErrorControlBackground" StartPoint=".5,0" EndPoint=".5,1">
            <GradientStop Color="LightPink" Offset=".35" />
            <GradientStop Color="IndianRed" Offset="1.5" />
        </LinearGradientBrush>
        <!-- Styles for Controls -->
        <Style x:Key="PaddedLabel">
            <Setter Property="Control.Margin" Value="3" />
            <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
            <Setter Property="TextBlock.TextAlignment" Value="Right" />
            <Setter Property="Control.VerticalAlignment" Value="Center" />
            <Setter Property="Control.IsTabStop" Value="False" />
            <Setter Property="TextBlock.TextTrimming" Value="None" />
            <Setter Property="TextBlock.TextWrapping" Value="NoWrap" />
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
        </Style>
        <Style x:Key="PaddedLabelHighlight">
            <Setter Property="Control.Margin" Value="3" />
            <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
            <Setter Property="TextBlock.TextAlignment" Value="Right" />
            <Setter Property="Control.VerticalAlignment" Value="Center" />
            <Setter Property="Control.IsTabStop" Value="False" />
            <Setter Property="TextBlock.TextTrimming" Value="None" />
            <Setter Property="TextBlock.TextWrapping" Value="NoWrap" />
            <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
            <Style.Triggers>
                <Trigger Property="TextBlock.IsMouseOver" Value="true">
                    <Setter Property="TextBlock.Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMenuBackgroundGradientKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RequiredStyle">
            <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
            <Style.Triggers>
                <Trigger Property="Control.Tag" Value="1">
                    <Setter Property="Control.Background" Value="{StaticResource WarningControlBackground}" />
                </Trigger>
                <Trigger Property="Control.Tag" Value="2">
                    <Setter Property="Control.Background" Value="{StaticResource ErrorControlBackground}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="PaddedControlRequiredHighlight">
            <Setter Property="Control.MinWidth" Value="150" />
            <Setter Property="Control.Margin" Value="3" />
            <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
            <Setter Property="Control.VerticalAlignment" Value="Stretch" />
            <Setter Property="Control.Background" Value="{StaticResource ResourceKey=ErrorControlBackground}" />
        </Style>
        <Style x:Key="PaddedControl">
            <Setter Property="Control.MinWidth" Value="150" />
            <Setter Property="Control.Margin" Value="3" />
            <Setter Property="Control.HorizontalAlignment" Value="Stretch" />
            <Setter Property="Control.VerticalAlignment" Value="Stretch" />
        </Style>
        <Style x:Key="ConcurrencyHighlight">
            <Style.Triggers>
                <Trigger Property="Control.Tag" Value="1">
                    <Setter Property="Control.Background" Value="{StaticResource WarningControlBackground}" />
                </Trigger>
                <Trigger Property="Control.Tag" Value="2">
                    <Setter Property="Control.Background" Value="{StaticResource ErrorControlBackground}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- Expander Animations & Styles -->
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle SnapsToDevicePixels="true" Margin="0" Stroke="Black" StrokeDashArray="1 2" StrokeThickness="1"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid SnapsToDevicePixels="False" Background="{DynamicResource {x:Static vsfx:VsBrushes.DropDownBackgroundKey}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarGradientKey}}" Stroke="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarHorizontalGradientKey}}"/>
                                <Ellipse Visibility="Hidden" HorizontalAlignment="Center" x:Name="shadow" VerticalAlignment="Center" Width="17" Height="17" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMouseOverBackgroundGradientKey}}" />
                                <Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="{DynamicResource {x:Static vsfx:VsBrushes.PageSideBarExpanderTextKey}}" StrokeThickness="2" Data="M 1,1.5 L 4.5,5 L 8,1.5" />
                                <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMouseDownBorderKey}}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                <Setter Property="Visibility" TargetName="shadow" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                            <Grid SnapsToDevicePixels="False" Background="{DynamicResource {x:Static vsfx:VsBrushes.DropDownBackgroundKey}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid>
                                    <Grid.LayoutTransform>
                                        <TransformGroup>
                                            <TransformGroup.Children>
                                                <TransformCollection>
                                                    <RotateTransform Angle="180"/>
                                                </TransformCollection>
                                            </TransformGroup.Children>
                                        </TransformGroup>
                                    </Grid.LayoutTransform>
                                    <Ellipse HorizontalAlignment="Center" x:Name="circle" VerticalAlignment="Center" Width="19" Height="19" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarGradientKey}}" Stroke="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarHorizontalGradientKey}}"/>
                                    <Ellipse Visibility="Hidden" HorizontalAlignment="Center" x:Name="shadow" VerticalAlignment="Center" Width="17" Height="17" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMouseOverBackgroundGradientKey}}" />
                                    <Path SnapsToDevicePixels="false" HorizontalAlignment="Center" x:Name="arrow" VerticalAlignment="Center" Stroke="{DynamicResource {x:Static vsfx:VsBrushes.PageSideBarExpanderTextKey}}" StrokeThickness="2" Data="M 1,1.5  L 4.5,5  L 8,1.5" />
                                </Grid>
                                <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,0,0,0" VerticalAlignment="Center" Grid.Column="1" RecognizesAccessKey="True"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Stroke" TargetName="circle" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMouseDownBorderKey}}"/>
                                <Setter Property="Stroke" TargetName="arrow" Value="#222"/>
                                <Setter Property="Visibility" TargetName="shadow" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderStyle1" TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="Timeline1">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:0.25" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:0.25" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="Timeline2">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.45" Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:0.45" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3">
                            <DockPanel>
                                <ToggleButton FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontStretch="{TemplateBinding FontStretch}" FontStyle="{TemplateBinding FontStyle}" FontWeight="{TemplateBinding FontWeight}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" Margin="1" MinHeight="0" MinWidth="0" x:Name="HeaderSite" Style="{StaticResource ExpanderDownHeaderStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" DockPanel.Dock="Top" />
                                <ContentPresenter Focusable="false" Visibility="Visible" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" x:Name="ExpandSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" DockPanel.Dock="Bottom">
                                    <ContentPresenter.LayoutTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="0"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </ContentPresenter.LayoutTransform>
                                </ContentPresenter>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource Timeline1}"/>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource Timeline2}"/>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="ExpandDirection" Value="Up">
                                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Menu Hover Styles -->
        <Style x:Key="MenuHoverStyle" TargetType="{x:Type MenuItem}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMouseOverBackgroundGradientKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarSelectedBorderKey}}" />
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMenuBackgroundGradientBeginKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarSelectedBorderKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <Grid>
        <!-- Loading Grid -->
        <Grid Name="panelStatus" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="5" Cursor="Wait">
            <Border Opacity=".75" Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Border Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="10" BorderBrush="{DynamicResource {x:Static vsfx:VsBrushes.AutoHideTabBorderKey}}" BorderThickness="3">
                <StackPanel Orientation="Horizontal">
                    <Image Name="imgLoadingIncident" HorizontalAlignment="Center" VerticalAlignment="Center" Height="48" Width="48" Margin="5" />
                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" Margin="10">
                        <TextBlock Name="lblLoadingIncident" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTabTextKey}}" FontWeight="Bold"  HorizontalAlignment="Center" Margin="0,0,0,3"  />
                        <ProgressBar Name="barLoadingReq" HorizontalAlignment="Stretch" Height="10" Margin="5,0,5,0" Maximum="1" Minimum="0" />
                    </StackPanel>
                </StackPanel>
            </Border>
        </Grid>

        <!-- Saving Grid -->
        <Grid Name="panelSaving" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="10" Cursor="Wait" Visibility="Collapsed">
            <Border Opacity=".75" Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Border Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="10" BorderBrush="{DynamicResource {x:Static vsfx:VsBrushes.AutoHideTabBorderKey}}" BorderThickness="3">
                <StackPanel Orientation="Horizontal">
                    <Image Name="imgSavingIncident" HorizontalAlignment="Center" VerticalAlignment="Center" Height="48" Width="48" Margin="5" />
                    <StackPanel Orientation="Vertical" VerticalAlignment="Center" Margin="10">
                        <TextBlock Name="lblSavingIncident" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTabTextKey}}" FontWeight="Bold"  HorizontalAlignment="Center" Margin="0,0,0,3"  />
                        <ProgressBar Name="barSavingReq" HorizontalAlignment="Stretch" Height="10" Margin="5,0,5,0" Maximum="1" Minimum="0" />
                    </StackPanel>
                </StackPanel>
            </Border>
        </Grid>

        <!-- Error Grid -->
        <Grid Name="panelError" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="15" Visibility="Collapsed">
            <Border Opacity=".75" Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <Border Background="{DynamicResource {x:Static vsfx:VsBrushes.EnvironmentBackgroundGradientKey}}" Panel.ZIndex="0" HorizontalAlignment="Center" VerticalAlignment="Center" CornerRadius="10" BorderBrush="{DynamicResource {x:Static vsfx:VsBrushes.AutoHideTabBorderKey}}" BorderThickness="3" Margin="100 0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <!-- The Image on the left.-->
                    <Image Name="imgLoadingError" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Top" Height="48" Width="48" Margin="5" />
                    <!-- The grid that asks whether the user wants to reload or merge changes. -->
                    <Grid Grid.Row="0" Grid.Column="1" Name="gridSavingConcurrencyMerge" Visibility="Collapsed">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Name="lblMergeConcurrency" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTabTextKey}}" FontWeight="Bold"  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" TextWrapping="Wrap" />
                    </Grid>
                    <!-- The grid that says that the incident cannot be merged. -->
                    <Grid Grid.Row="0" Grid.Column="1" Name="gridSavingConcurrencyNoMerge" Visibility="Collapsed"  Margin="30 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Name="lblNoMergeConcurrency" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTabTextKey}}" FontWeight="Bold"  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" TextWrapping="Wrap" />
                    </Grid>
                    <!-- The grid that says that there was an error loading. -->
                    <Grid Grid.Row="0" Grid.Column="1" Name="gridLoadingError" Visibility="Collapsed"  Margin="30 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Name="lblLoadingError" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTabTextKey}}" FontWeight="Bold"  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" TextWrapping="Wrap" />
                    </Grid>
                    <!-- Refresh / Save Anyway Buttons -->
                    <Grid Grid.Column="1" Grid.Row="1" HorizontalAlignment="Center" Visibility="{Binding ElementName=gridSavingConcurrencyMerge, Path=Visibility}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Button Name="btnConcurrencyMergeYes" Grid.Column="0" Grid.Row="0" Content="[merge]" IsTabStop="False" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="5" Padding="3" Click="btnConcurrencyMergeYes_Click" />
                        <Button Name="btnConcurrencyMergeNo" Grid.Column="1" Grid.Row="0" Content="[refresh]" IsTabStop="False" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5" Padding="3" Click="btnConcurrencyRefresh_Click" />
                    </Grid>
                    <!-- Refresh Button -->
                    <Grid Grid.Column="1" Grid.Row="1" HorizontalAlignment="Center" Visibility="{Binding ElementName=gridSavingConcurrencyNoMerge, Path=Visibility}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Button Name="btnConcurrencyRefresh" Grid.Column="0" Grid.Row="0" Content="[refresh]" IsTabStop="False" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5" Padding="3" Click="btnConcurrencyRefresh_Click" />
                    </Grid>
                    <!-- Retry Button -->
                    <Grid Grid.Column="1" Grid.Row="1" HorizontalAlignment="Center" Visibility="{Binding ElementName=gridLoadingError, Path=Visibility}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Button Name="btnRetryLoad" Grid.Column="0" Grid.Row="0" Content="[retry]" IsTabStop="False" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5" Padding="3" Click="btnRetryLoad_Click" />
                    </Grid>
                </Grid>
            </Border>
        </Grid>

        <DockPanel LastChildFill="True" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Panel.ZIndex="1">
            <ToolBarPanel HorizontalAlignment="Stretch" DockPanel.Dock="Top" Orientation="Horizontal" Background="{DynamicResource {x:Static vsfx:VsBrushes.CommandShelfBackgroundGradientKey}}">
                <ToolBar Name="toolbarIncidentStatus" Loaded="_toolbar_Loaded" Background="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarGradientKey}}" Width="{Binding Path=ActualWidth,RelativeSource={RelativeSource AncestorType={x:Type ToolBarPanel}}}" HorizontalAlignment="Stretch">
                    <Button Name="btnSave" IsEnabled="False"  ToolBar.OverflowMode="Never" IsEnabledChanged="toolButton_IsEnabledChanged" Click="btnSave_Click">
                        <StackPanel Orientation="Horizontal">
                            <Image Name="toolImgSave" Height="16" Width="16" Source="/SpiraExplorer;component/Resources/imgSave.png" />
                            <TextBlock Name="toolTxtSave" Margin="2,0,0,0" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                        </StackPanel>
                    </Button>
                    <Separator ToolBar.OverflowMode="Never" />
                    <Button DockPanel.Dock="Left" Name="btnRefresh" ToolBar.OverflowMode="Never" Click="btnRefresh_Click">
                        <StackPanel Orientation="Horizontal">
                            <Image Name="toolImgRefresh" Height="16" Width="16" Source="/SpiraExplorer;component/Resources/imgReload.png" />
                            <TextBlock Name="toolTxtRefresh" Margin="2,0,0,0" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                        </StackPanel>
                    </Button>
                    <Separator ToolBar.OverflowMode="Never" />
                    <Button DockPanel.Dock="Left" Name="btnLoadWeb" ToolBar.OverflowMode="Never" Click="btnLoadWeb_Click">
                        <StackPanel Orientation="Horizontal">
                            <Image Name="toolImgLoadWeb" Height="16" Width="16" Source="/SpiraExplorer;component/Resources/imgOpenWeb.png" />
                            <TextBlock Name="toolTxtLoadWeb" Margin="2,0,0,0" Foreground="{DynamicResource {x:Static vsfx:VsBrushes.ToolWindowTextKey}}" />
                        </StackPanel>
                    </Button>
                </ToolBar>
            </ToolBarPanel>

            <ScrollViewer Grid.Column="0" Grid.Row="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Panel.ZIndex="1">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Expander Grid.Row="0" IsExpanded="True" Style="{DynamicResource ExpanderStyle1}">
                        <Expander.Header>
                            <TextBlock Name="lblExpanderDetails" VerticalAlignment="Center" />
                        </Expander.Header>
                        <Grid HorizontalAlignment="Stretch" Background="{DynamicResource {x:Static vsfx:VsBrushes.DesignerBackgroundKey}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <!-- COL0: Left Labels -->
                                <ColumnDefinition Width="6*" />
                                <!-- COL1: Left Dropdowns -->
                                <ColumnDefinition Width="10" />
                                <!-- COL2: Empty Space (Pink Floyd) -->
                                <ColumnDefinition Width="Auto" />
                                <!-- COL3: Right Labels -->
                                <ColumnDefinition Width="6*" />
                                <!-- COL4: Right Dropdowns -->
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <!-- ROW0: Requirement Name -->
                                <RowDefinition Height="Auto" />
                                <!-- ROW1: Priority, Creator -->
                                <RowDefinition Height="Auto" />
                                <!-- ROW2: Status, Release -->
                                <RowDefinition Height="Auto" />
                                <!-- ROW3: Planned Effort, Owned By -->
                                <RowDefinition Height="Auto" />
                                <!-- ROW4: Description -->
                                <RowDefinition Height="Auto" />
                                <!-- ROW4: Custom Props -->
                            </Grid.RowDefinitions>

                            <!-- ROW0: Requirement Name -->
                            <DockPanel Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="5" LastChildFill="True">
                                <TextBlock DockPanel.Dock="Left" Name="lblName" VerticalAlignment="Center" FontWeight="Bold" Style="{StaticResource PaddedLabel}" />
                                <TextBlock DockPanel.Dock="Right" Name="lblToken" Margin="4,0,0,0" Cursor="Hand" MouseDown="lblToken_MouseDown" Style="{StaticResource PaddedLabelHighlight}" VerticalAlignment="Center">
                                    <TextBlock.ToolTip>
                                        <TextBlock Name="lblTxtToken" />
                                    </TextBlock.ToolTip>
								</TextBlock>
                                <TextBox Name="cntrlName" Width="Auto" Margin="3,3,0,3" VerticalAlignment="Center" TextChanged="_cntrl_TextChanged" Style="{StaticResource PaddedControl}" />
                            </DockPanel>
                            <!-- ROW1: Description -->
                            <GroupBox Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="5" Name="grpDescription" Style="{StaticResource RequiredStyle}">
                                <GroupBox.Header>
                                    <TextBlock Name="lblDescription" FontWeight="Bold" />
                                </GroupBox.Header>
                                <GroupBox.Content>
                                    <ui_cntrl:cntrlRichTextEditor x:Name="cntrlDescription" Height="200" Width="Auto" TextChanged="_cntrl_TextChanged" Padding="2" IsSpellcheckEnabled="True" />
                                </GroupBox.Content>
                            </GroupBox>
                            <!-- ROW2: Priority, Creator -->
                            <TextBlock  Name="lblImportance" Grid.Column="0" Grid.Row="2" Style="{StaticResource PaddedLabel}" />
                            <ComboBox Grid.Column="1" Grid.Row="2" Name="cntrlImportance" Style="{StaticResource PaddedControl}" DisplayMemberPath="Name" SelectionChanged="_cntrl_TextChanged" />
                            <TextBlock Name="lblCreatedBy" Grid.Column="3" Grid.Row="2" Style="{StaticResource PaddedLabel}" />
                            <ComboBox Grid.Column="4" Grid.Row="2" Name="cntrlCreatedBy" Style="{StaticResource PaddedControl}" SelectionChanged="_cntrl_TextChanged" DisplayMemberPath="FullName" />
                            <!-- ROW3: Status, Release -->
                            <TextBlock Name="lblStatus" Grid.Column="0" Grid.Row="3" Style="{StaticResource PaddedLabel}" />
                            <ComboBox Grid.Column="1" Grid.Row="3" Name="cntrlStatus" Style="{StaticResource PaddedControl}" DisplayMemberPath="Name" SelectionChanged="_cntrl_TextChanged" />
                            <TextBlock  Name="lblRelease" Grid.Column="3" Grid.Row="3" Style="{StaticResource PaddedLabel}" />
                            <ComboBox Grid.Column="4" Grid.Row="3" Name="cntrlRelease" Style="{StaticResource PaddedControl}" SelectionChanged="_cntrl_TextChanged" />
                            <!-- ROW4: Planned Effort, Owned By -->
                            <TextBlock Name="lblPlnEffort" Grid.Column="0" Grid.Row="4" Style="{StaticResource PaddedLabel}" />
                            <StackPanel Grid.Column="1" Grid.Row="4" Orientation="Horizontal">
                                <tk:IntegerUpDown x:Name="cntrlPlnEffortH" Style="{StaticResource PaddedControl}" Width="60" MinWidth="0" Minimum="0" Maximum="720" />
                                <TextBlock Style="{StaticResource PaddedLabel}" Name="lblHours" />
                                <tk:IntegerUpDown x:Name="cntrlPlnEffortM" Style="{StaticResource PaddedControl}" Width="60" MinWidth="0" Minimum="0" Maximum="59" Background="{Binding ElementName=cntrlPlnEffortH, Path=Background}" />
                                <TextBlock Style="{StaticResource PaddedLabel}" Name="lblMins" />
                            </StackPanel>
                            <TextBlock  Name="lblOwnedBy" Grid.Column="3" Grid.Row="4" Style="{StaticResource PaddedLabel}" />
                            <ComboBox Grid.Column="4" Grid.Row="4" Name="cntrlOwnedBy" Style="{StaticResource PaddedControl}" SelectionChanged="_cntrl_TextChanged" DisplayMemberPath="FullName" />
                            <!-- ROW5: Custom Props -->
                            <ui_cntrl:cntlCustomProps x:Name="cntCustomProps" Grid.Column="0" Grid.ColumnSpan="5" Grid.Row="5" NumberControlColumns="2" LabelStyle="{StaticResource PaddedLabel}" ControlNormalStyle="{StaticResource PaddedControl}" ControlChanged="_cntrl_TextChanged"  />
                        </Grid>
                    </Expander>
                    <ListBox Grid.Row="1" SelectionMode="Single">
                        <ListBox.Resources>
                            <Style TargetType="{x:Type Expander}">
                                <Setter Property="IsExpanded" Value="{Binding Path=IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"/>
                            </Style>
                        </ListBox.Resources>
                        <ListBox.Template>
                            <ControlTemplate TargetType="{x:Type ListBox}">
                                <ItemsPresenter />
                            </ControlTemplate>
                        </ListBox.Template>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <ContentPresenter Content="{TemplateBinding Content}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ListBox.ItemContainerStyle>
                        <!-- Resolution / Comments -->
                        <Expander IsExpanded="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Style="{DynamicResource ExpanderStyle1}">
                            <Expander.Header>
                                <TextBlock Name="lblExpanderResolution" VerticalAlignment="Center" />
                            </Expander.Header>
                            <StackPanel Orientation="Vertical" Background="{DynamicResource {x:Static vsfx:VsBrushes.DesignerBackgroundKey}}">
                                <GroupBox Name="grpResolution" Style="{StaticResource ResourceKey=RequiredStyle}">
                                    <GroupBox.Header>
                                        <TextBlock Name="lblAddNewResolution" FontWeight="Bold" />
                                    </GroupBox.Header>
                                    <GroupBox.Content>
                                        <ui_cntrl:cntrlRichTextEditor x:Name="cntrlResolution" Height="100" Width="Auto" Padding="2" TextChanged="_cntrl_TextChanged" IsSpellcheckEnabled="True"  />
                                    </GroupBox.Content>
                                </GroupBox>
                                <StackPanel Name="cntrlDiscussion" Orientation="Vertical" />
                            </StackPanel>
                        </Expander>
                        <!-- Assigned Tasks -->
                        <Expander IsExpanded="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Style="{DynamicResource ExpanderStyle1}">
                            <Expander.Header>
                                <TextBlock Name="lblExpanderTasks" VerticalAlignment="Center" />
                            </Expander.Header>
                            <Grid Name="gridTasks" Margin="10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <!-- Header Row -->
                                <Rectangle Grid.Column="0" Grid.ColumnSpan="7" Grid.Row="0" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMenuBackgroundGradientKey}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Name="rectTitleBar" Panel.ZIndex="-100" />
                                <TextBlock Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" FontWeight="Bold" Text="Task Name" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Left" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="2" Grid.Row="0" FontWeight="Bold" Text="Progress" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="3" Grid.Row="0" FontWeight="Bold" Text="Status" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="4" Grid.Row="0" FontWeight="Bold" Text="Priority" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="5" Grid.Row="0" FontWeight="Bold" Text="Owner" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" Panel.ZIndex="9999" />
                            </Grid>
                        </Expander>
                        <!-- Attachments -->
                        <Expander IsExpanded="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Style="{DynamicResource ExpanderStyle1}">
                            <Expander.Header>
                                <TextBlock Name="lblExpanderAttachments" VerticalAlignment="Center" />
                            </Expander.Header>
                            <!-- TODO: Generate Custom Field controls -->
                            <Grid Name="gridAttachments">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <!-- Header Row -->
                                <Rectangle Grid.Column="0" Grid.ColumnSpan="6" Grid.Row="0" Fill="{DynamicResource {x:Static vsfx:VsBrushes.CommandBarMenuBackgroundGradientKey}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Name="rectTitleBar2" Panel.ZIndex="-100" />
                                <TextBlock Grid.Column="0" Grid.Row="0" FontWeight="Bold" Text="Filename" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="1" Grid.Row="0" FontWeight="Bold" Text="Version" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="2" Grid.Row="0" FontWeight="Bold" Text="Author" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="3" Grid.Row="0" FontWeight="Bold" Text="Date Created" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                                <TextBlock Grid.Column="4" Grid.Row="0" FontWeight="Bold" Text="Size" Style="{StaticResource PaddedLabel}" HorizontalAlignment="Center" Padding="0,3,0,3" />
                            </Grid>
                        </Expander>
                    </ListBox>
                </Grid>
            </ScrollViewer>
        </DockPanel>
    </Grid>
</UserControl>
